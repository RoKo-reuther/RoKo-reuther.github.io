---
title: "Interactive steady-state"

engine: knitr

filters:
  - webr
---

## Explore Model Results Interactively

### Get Values

There is a set of functions to easily check values. They all have similar arguments.

**Concentrations**

- returns concentrations (mol m-3_phase)
- works for lump sums and speciation results
- depth specification optional

```{r}
#| echo: true
#| eval: false

# Definition
std.conc <- function(std, species, depth = minmaxdepth())

# Usage
std.conc(std1, "Fe2")
std.conc(std2, "PO4", depth = c(0.05, 0.5))
```

**Transport**

- returns change of concentration due to transport (mol m-3_phase yr-1)
- depth specification optional

```{r}
#| echo: true
#| eval: false

# Definition
std.transport <- function(std, species, depth = minmaxdepth())

# Usage
std.transport(std1, "Fe2")
std.transport(std2, "PO4", depth = c(0.05, 0.5))
```

**Fluxes**

- return fluxes at the top / bottom boundary (mol m-2)

```{r}
#| echo: true
#| eval: false

# Definition
std.flux_up   <- function(std, species)
std.flux_down <- function(std, species)

# Usage
std.flux_up(std1, "Fe2")
std.flux_down(std1, "FeOH3")
```

**Change of concentration due to reactions**

- returns change of concentration due to reactions (mol m-3 yr-1)
- depth specification optional

```{r}
#| echo: true
#| eval: false

# Definition
std.sumR <- function(std, species, depth = minmaxdepth())

# Usage
std.sumR(std1, "Fe2")
std.sumR(std2, "FeOH3", depth = c(0.05, 0.5))
```

**Reaction Rates**

- returns reaction rates (mol m-3 yr-1)
- depth specification optional

```{r}
#| echo: true
#| eval: false

# Definition
std.rate <- function(std, rate, depth = minmaxdepth())

# Usage
std.rate(std1, "R1")
std.rate(std2, "R1", depth = c(0.05, 0.5))
```

**Omega**

- returns omega (saturation states) (-)
- depth specification optional

```{r}
#| echo: true
#| eval: false

# Definition
std.omega <- function(std, species, depth = minmaxdepth())

# Usage
std.omega(std = std1, species = "Viv")
std.omega(std = std1, species = "FeS", depth = c(0.02, 0.03))
```

### Plot

- the functions from the previous section can be used to create a quick plot.
- different profiles can be plotted together
- to name entries in the legend, give an profile a argument-name
- do not specify a deth for the single elements!!! the depth of interest to be plotted can be specified seperately
- the legend position can be specified via keywords ("bottomright", "bottom", "bottomleft", "left", "topleft", "top", "topright", "right" and "center")

```{r}
#| echo: true
#| eval: false

# Definition
std.plot <- function(..., depth = minmaxdepth(), legendpos = "bottomright")

# Usage
std.plot(
  Fe2_std1 = std.conc(std1, "Fe2"),
  Fe2_std2 = std.conc(std2, "Fe2"),
  depth = c(0.00, 0.01)
)
```

### Explore ;)

```{webr-r}
#| context: setup

download_model_result <- function(url) {
  download.file(url, "temp.csv")
  read.csv("temp.csv", sep = ",")
}

grid <- download_model_result("https://raw.githubusercontent.com/RoKo-reuther/temp_drop/master/grid.csv")

std0 <- list(
  species    = download_model_result("https://raw.githubusercontent.com/RoKo-reuther/temp_drop/master/std0_species.csv"),
  transport  = download_model_result("https://raw.githubusercontent.com/RoKo-reuther/temp_drop/master/std0_transport.csv"),
  sumR       = download_model_result("https://raw.githubusercontent.com/RoKo-reuther/temp_drop/master/std0_sumR.csv"),
  rates      = download_model_result("https://raw.githubusercontent.com/RoKo-reuther/temp_drop/master/std0_rates.csv"),
  omega      = download_model_result("https://raw.githubusercontent.com/RoKo-reuther/temp_drop/master/std0_omega.csv")
)

std1 <- list(
  species    = download_model_result("https://raw.githubusercontent.com/RoKo-reuther/temp_drop/master/std1_species.csv"),
  transport  = download_model_result("https://raw.githubusercontent.com/RoKo-reuther/temp_drop/master/std1_transport.csv"),
  sumR       = download_model_result("https://raw.githubusercontent.com/RoKo-reuther/temp_drop/master/std1_sumR.csv"),
  rates      = download_model_result("https://raw.githubusercontent.com/RoKo-reuther/temp_drop/master/std1_rates.csv"),
  omega      = download_model_result("https://raw.githubusercontent.com/RoKo-reuther/temp_drop/master/std1_omega.csv")
)

std2 <- list(
  species    = download_model_result("https://raw.githubusercontent.com/RoKo-reuther/temp_drop/master/std2_species.csv"),
  transport  = download_model_result("https://raw.githubusercontent.com/RoKo-reuther/temp_drop/master/std2_transport.csv"),
  sumR       = download_model_result("https://raw.githubusercontent.com/RoKo-reuther/temp_drop/master/std2_sumR.csv"),
  rates      = download_model_result("https://raw.githubusercontent.com/RoKo-reuther/temp_drop/master/std2_rates.csv"),
  omega      = download_model_result("https://raw.githubusercontent.com/RoKo-reuther/temp_drop/master/std2_omega.csv"),
  speciation = download_model_result("https://raw.githubusercontent.com/RoKo-reuther/temp_drop/master/std2_speciation.csv")
)

# HELPER FUNCTIONS TO FIND VALUES
index_by_depth <- function(start, end) {
  which(grid[,2] >= start & grid[,2] <= end)
}

minmaxdepth <- function() {c(min(grid[,2]), max(grid[,2]))}

std.conc <- function(std, species, depth = minmaxdepth()) {
  # std.conc(std = std1, species = "Fe2", depth = c(0.02,0.03))
  
  data <- as.matrix(std$species)
  if (!is.null(std$speciation)) {
    data <- cbind(as.matrix(std$species), as.matrix(std$speciation))
  }

  depth <- index_by_depth(depth[1], depth[2])

  return(data[depth, species])
}

std.transport <- function(std, species, depth = minmaxdepth()) {
  # std.transport(std = std1, species = "Fe2", depth = c(0.02,0.03))
  std$transport[[paste0("tran.", species, ".dC")]][index_by_depth(depth[1], depth[2])]
}

std.flux_up <- function(std, species) {
  # std.flux_up(std = std1, species = "Fe2")
  std$transport[[paste0("tran.", species, ".flux.up")]][1]
}

std.flux_down <- function(std, species) {
  # std.flux_down(std = std1, species = "Fe2")
  std$transport[[paste0("tran.", species, ".flux.down")]][1]
}

std.sumR <- function(std, species, depth = minmaxdepth()) {
  # std.sumR(std = std1, species = "Fe2", depth = c(0.02,0.03))
  std$sumR[index_by_depth(depth[1], depth[2]), paste0("R.", species)]
}

std.rate <- function(std, rate, depth = minmaxdepth()) {
  # std.rate(std = std1, rate = "R12", depth = c(0.02,0.03))
  std$rates[index_by_depth(depth[1], depth[2]), rate]
}

std.omega <- function(std, species, depth = minmaxdepth()) {
  # std.omega(std = std1, species = "Siderite", depth = c(0.02, 0.03))
  std$omega[index_by_depth(depth[1], depth[2]), species]
}

std.plot <- function(..., depth = minmaxdepth(), legendpos = "bottomright") {
  # plots an vector of x values and more over the depth specified for this elements
  # do not specify a depth for single elements!!!
  # std.plot(std1 = std.conc(std1, "Fe2"), std2 = std.conc(std2, "Fe2"))

  index <- index_by_depth(depth[1], depth[2])

  depth <- grid[index, 2]

  elements <- list(...)

  elements <- as.data.frame(elements)

  cols <- palette.colors(ncol(elements))

  plot(
    x    = elements[index, 1],
    y    = depth,
    ylim = c(max(depth), min(depth)),
    xlim = c(min(elements[index,]), max(elements[index,])),
    type = "l",
    lwd  = 2,
    col  = cols[1],
    ylab = "depth",
    xlab = ""
  )

  for (i in seq_len(ncol(elements))[-1]) {

    points(
      x    = elements[index, i],
      y    = depth,
      type = "l",
      lwd  = 2,
      col  = cols[i]
    )

  }

  legend(
    legendpos,
    legend = colnames(elements),
    col    = cols,
    lwd = 2
  )
  
}
```

```{webr-r}
f_PO4 <- std.conc(std2, "PO4") / std.conc(std2, "TOT_P")

std.plot(
  f_PO4 = f_PO4,
  depth = c(0.00, 0.01)
)
```

```{webr-r}
```

```{webr-r}
```