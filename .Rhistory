K_H3PO4 = 10^-5,
## ratio of Fe to P in Fe(OH)_3(H3PO4)_lambda
lambda  = 0.6,
# Siderite Precipitation / Dissolution
k_precip_siderite = 1.8e2,  # mol m-3_sf yr-1
k_diss_siderite   = 2.5e-1, # yr-1
Ksp_siderite      = 10^(-10.4) * 1000^2, # mol2 m-6
# FeOH3 / FeOH3~H3PO4-Reduction coupled to Sulphide Oxidation
k_Fe_red_S_ox = 10^2, # m3 mol-1 yr-1
# FeOH3 / FeOH3~H3PO4-Formation
k_FeOH3_formation = 1.4e2, # m3 mol-1 yr-1
# H2S Oxidation
k_H2S_oxidation = 1.6e2, # m3_pw mol-1 yr-1
# SO4 Reduction Coupled to AOM
k_SO4_reduction = 50, # m3_pw mol-1 yr-1
# FeS Precipitation / Dissolution
k_precip_FeS = 100 * 2.5e-3, # mol m-3_sf yr-1
k_diss_FeS   = 100 * 1e-3,   # yr-1
Ksp_FeS      = 10^(-3.915) * 1000, # mol m-3
# Vivianite Precipitation / Dissolution
k_precip_Viv = 1.1e-2, # mol m-3_sf yr-1
k_diss_Viv   = 5.3e-3, # yr-1
Ksp_Viv      = 10^(-36) * 1000^5, # mol3 m-9
# CaCO3 Precipitation / Dissolution
k_precip_CaCO3 = 1.1e-1,  # mol m-3_sf yr-1
k_diss_CaCO3   = 1.25e-1, # mol m-3_sf yr-1
Ksp_CaCO3      = 10^(-8.48) * 1000^2, # mol2 m-6
# Apatite Precipitation / Dissolution
k_precip_Apatite = 1.4e-6, # mol m-3 yr-1
k_diss_Apatite   = 3.7e-2, # yr-1
Ksp_Apatite      = 6e-20  # mol3 m-9; 6e-20
)
#| echo: true
ratios_pH7 <- speciation_ratios(pH = 7, tableau, tableau_species, logK)
parameter <- c(
N_grid = N_grid,
conversion_factors,
boundary_conditions,
reaction_parameter,
ratios_pH7,
logK = logK,
tableau = tableau,
tableau_species = tableau_species
)
N_species <- length(model_species)
#| echo: true
#| code-fold: show
model <- function (t, state, parms, diff_coeffs, adv_vel, solve_equilibrium, precipitation){
with (as.list(parms),{
# assign state variables
i <- 1
# state variables for solutes are total amounts,
# but implicitly concentrations (total_amount/mÂ³_pw)
ALK     <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1 # -TOT_H
DIC     <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1 # TOT_H2CO3
TOT_P   <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1
TOT_N5  <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1
TOT_N3  <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1
TOT_S6  <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1
TOT_S2  <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1
CH4     <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1
O2      <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1
N2      <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1
Mn2     <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1
Fe2     <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1
Ca2     <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1
# state variables for solids are tableau-species concentrations (mol/m3_svf)
MnO2    <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1
OM      <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1
OM_beta <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1
FeOH3   <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1
FeOH3_P <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1
FeCO3   <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1
S0      <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1
FeS     <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1
Viv     <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1
CaCO3   <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1
Apatite <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1
# transport terms
tran.ALK     <- tran.1D(C = ALK, C.up = ALK_up, D = diff_coeffs$ALK,
v = adv_vel$u, VF = grid.por, dx = grid)
tran.DIC     <- tran.1D(C = DIC, C.up = DIC_up, D = diff_coeffs$DIC,
v = adv_vel$u, VF = grid.por, dx = grid)
tran.TOT_P   <- tran.1D(C = TOT_P, C.up = H2PO4_up, D = diff_coeffs$H2PO4,
v = adv_vel$u, VF = grid.por, dx = grid)
tran.TOT_N5  <- tran.1D(C = TOT_N5, C.up = NO3_up, D = diff_coeffs$NO3,
v = adv_vel$u, VF = grid.por, dx = grid)
tran.TOT_N3  <- tran.1D(C = TOT_N3, C.up = NH4_up, D = diff_coeffs$NH4,
v = adv_vel$u, VF = grid.por, dx = grid)
tran.TOT_S6  <- tran.1D(C = TOT_S6, C.up = SO4_up, D = diff_coeffs$SO4,
v = adv_vel$u, VF = grid.por, dx = grid)
tran.TOT_S2  <- tran.1D(C = TOT_S2, C.up = H2S_up, D = diff_coeffs$H2S,
v = adv_vel$u, VF = grid.por, dx = grid)
tran.CH4     <- tran.1D(C = CH4, C.up = CH4_up, D = diff_coeffs$CH4,
v = adv_vel$u, VF = grid.por, dx = grid)
tran.O2      <- tran.1D(C = O2, C.up = O2_up, D = diff_coeffs$O2,
v = adv_vel$u, VF = grid.por, dx = grid)
tran.N2      <- tran.1D(C = N2, C.up = N2_up, D = diff_coeffs$N2,
v = adv_vel$u, VF = grid.por, dx = grid)
tran.Mn2     <- tran.1D(C = Mn2, C.up = Mn2_up, D = diff_coeffs$Mn2,
v = adv_vel$u, VF = grid.por, dx = grid)
tran.Fe2     <- tran.1D(C = Fe2, C.up = Fe2_up, D = diff_coeffs$Fe2,
v = adv_vel$u, VF = grid.por, dx = grid)
tran.Ca2     <- tran.1D(C = Ca2, C.up = Ca2_up, D = diff_coeffs$Ca2,
v = adv_vel$u, VF = grid.por, dx = grid)
tran.MnO2    <- tran.1D(C = MnO2, flux.up = MnO2_up, D = diff_coeffs$solid,
v = adv_vel$v, VF = grid.svf, dx = grid)
tran.OM      <- tran.1D(C = OM, flux.up = OM_up, D = diff_coeffs$solid,
v = adv_vel$v, VF = grid.svf, dx = grid)
tran.OM_beta <- tran.1D(C = OM_beta, flux.up = OM_beta_up, D = diff_coeffs$solid,
v = adv_vel$v, VF = grid.svf, dx = grid)
tran.FeOH3   <- tran.1D(C = FeOH3, flux.up = FeOH3_up(t), D = diff_coeffs$solid,
v = adv_vel$v, VF = grid.svf, dx = grid)
tran.FeOH3_P <- tran.1D(C = FeOH3_P, flux.up = FeOH3_P_up, D = diff_coeffs$solid,
v = adv_vel$v, VF = grid.svf, dx = grid)
tran.FeCO3   <- tran.1D(C = FeCO3, flux.up = FeCO3_up, D = diff_coeffs$solid,
v = adv_vel$v, VF = grid.svf, dx = grid)
tran.S0      <- tran.1D(C = S0, flux.up = S0_up, D = diff_coeffs$solid,
v = adv_vel$v, VF = grid.svf, dx = grid)
tran.FeS     <- tran.1D(C = FeS, flux.up = FeS_up, D = diff_coeffs$solid,
v = adv_vel$v, VF = grid.svf, dx = grid)
tran.Viv     <- tran.1D(C = Viv, flux.up = Viv_up, D = diff_coeffs$solid,
v = adv_vel$v, VF = grid.svf, dx = grid)
tran.CaCO3   <- tran.1D(C = CaCO3, flux.up = CaCO3_up, D = diff_coeffs$solid,
v = adv_vel$v, VF = grid.svf, dx = grid)
tran.Apatite <- tran.1D(C = Apatite, flux.up = Apatite_up, D = diff_coeffs$solid,
v = adv_vel$v, VF = grid.svf, dx = grid)
# calculate solute equilibrium species (solve the tableau)
if (solve_equilibrium) {
# 1) grep the solute total components; here we need TOT_H = - ALK
solute_totals <- c(-ALK, DIC, TOT_P, TOT_N5, TOT_N3, TOT_S6, TOT_S2)
# 2) solve tableau
solute_equilibrium  <- solve_tableau(solute_totals, tableau, logK, N_grid, tableau_species)
# 3) assign results
H     <- solute_equilibrium$species_conc[,1]
pH    <- -log10(H * 10^-3)
OH    <- solute_equilibrium$species_conc[,2]
H2CO3 <- solute_equilibrium$species_conc[,3]
HCO3  <- solute_equilibrium$species_conc[,4]
CO3   <- solute_equilibrium$species_conc[,5]
H3PO4 <- solute_equilibrium$species_conc[,6]
H2PO4 <- solute_equilibrium$species_conc[,7]
HPO4  <- solute_equilibrium$species_conc[,8]
PO4   <- solute_equilibrium$species_conc[,9]
HNO3  <- solute_equilibrium$species_conc[,10]
NO3   <- solute_equilibrium$species_conc[,11]
NH4   <- solute_equilibrium$species_conc[,12]
NH3   <- solute_equilibrium$species_conc[,13]
H2SO4 <- solute_equilibrium$species_conc[,14]
HSO4  <- solute_equilibrium$species_conc[,15]
SO4   <- solute_equilibrium$species_conc[,16]
H2S   <- solute_equilibrium$species_conc[,17]
HS    <- solute_equilibrium$species_conc[,18]
S2    <- solute_equilibrium$species_conc[,19]
} else {
solute_equilibrium <- NA
}
# FeOH3 fractions
FeOH3_tot <- FeOH3 + FeOH3_P
chi <- rep(1, length(FeOH3))
ind_valid <- FeOH3_tot > 0
chi[ind_valid] <- FeOH3[ind_valid] / FeOH3_tot[ind_valid]
# limitation & inhibition terms
L_O2    <- O2   / (K_O2 + O2)
I_O2    <- K_O2 / (K_O2 + O2)
L_NO3   <- TOT_N5 / (K_NO3 + TOT_N5)
I_NO3   <- K_NO3 / (K_NO3 + TOT_N5)
L_MnO2  <- MnO2   / (K_MnO2 + MnO2)
I_MnO2  <- K_MnO2 / (K_MnO2 + MnO2)
L_FeOH3 <- FeOH3_tot / (K_FeOH3 + FeOH3_tot)
I_FeOH3 <- K_FeOH3 / (K_FeOH3 + FeOH3_tot)
L_SO4   <- TOT_S6 / (K_SO4 + TOT_S6)
I_SO4   <- K_SO4 / (K_SO4 + TOT_S6)
L_H3PO4 <- TOT_P   / (K_H3PO4 + TOT_P)
I_H3PO4 <- K_H3PO4 / (K_H3PO4 + TOT_P)
# Reaction Rates
## OM Degradation
R1 <- k_alpha * OM * L_O2
R2 <- k_alpha * OM * L_NO3                            * I_O2
R3 <- k_alpha * OM * L_MnO2                   * I_NO3 * I_O2
R4 <- k_alpha * OM * L_FeOH3         * I_MnO2 * I_NO3 * I_O2
R5 <- k_alpha * OM * L_SO4 * I_FeOH3 * I_MnO2 * I_NO3 * I_O2
R6 <- k_alpha * OM * I_SO4 * I_FeOH3 * I_MnO2 * I_NO3 * I_O2
R1b <- k_beta * OM_beta * L_O2
R2b <- k_beta * OM_beta * L_NO3                            * I_O2
R3b <- k_beta * OM_beta * L_MnO2                   * I_NO3 * I_O2
R4b <- k_beta * OM_beta * L_FeOH3         * I_MnO2 * I_NO3 * I_O2
R5b <- k_beta * OM_beta * L_SO4 * I_FeOH3 * I_MnO2 * I_NO3 * I_O2
R6b <- k_beta * OM_beta * I_SO4 * I_FeOH3 * I_MnO2 * I_NO3 * I_O2
## Siderite: R7 = precipitation, R8 = dissolution
if (precipitation & solve_equilibrium) {
omega_siderite <- (Fe2 * CO3) / Ksp_siderite
} else if (precipitation) {
omega_siderite <- (Fe2 * (DIC * f_CO3)) / Ksp_siderite
} else {
omega_siderite <- rep(1, N_grid)
}
R7 <- ifelse(omega_siderite > 1, k_precip_siderite * (omega_siderite - 1)^2, 0)
R8 <- ifelse(omega_siderite < 1, k_diss_siderite * FeCO3 * (1 - omega_siderite)^2, 0)
## FeOH3 / FeOH3~H3PO4-Reduction coupled to Sulphide Oxidation
R9 <- k_Fe_red_S_ox * FeOH3_tot * TOT_S2
## FeOH3 / FeOH3~H3PO4-Formation
R10 <- k_FeOH3_formation * O2 * Fe2
## H2S Oxidation
R11 <- k_H2S_oxidation * O2 * TOT_S2
## SO4-Reduction Coupeld to AOM
if (solve_equilibrium) {
R12 <- k_SO4_reduction * CH4 * SO4
} else {
R12 <- k_SO4_reduction * CH4 * (TOT_S6 * 1)
}
## FeS: R13 = precipitation, R14 = dissolution
if (precipitation & solve_equilibrium) {
omega_FeS <- (Fe2 * HS / H) / Ksp_FeS
} else if (precipitation) {
omega_FeS <- (Fe2 * (TOT_S2 * f_HS) / fixed_H) / Ksp_FeS
} else {
omega_FeS <- rep(1, N_grid)
}
R13 <- ifelse(omega_FeS > 1, k_precip_FeS * (omega_FeS - 1)^2, 0)
R14 <- ifelse(omega_FeS < 1, k_diss_FeS * FeS * (1 - omega_FeS)^2, 0)
## Vivianite: R15 = precipitation, R16 = dissolution
if (precipitation & solve_equilibrium) {
omega_Viv <- (Fe2 * PO4^(2/3)) / Ksp_Viv^(1/3)
} else if (precipitation) {
omega_Viv <- (Fe2 * (TOT_P * f_PO4)^(2/3)) / Ksp_Viv^(1/3)
} else {
omega_Viv <- rep(1, N_grid)
}
R15 <- ifelse(omega_Viv > 1, k_precip_Viv * (omega_Viv - 1)^2, 0)
R16 <- ifelse(omega_Viv < 1, k_diss_Viv * Viv * (1 - omega_Viv)^2, 0)
## CaCO3: R17 = precipitation, R18 = dissolution
if (precipitation & solve_equilibrium) {
omega_CaCO3 <- (Ca2 * CO3) / Ksp_CaCO3
} else if (precipitation) {
omega_CaCO3 <- (Ca2 * (DIC * f_CO3)) / Ksp_CaCO3
} else {
omega_CaCO3 <- rep(1, N_grid)
}
R17 <- ifelse(omega_CaCO3 > 1, k_precip_CaCO3 * (omega_CaCO3 - 1)^2, 0)
R18 <- ifelse(omega_CaCO3 < 1, k_diss_CaCO3 * CaCO3 * (1 - omega_CaCO3)^2, 0)
## Apatite: R19 = precipitation, R20 = dissolution
if (precipitation & solve_equilibrium) {
omega_Apatite <- (Ca2 * HPO4^(2/3)) / (Ksp_Apatite^(1/3) / H^(2/3))
} else if (precipitation) {
omega_Apatite <- (Ca2 * (TOT_P * f_HPO4)^(2/3)) / (Ksp_Apatite^(1/3) / fixed_H^(2/3))
} else {
omega_Apatite <- rep(1, N_grid)
}
R19 <- ifelse(omega_Apatite > 1, k_precip_Apatite * (omega_Apatite - 1)^2, 0)
R20 <- ifelse(omega_Apatite < 1, k_diss_Apatite * Apatite * (1 - omega_Apatite)^2, 0)
# change of species concentration due to reactions
## solutes step1: change of slow-reaction-species (srs), the ones for which
## the reactions are formulated, according to reaction stoichiometry
R.srs_O2    <- (- s2p * R1 - s2p * R1b # OM Degradation
- 1 * R10
- 2 * R11)
R.srs_CO2   <- (s2p * (R1 + R2 + R3 + R4 + R5 + 1/2 * R6)
+ s2p * (R1b + R2b + R3b + R4b + R5b + 1/2 * R6b)
- s2p * R7 + s2p * R8  # Siderite Precipitation / Dissolution
+ 1 * R12
- s2p * R17 + s2p * R18)
R.srs_NH3   <- (OM_b * s2p * (R1 + R2 + R3 + R4 + R5 + R6)
+ OM_b * s2p * (R1b + R2b + R3b + R4b + R5b + R6b))
R.srs_H3PO4 <- (s2p * ( OM_c * (R1 + R2 + R3 + R5 + R6) +
(OM_c + (1 - chi) * 4 * lambda) * R4 )
+ s2p * ( OM_c * (R1b + R2b + R3b + R5b + R6b) +
(OM_c + (1 - chi) * 4 * lambda) * R4b )
+ 2 * (1 - chi) * lambda * s2p * R9
- 4 * lambda * L_H3PO4 * R10
- 2 * s2p * R15 + 2 * s2p * R16
- 2 * s2p * R19 + 2 * s2p * R20)
R.srs_HNO3  <- - 4/5 * s2p * R2 - 4/5 * s2p * R2b
R.srs_N2    <- 2/5 * s2p * R2 + 2/5 * s2p * R2b
R.srs_FeOH2 <- (4 * s2p * R4 + 4 * s2p * R4b # OM degradation
- s2p * R7 + s2p * R8        # Siderite Precipitation / Dissolution
+ 2 * s2p * R9
- 4 * R10
- s2p * R13 + s2p * R14
- 3 * s2p * R15 + 3 * s2p * R16)
R.srs_MnOH2 <- 2 * s2p * R3 + 2 * s2p * R3b
R.srs_H2SO4 <- (- 1/2 * s2p * R5 - 1/2 * s2p * R5b
+ 1 * R11
- 1 * R12)
R.srs_H2S   <- (1/2 * s2p * R5 + 1/2 * s2p * R5b
- 1 * s2p * R9
- 1 * R11
+ 1 * R12
- s2p * R13 + s2p * R14)
R.srs_CH4   <- (1/2 * s2p * R6 + 1/2 * s2p * R6b
- 1 * R12)
R.srs_CaOH2 <- (- s2p * R17 + s2p * R18
- 3 * s2p * R19 + 3 * s2p * R20)
## solutes step2: change of tableau-components = model species
## translation of change of slow-reaction-species to change of
## tableau components using the translation table
## here the component-total "H" is already converted to alkalinity (*-1)
R.ALK   <- -1 * (- R.srs_NH3 + R.srs_H3PO4 + R.srs_HNO3 - 2 * R.srs_FeOH2
- 2 * R.srs_MnOH2 + 2 * R.srs_H2SO4 - 2 * R.srs_CaOH2)
R.DIC    <- R.srs_CO2
R.CH4    <- R.srs_CH4
R.TOT_P  <- R.srs_H3PO4
R.TOT_N5 <- R.srs_HNO3
R.TOT_N3 <- R.srs_NH3
R.TOT_S6 <- R.srs_H2SO4
R.TOT_S2 <- R.srs_H2S
R.O2     <- R.srs_O2
R.N2     <- R.srs_N2
R.Mn2    <- R.srs_MnOH2
R.Fe2    <- R.srs_FeOH2
R.Ca2    <- R.srs_CaOH2
## solids
R.OM <- - R1 - R2 - R3 - R4 - R5 - R6
R.OM_beta <- - R1b - R2b - R3b - R4b - R5b - R6b
R.MnO2 <- - 2 * R3 - 2 * R3b
R.FeOH3 <- (- 4 * chi * R4 - 4 * chi * R4b
- 2 * chi * R9
+ 4 * (1 - L_H3PO4) * p2s * R10)
R.FeOH3_P <- (- 4 * (1 - chi) * R4 - 4 * (1 - chi) * R4b
- 2 * (1 - chi) * R9
+ 4 * L_H3PO4 * p2s * R10)
R.FeCO3 <- R7 - R8
R.S0 <- R9
R.FeS <- R13 - R14
R.Viv <- R15 - R16
R.CaCO3 <- R17 - R18
R.Apatite <- R19 - R20
# total change in concentration of model species
dCdt.ALK     <- R.ALK + tran.ALK$dC
dCdt.DIC     <- R.DIC + tran.DIC$dC
dCdt.CH4     <- R.CH4 + tran.CH4$dC
dCdt.TOT_P   <- R.TOT_P + tran.TOT_P$dC
dCdt.TOT_N5  <- R.TOT_N5 + tran.TOT_N5$dC
dCdt.TOT_N3  <- R.TOT_N3 + tran.TOT_N3$dC
dCdt.N2      <- R.N2  + tran.N2$dC
dCdt.TOT_S6  <- R.TOT_S6 + tran.TOT_S6$dC
dCdt.TOT_S2  <- R.TOT_S2 + tran.TOT_S2$dC
dCdt.O2      <- R.O2 + tran.O2$dC
dCdt.Mn2     <- R.Mn2 + tran.Mn2$dC
dCdt.Fe2     <- R.Fe2 + tran.Fe2$dC
dCdt.Ca2     <- R.Ca2 + tran.Ca2$dC
dCdt.OM      <- R.OM + tran.OM$dC
dCdt.OM_beta <- R.OM_beta + tran.OM_beta$dC
dCdt.MnO2    <- R.MnO2 + tran.MnO2$dC
dCdt.FeOH3   <- R.FeOH3 + tran.FeOH3$dC
dCdt.FeOH3_P <- R.FeOH3_P + tran.FeOH3_P$dC
dCdt.FeCO3   <- R.FeCO3 + tran.FeCO3$dC
dCdt.S0      <- R.S0 + tran.S0$dC
dCdt.FeS     <- R.FeS + tran.FeS$dC
dCdt.Viv     <- R.Viv + tran.Viv$dC
dCdt.CaCO3   <- R.CaCO3 + tran.CaCO3$dC
dCdt.Apatite <- R.Apatite + tran.Apatite$dC
# characteristic time scales
# if dCdt.X = 0 -> timescale will be Inf
time_scales <- c(
ALK = ALK / dCdt.ALK,
DIC = DIC / dCdt.DIC,
CH4 = CH4 / dCdt.CH4,
TOT_P = TOT_P / dCdt.TOT_P,
TOT_N5 = TOT_N5 / dCdt.TOT_N5,
TOT_N3 = TOT_N3 / dCdt.TOT_N3,
N2 = N2 / dCdt.N2,
TOT_S6 = TOT_S6 / dCdt.TOT_S6,
TOT_S2 = TOT_S2 / dCdt.TOT_S2,
O2 = O2 / dCdt.O2,
Mn2 = Mn2 / dCdt.Mn2,
Fe2 = Fe2 / dCdt.Fe2,
Ca2 = Ca2 / dCdt.Ca2,
OM = OM / dCdt.OM,
OM_beta = OM_beta / dCdt.OM_beta,
MnO2 = MnO2 / dCdt.MnO2,
FeOH3 = FeOH3 / dCdt.FeOH3,
FeOH3_P = FeOH3_P / dCdt.FeOH3_P,
FeCO3 = FeCO3 / dCdt.FeCO3,
S0 = S0 / dCdt.S0,
FeS = FeS / dCdt.FeS,
Viv = Viv / dCdt.Viv,
CaCO3 = CaCO3 / dCdt.CaCO3,
Apatite = Apatite / dCdt.Apatite
)
# but we need to take the absolute value to find the correct minimum
time_scales <- abs(time_scales)
# set NaN values to a number (???)
time_scales[is.na(time_scales)] <- 100
# set 0 to a small number
# time_scales[time_scales == 0] <- 1e-10
return(
list(
c(
dCdt.ALK = dCdt.ALK,
dCdt.DIC = dCdt.DIC,
dCdt.TOT_P = dCdt.TOT_P,
dCdt.TOT_N5 = dCdt.TOT_N5,
dCdt.TOT_N3 = dCdt.TOT_N3,
dCdt.TOT_S6 = dCdt.TOT_S6,
dCdt.TOT_S2 = dCdt.TOT_S2,
dCdt.CH4 = dCdt.CH4,
dCdt.O2 = dCdt.O2,
dCdt.N2 = dCdt.N2,
dCdt.Mn2 = dCdt.Mn2,
dCdt.Fe2 = dCdt.Fe2,
dCdt.Ca2 = dCdt.Ca2,
dCdt.MnO2 = dCdt.MnO2,
dCdt.OM = dCdt.OM,
dCdt.OM_beta = dCdt.OM_beta,
dCdt.FeOH3 = dCdt.FeOH3,
dCdt.FeOH3_P = dCdt.FeOH3_P,
dCdt.FeCO3 = dCdt.FeCO3,
dCdt.S0 = dCdt.S0,
dCdt.FeS = dCdt.FeS,
dCdt.Viv = dCdt.Viv,
dCdt.CaCO3 = dCdt.CaCO3,
dCdt.Apatite = dCdt.Apatite
),
transport = list(
tran.ALK = tran.ALK,
tran.DIC = tran.DIC,
tran.TOT_P = tran.TOT_P,
tran.TOT_N5 = tran.TOT_N5,
tran.TOT_N3 = tran.TOT_N3,
tran.TOT_S6 = tran.TOT_S6,
tran.TOT_S2 = tran.TOT_S2,
tran.CH4 = tran.CH4,
tran.O2 = tran.O2,
tran.N2 = tran.N2,
tran.Mn2 = tran.Mn2,
tran.Fe2 = tran.Fe2,
tran.Ca2 = tran.Ca2,
tran.MnO2 = tran.MnO2,
tran.OM = tran.OM,
tran.OM_beta = tran.OM_beta,
tran.FeOH3 = tran.FeOH3,
tran.FeOH3_P = tran.FeOH3_P,
tran.FeCO3 = tran.FeCO3,
tran.S0 = tran.S0,
tran.FeS = tran.FeS,
tran.Viv = tran.Viv,
tran.CaCO3 = tran.CaCO3,
tran.Apatite = tran.Apatite
),
sumR = list(
R.ALK     = R.ALK * grid.por$mid,
R.DIC     = R.DIC * grid.por$mid,
R.TOT_P   = R.TOT_P * grid.por$mid,
R.TOT_N5  = R.TOT_N5 * grid.por$mid,
R.TOT_N3  = R.TOT_N3 * grid.por$mid,
R.TOT_S6  = R.TOT_S6 * grid.por$mid,
R.TOT_S2  = R.TOT_S2 * grid.por$mid,
R.CH4     = R.CH4 * grid.por$mid,
R.O2      = R.O2 * grid.por$mid,
R.N2      = R.N2 * grid.por$mid,
R.Mn2     = R.Mn2 * grid.por$mid,
R.Fe2     = R.Fe2 * grid.por$mid,
R.Ca2     = R.Ca2 * grid.por$mid,
R.MnO2    = R.MnO2 * grid.svf$mid,
R.OM      = R.OM * grid.svf$mid,
R.OM_beta = R.OM_beta * grid.svf$mid,
R.FeOH3   = R.FeOH3 * grid.svf$mid,
R.FeOH3_P = R.FeOH3_P * grid.svf$mid,
R.FeCO3   = R.FeCO3 * grid.svf$mid,
R.S0      = R.S0 * grid.svf$mid,
R.FeS     = R.FeS * grid.svf$mid,
R.Viv     = R.Viv * grid.svf$mid,
R.CaCO3   = R.CaCO3 * grid.svf$mid,
R.Apatite = R.Apatite * grid.svf$mid
),
rates = list(
R1  = R1  * grid.svf$mid,
R2  = R2  * grid.svf$mid,
R3  = R3  * grid.svf$mid,
R4  = R4  * grid.svf$mid,
R5  = R5  * grid.svf$mid,
R6  = R6  * grid.svf$mid,
R1b  = R1b  * grid.svf$mid,
R2b  = R2b  * grid.svf$mid,
R3b  = R3b  * grid.svf$mid,
R4b  = R4b  * grid.svf$mid,
R5b  = R5b  * grid.svf$mid,
R6b  = R6b  * grid.svf$mid,
R7  = R7  * grid.svf$mid,
R8  = R8  * grid.svf$mid,
R9  = R9  * grid.svf$mid,
R10 = R10 * grid.svf$mid,
R11 = R11 * grid.por$mid,
R12 = R12 * grid.por$mid,
R13 = R13 * grid.svf$mid,
R14 = R14 * grid.svf$mid,
R15 = R15 * grid.svf$mid,
R16 = R16 * grid.svf$mid,
R17 = R17 * grid.svf$mid,
R18 = R18 * grid.svf$mid,
R19 = R19 * grid.svf$mid,
R20 = R20 * grid.svf$mid
),
omega = list(
siderite = omega_siderite,
FeS = omega_FeS,
Viv = omega_Viv,
CaCO3 = omega_CaCO3,
Apatite = omega_Apatite
),
solute_equilibrium = solute_equilibrium,
time_scales = time_scales
)
)
})
}
saveRDS(tableau, "/home/robert/Temp/Temp_R/tableau.rds")
saveRDS(logK, "/home/robert/Temp/Temp_R/logK.rds")
N_grid
saveRDS(tableau_species, "/home/robert/Temp/Temp_R/tableau_species.rds")
library(microbenchmark)
