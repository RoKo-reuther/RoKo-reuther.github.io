{"title":"Fe Treatment Model","markdown":{"yaml":{"title":"Fe Treatment Model","execute":{"echo":false,"eval":true},"bibliography":"FeTreatment.bib"},"headingText":"Concept","containsRefs":false,"markdown":"\n\n```{r load libraries}\n#| message: false\n\nrequire(readODS)\nrequire(marelac)\nrequire(ReacTran)\nrequire(microbenchmark)\nrequire(plotly)\n```\n\n\n### Reactions\n\nReactions affect solute and solid model species differently.\n\nThe solid model species are the same occurring in the chemical reaction equations.\nTherefore they are affected directly according to the reaction stoichiometry.\n\nSolute model species are either component-totals (e.g. DIC, TOT_P, ...) to be speciated later or species on their own (e.g. O2, CH4).\nThe effect of reactions on solute species is first formulated for the species occurring in the chemical reaction equations according to the reaction stoichiometry.\nIn a second step this changes are translated to changes of the component-totals / model species using a translation table.\n\n### Transport\n\nFor solutes the (probably) dominant species of a component-total governs the diffusion coefficient (cf code-block \"Diffusion Coefficients\").\nThe transport of solids is not affected by species properties.\n\n\n## Reactions Describing OM Decomposition\n\n### OM Composition\n\n$\\ce{(CH2O)_a (NH3)_b (H3PO4)_c}$\n\n- $a = 1$\n- $b = 16/106$\n- $c = 1/106$\n\n\n### Rate Constants\n\n- $k_{\\alpha} = 0.05 - 1.62 \\: yr^{-1}$    [@moodley2005; @tromp1995global]\n- $k_{\\beta} = 0.025 - 0.0086 \\: yr^{-1}$  [@tromp1995global]\n\n\n### Limitation (L) and Inihibition (I) Terms\n\n#### O2\n\n$L_{\\ce{O2}} = \\frac{[\\ce{O2}]}{K_{\\ce{O2}} + [\\ce{O2}]}$\n\n$I_{\\ce{O2}} = \\frac{K_{\\ce{O2}}}{K_{\\ce{O2}} + [\\ce{O2}]}$\n\nwith $K_{O2} = 0.001 - 0.03 \\: mol \\: m^{-3}_{pw}$ [@wang1996multicomponent]\n\n#### NO3-\n\n$L_{\\ce{NO3^-}} = \\frac{[\\ce{NO3^-}]}{K_{\\ce{NO3-}} + [\\ce{NO3^-}]}$\n\n$I_{\\ce{NO3^-}} = \\frac{K_{\\ce{NO3^-}}}{K_{\\ce{NO3^-}} + [\\ce{NO3^-}]}$\n\nwith $K_{NO3-} = 0.004 - 0.08  \\: mol \\: m^{-3}_{pw}$ [@wang1996multicomponent]\n\n#### MnO2\n\n$L_{\\ce{MnO2^{\\alpha}}} = \\frac{[\\ce{MnO2^{\\alpha}}]}{K_{\\ce{MnO2}} + [\\ce{MnO2^{\\alpha}}]}$\n \n$I_{\\ce{MnO2^{\\alpha}}} = \\frac{K_{\\ce{MnO2}}}{K_{\\ce{MnO2}} + [\\ce{MnO2^{\\alpha}}]}$\n\nwith $K_{\\ce{MnO2^{\\alpha}}} = \\{0.004 - 0.032\\} \\: mol \\: {kg}^{-1} \\cdot \\rho_{dry}$  [@wang1996multicomponent]\n\n#### Fe(OH)3\n\n$L_{\\ce{Fe(OH)3_{; tot}^\\alpha}} = \\frac{[\\ce{Fe(OH)3_{; tot}^\\alpha}]}{K_{\\ce{Fe(OH)3}} + [\\ce{Fe(OH)3_{; tot}^\\alpha}]}$\n\n$I_{\\ce{Fe(OH)3^\\alpha}} = \\frac{K_{\\ce{Fe(OH)3}}}{K_{\\ce{Fe(OH)3}} + [\\ce{Fe(OH)3_{; tot}^\\alpha}]}$\n\nwith $K_{\\ce{FeOH3}} = \\{0.065 - 0.1\\} \\: mol \\: {kg}^{-1} \\cdot \\rho_{dry}$ [@wang1996multicomponent]\n\n#### SO42-\n\n$L_{\\ce{SO4^{2-}}} = \\frac{[\\ce{SO4^{2-}}]}{K_{\\ce{SO4^{2-}}} + [\\ce{SO4^{2-}}]}$\n\n$I_{\\ce{SO4^{2-}}} = \\frac{K_{\\ce{SO4^{2-}}}}{K_{\\ce{SO4^{2-}}} + [\\ce{SO4^{2-}}]}$\n\nwith $K_{SO42-} = 0.0016  \\: mol \\: {m^{-3}_{pw}}$ [@wang1996multicomponent]\n\n#### H3PO4\n\n$L_{\\ce{H3PO4}} = \\frac{[\\ce{H3PO4}]}{K_{\\ce{H3PO4}} + [\\ce{H3PO4}]}$\n\nwith $K_{\\ce{H3PO4}} = 10^{-5} \\: mol \\: m^{-3}_{pw}$ (Reinier)\n\n> formulated for lump sum\n\n### FeOH3 Fractions\n\n$\\ce{Fe(OH)3_{; tot}^\\alpha} = \\ce{Fe(OH)3^{\\alpha}} + \\ce{Fe(OH)3^\\alpha(H3PO4)_{\\lambda}}$ with $\\lambda = 0.6$\n\n$\\chi = \\frac{[\\ce{Fe(OH)3^{\\alpha}}]}{[\\ce{Fe(OH)3_{; tot}^\\alpha}]}$\n\n\n### Reactions\n\n#### OM + O2 (R1)\n\n$\\ce{OM^{\\alpha, \\beta} + O2 -> CO2 + b NH3 + c H3PO4 + H2O}$\n\n$R = k_{\\alpha, \\beta} \\: OM^{\\alpha, \\beta} \\: L_{\\ce{O2}}$\n\n\n#### OM + HNO3 (R2)\n\n$\\ce{OM^{\\alpha, \\beta} + 4/5 HNO3 -> CO2 + b NH3 + c H3PO4 + 2/5 N2 + 7/5 H2O}$\n\n$R = k_{\\alpha, \\beta} \\: OM^{\\alpha, \\beta} \\: L_{\\ce{NO3-}} \\: I_{\\ce{O2}}$\n\n\n#### OM + MnO2 (R3)\n\n$\\ce{OM^{\\alpha, \\beta} + 2 MnO2 + H2O -> CO2 + b NH3 + c H3PO4 + 2 Mn(OH)2}$\n\n$R = k_{\\alpha, \\beta} \\: OM^{\\alpha, \\beta} \\: L_{\\ce{MnO2}^\\alpha} \\: I_{\\ce{NO3^-}} \\: I_{\\ce{O2}}$\n\n\n#### OM + FeOH3 / FeOH3~H3PO4 (R4)\n\n$\\ce{OM^{\\alpha, \\beta} + 4 (\\chi Fe(OH)3^{\\alpha} + (1 - \\chi) Fe(OH)3^\\alpha(H3PO4)_{\\lambda} ) -> CO2 + b NH3 + (c + (1- \\chi) 4 \\lambda) H3PO4 + 4 Fe(OH)2 + 3 H2O}$\n\n$R = k_{\\alpha, \\beta} \\: OM^{\\alpha, \\beta} \\: L_{\\ce{Fe(OH)3_{; tot}^\\alpha}} \\: I_{\\ce{MnO2^{\\alpha}}} \\: I_{\\ce{NO3^-}} \\: I_{\\ce{O2}}$\n\n\n#### OM + H2SO4 (R5)\n\n$\\ce{OM^{\\alpha, \\beta} + 1/2 H2SO4 -> CO2 + b NH3 + c H3PO4 + 1/2 H2S + H2O}$\n\n$R = k_{\\alpha, \\beta} \\: OM^{\\alpha, \\beta} \\: L_{\\ce{SO4^{2-}}} \\: I_{\\ce{Fe(OH)3^\\alpha}} \\: I_{\\ce{MnO2^{\\alpha}}} \\: I_{\\ce{NO3^-}} \\: I_{\\ce{O2}}$\n\n\n#### Methanogenesis (R6)\n\n$\\ce{OM^{\\alpha, \\beta} -> 1/2 CO2 + b NH3 + c H3PO4 + 1/2 CH4}$\n\n$R = k_{\\alpha, \\beta} \\: OM^{\\alpha, \\beta} \\: I_{\\ce{SO4^{2-}}} \\: I_{\\ce{Fe(OH)3^\\alpha}} \\: I_{\\ce{MnO2^{\\alpha}}} \\: I_{\\ce{NO3^-}} \\: I_{\\ce{O2}}$\n\n\n## Precipitation Reactions\n\n### Siderite\n\nIn general:\n\n$\\ce{FeCO3 <-> Fe^{2+} + CO3^{2-}}$\n\nIn our model:\n\n$\\ce{FeCO3 + 2 H2O <-> Fe(OH)2 + H2CO3}$\n\nPrecipitation and Dissolution are split in two reactions from which only one is active at a time, depending on the saturation state $\\Omega$.\n\n$\\Omega = \\frac{\\ce{[Fe^{2+}]} \\cdot \\ce{[CO3^{2-}]}}{K_{sp; siderite}} \\quad$\nwith $\\quad K_{sp; siderite} = 10^{-10.4} \\; mol^2 \\; m^{-6}$\n\nIf $\\: \\Omega > 1$:\n\n- $R_{precipitation} = k_{precip} \\cdot (\\Omega - 1) \\quad$\nwith $\\quad k_{precip} \\approx 1 \\times 10^{-3} \\; mol \\; {m_{pw}}^{-3} \\; yr^{-1}$\n- $R_{dissolution} = 0$\n\nIf $\\: \\Omega < 1$:\n\n- $R_{precipitation} = 0$\n- $R_{dissolution} = - k_{diss} \\cdot \\ce{[FeCO3]} \\cdot (\\Omega - 1) \\quad$\nwith $\\quad k_{diss} \\approx 1 \\times 10^{-2} \\; yr^{-1}$\n\n\n## Equilibrium Reactions described via Tableau\n\n```{r read tableau}\nexcel <- read_fods(\"tableau.fods\", sheet = \"morel_tableau\")\n\ntableau_print <- as.data.frame(excel)\n\nexcel[is.na(excel)] <- 0\n\ncolumn_H2O  <- 2\ncolumn_logK <- 10\ncolumn_species_names <- 1\nrow_H2O     <- 1\n\ntableau <- as.matrix(excel[-row_H2O,-c(column_H2O, column_logK, column_species_names)])\n\nlogK <- as.vector(unlist(excel[-row_H2O, column_logK]))\n\ntableau_species <- unlist(excel[,column_species_names])[-1]\nnames(tableau_species) <- NULL\n\nmodel_species <- c(\"ALK\", \"DIC\", \"TOT_P\", \"TOT_N5\", \"TOT_N3\", \"TOT_S6\", \"TOT_S2\", \"CH4\", \"O2\", \"N2\", \"Mn2\", \"Fe2\", \"MnO2\", \"OM\", \"FeOH3\", \"FeOH3_P\", \"FeCO3\")\n\n#excel <- read_xlsx(\"tableau.xlsx\", sheet = \"translation_table\")\n#excel[is.na(excel)] <- 0\n\nrm(column_H2O, column_logK, column_species_names, row_H2O, excel)\n```\n\nThe Tableau is used to calculate equilibrium speciation of solute species after model run.\nFast equilibrium reactions are neglected during model runtime (so far).\n\n```{r print tableau}\noptions(knitr.kable.NA = '')\nknitr::kable(tableau_print)\n```\n\n\n## Functions\n\n### Solve Tableau\n\n```{r def solve_tableau}\n#| echo: true\n#| code-fold: true\n\nsolve_tableau <- function(component_total, tableau, logK, N_grid) {\n  \n  # load shared object\n  dyn.load(\"solve_tableau.so\")\n\n  return(.Fortran(\"solve_tableau\",\n                  component_total = as.double(component_total),\n                  tableau         = matrix(as.double(tableau), ncol = ncol(tableau)),\n                  logK            = as.double(logK),\n                  N_components    = as.integer(ncol(tableau)),\n                  N_species       = as.integer(nrow(tableau)),\n                  N_grid          = as.integer(N_grid),\n                  iter_pcfm       = rep(as.integer(0), N_grid),\n                  iter_newton     = rep(as.integer(0), N_grid),\n                  info_newton     = rep(as.integer(0), N_grid),\n                  difference      = matrix(as.double(0), ncol = ncol(tableau), nrow = N_grid),\n                  species_conc    = matrix(as.double(0), ncol = nrow(tableau), nrow = N_grid),\n                  success         = rep(as.integer(0), N_grid)\n                  )\n  )\n  \n}\n```\n\n### Plot steady.1D results\n\n```{r def plot functions 1}\n#| echo: true\n#| code-fold: true\n\nplot_std_profiles <- function(std) {\n  \n  plot(std, xyswap = TRUE, xlab = \"mol/m3_phase\", ylab = \"depth (m)\",\n       grid = grid$x.mid,\n       which = model_species,\n       lwd = 2,\n       cex = 1.5,\n       mfrow = c(1,1)\n  )\n}\n\nplot_std_rates <- function(std, reactions, title = \"\") {\n  \n  # rcols <- viridis::viridis(length(std$rates))\n  # \n  # matplot(y = grid$x.mid,\n  #         x = as.data.frame(std$rates),\n  #         type = \"l\", lwd=2, lty=1,\n  #         ylim = c(length,0), \n  #         col = rcols,\n  #         ylab=\"depth (m)\", \n  #         xlab=\"reaction rate (mol/(m3_bulk yr))\")\n  # \n  # legend(\n  #   x = \"bottomright\",\n  #   legend = names(std$rates),\n  #   lty = 1,\n  #   col = rcols <- viridis::viridis(length(std$rates)),\n  #   lwd = 2\n  # )\n  \n  data <- as.data.frame(std$rates)\n  data$depth <- grid$x.mid\n  \n  fig <- plot_ly(data, type = 'scatter', mode = 'lines', line = list(width = 3))\n  for (rate in reactions) {\n    fig <- fig %>% add_trace(y = ~depth, x = std$rates[[rate]], name = rate)\n  }\n  fig <- fig %>% layout(\n    title = title,\n    xaxis = list(title = \"reaction rate (mol/(m3_bulk yr))\"),\n    yaxis = list(title = \"depth (m)\", range = c(length,0)),\n    font = list(size = 16)\n  )\n    \n  fig\n}\n\nplot_omega <- function(std) {\n  plot(\n    x = std$omega_siderite,\n    y = grid$x.mid,\n    ylim = c(max(grid$x.int), min(grid$x.int)),\n    type = \"l\",\n    lwd = 2,\n    xlab = \"omega siderite\",\n    ylab = \"depth (m)\",\n    log = \"x\"\n  )\n}\n```\n\n### Plot Runge-Kutta results\n\n```{r def plot functions 2}\n#| echo: true\n#| code-fold: true\n\nplot_std_conc_evolution <- function(std_matrix_list, selection, N_lines, grid) {\n  \n  data <- std_matrix_list[[selection]]\n  \n  # number of available timesteps\n  available_timesteps <- ncol(data)\n  \n  # selection of N_lines timesteps\n  selected_timesteps <- floor(seq.int(1, available_timesteps, length.out = N_lines))\n  \n  # reduce data\n  data <- data[,selected_timesteps]\n  \n  # plot\n  matplot(y = grid$x.mid,\n          x = data,\n          type = \"l\",\n          ylim = c(max(grid$x.mid), min(grid$x.mid)),\n          xlab = \"concentration (mol/m^3_phase)\",\n          ylab = \"depth (m)\",\n          main = selection)\n}\n\nplot_std_rate_evolution <- function(std, selection, N_lines) {\n  \n  data <- std$rates_split[[selection]]\n  \n  # number of available depths\n  available_depths <- nrow(data)\n  \n  # selection of N_lines depths\n  selected_depths <- floor(seq.int(1, available_depths, length.out = N_lines))\n  \n  # reduce data\n  data <- data[selected_depths,]\n  \n  # plot\n  matplot(x = std$times,\n          y = t(data),\n          type = \"l\",\n          ylab = \"rate (mol/(m^3_phase * yr))\",\n          xlab = \"time (a)\",\n          main = selection)\n}\n```\n\n\n## Model Setup\n\n### Grid\n```{r grid setup}\n#| echo: true\n\nlength   <- 0.1 # (m)\nN_grid   <- 400 # (-)\n\ngrid     <- setup.grid.1D(L = length, N = N_grid, dx.1=0.0005)\n```\n\n### Porosity / Solid Volume Fraction\n```{r porosity}\n#| echo: true\n\nporFun.L  <- function(x, por.SWI, por.deep, porcoef) {\n  return( por.deep + (por.SWI-por.deep) * exp(-x*porcoef) ) \n}\n\nporFun.S  <- function(x, por.SWI, por.deep, porcoef) {\n  return( 1 - porFun.L(x, por.SWI, por.deep, porcoef) ) \n}\n\npor.swi  <- 0.8\npor.deep <- 0.8\n\ngrid.por <- setup.prop.1D(func = porFun.L, grid = grid, por.SWI = por.swi,\n                           por.deep=por.deep, porcoef=100)\n\ngrid.svf  <- setup.prop.1D(func = porFun.S, grid = grid, por.SWI = por.swi,\n                           por.deep=por.deep, porcoef=100)\n\nconversion_factors <- list(\n  s2p = ((grid.svf$mid) / grid.por$mid), # conversion of x/m3_svf to x/m3_pw\n  p2s = (grid.por$mid / (grid.svf$mid))  # conversion of x/m3_pw  to x/m3_svf\n)\n```\n\n### Advective Velocities\n```{r advection}\n#| echo: true\n\n# sedimentation velocity\nv <- 5e-6*365  # (m/yr)\n\n# returns pore water advective velocities (u) and solid phase advective velocities (v)\nadvective_velocities <- setup.compaction.1D(\n    v.0 = v,\n    por.0 = por.swi,\n    por.inf = por.deep,\n    por.grid = grid.por\n)\n```\n\n### Diffusion Coefficients\n```{r diffusion}\n#| echo: true\n\nsalinity    <- 35 # (psu)\ntemperature <- 20 # (dgC)\npressure    <- 1.013253 # (bar)\nDb          <- 5e-4 # mixing rate of the sediment; Bioturbation coefficient (m2/y)\nDb_mid      <- 0.5  # middle of Db decreasing zone (m)\nDb_width    <- 0.01 # width of Db decreasing zone (m)\n\ngrid.Db <- setup.prop.1D(\n    func = p.sig,\n    y.0 = Db,\n    y.inf = 0,\n    x.L = Db_mid,\n    x.att = Db_width,\n    grid = grid\n)\n\ntortuosity_squared <- 1-log(grid.por$int^2)\n\ns2yr <- 3600*24*365.25\n\ndiffcoeff_species <- c(\"HCO3\", \"HCO3\", \"CH4\", \"H2PO4\", \"NO3\", \"NH4\", \"SO4\",\n                       \"O2\", \"Mn\", \"Fe\", \"H2S\", \"N2\")\n\ndiffcoeffs <- diffcoeff(\n  species = diffcoeff_species,\n  S = salinity,\n  t = temperature,\n  P = pressure\n)\n\ndiffusion_coefficients <- list(\n  \n  # solute: molar diffusion coefficient / tortuosity**2 + bioturbation coefficient\n  # solid: bioturbation coefficient\n  \n  ALK   = diffcoeffs[[1]]  * s2yr / tortuosity_squared + grid.Db$int,\n  DIC   = diffcoeffs[[2]]  * s2yr / tortuosity_squared + grid.Db$int,\n  CH4   = diffcoeffs[[3]]  * s2yr / tortuosity_squared + grid.Db$int,\n  H2PO4 = diffcoeffs[[4]]  * s2yr / tortuosity_squared + grid.Db$int,\n  NO3   = diffcoeffs[[5]]  * s2yr / tortuosity_squared + grid.Db$int,\n  NH4   = diffcoeffs[[6]]  * s2yr / tortuosity_squared + grid.Db$int,\n  SO4   = diffcoeffs[[7]]  * s2yr / tortuosity_squared + grid.Db$int,\n  O2    = diffcoeffs[[8]]  * s2yr / tortuosity_squared + grid.Db$int,\n  Mn2   = diffcoeffs[[9]]  * s2yr / tortuosity_squared + grid.Db$int,\n  Fe2   = diffcoeffs[[10]] * s2yr / tortuosity_squared + grid.Db$int,\n  H2S   = diffcoeffs[[11]] * s2yr / tortuosity_squared + grid.Db$int,\n  N2    = diffcoeffs[[12]] * s2yr / tortuosity_squared + grid.Db$int,\n  solid = grid.Db$int\n    \n)\n```\n\n```{r plot por, Db, ...}\n#| layout-ncol: 4\n#| fig.height: 3.5\n#| fig.width: 3.5\n\nplot(x=grid.por$mid, y=grid$x.mid, type=\"l\",\n     ylim=c(length,0), ylab=\"depth (m)\", xlab=\"porosity (m3_liq/m3_bulk)\")\nplot(x=diffusion_coefficients$solid, y=grid$x.int, type=\"l\",\n     ylim=c(length,0), ylab=\"depth (m)\", xlab=\"D_solid (m2/yr)\")\nplot(x=diffusion_coefficients$DIC, y=grid$x.int, type=\"l\",\n     ylim=c(length,0), ylab=\"depth (m)\", xlab=\"D_DIC (m2/yr)\")\nplot(x=diffusion_coefficients$O2, y=grid$x.int, type=\"l\",\n     ylim=c(length,0), ylab=\"depth (m)\", xlab=\"D_O2 (m2/yr)\")\n```\n\n### Boundary Conditions\n```{r boundary conditions}\n#| echo: true\n\nboundary_conditions <- c(\n  # Alkalinity in eq/m3?\n  ALK_up   = 2,\n  # Solutes: concentrations in mol m-3\n  DIC_up   = 2,\n  CH4_up   = 0,\n  H2PO4_up = 0,\n  NO3_up   = 0.2,\n  NH4_up   = 0.001,\n  SO4_up   = 28,\n  O2_up    = 0.3,\n  N2_up    = 0, # <<<\n  Mn2_up   = 0,\n  Fe2_up   = 0,\n  H2S_up   = 0,\n  # Solids: flux in mol m-2 yr-1\n  OM_up      = 0.25 * 365,\n  MnO2_up    = 10,\n  FeOH3_up   = 10,\n  FeOH3_P_up = 10,\n  FeCO3_up   = 0\n)\n```\n\n### Reaction Parameters\n```{r reaction parameters}\n#| echo: true\n\ndry_density_sediment <- 2700 # kg/m³\n\nreaction_parameter <- c(\n  # OM degradation\n  ## reaction constants\n  k_alpha = 0.005 * 365, # yr-1\n  k_beta  = 0,#0.025,    # yr-1\n  ## composition of OM\n  OM_a    = 1,\n  OM_b    = 16 / 106,\n  OM_c    = 1 / 106,\n  ## limitation / inhibition constants (mol m-3)\n  K_O2    = 0.001,\n  K_NO3   = 0.001,\n  K_MnO2  = 0.001 * dry_density_sediment,#0.004 * dry_density_sediment,\n  K_FeOH3 = 0.001 * dry_density_sediment,#0.065 * dry_density_sediment,\n  K_SO4   = 0.1,\n  K_H3PO4 = 10^-5,\n  ## ratio of Fe to P in Fe(OH)_3(H3PO4)_lambda\n  lambda  = 0.6,\n  # Siderite Precipitation / Dissolution\n  k_precip_siderite = 1.8e2, # mol m-3_sf yr-1\n  k_diss_siderite = 2.5e-1,  # yr-1\n  Ksp_siderite = 10**(-10.4) * 1000**2\n)\n```\n\n### Collect Inputs\n```{r collect inputs}\n#| echo: true\n\nparameter <- c(\n  N_grid = N_grid,\n  conversion_factors,\n  boundary_conditions,\n  reaction_parameter,\n  logK = logK,\n  tableau = tableau\n)\n\nN_species <- length(model_species)\n```\n\n### Model Function\n```{r model function}\n#| echo: true\n#| code-fold: show\n\nmodel <- function (t, state, parms, diff_coeffs, adv_vel, solve_equilibrium, precipitation){\n  \n  with (as.list(parms),{\n    \n    # assign state variables\n    i <- 1\n    # state variables for solutes are total amounts,\n    # but implicitly concentrations (total_amount/m³_pw)\n    ALK     <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1 # -TOT_H\n    DIC     <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1 # TOT_H2CO3\n    TOT_P   <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1\n    TOT_N5  <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1\n    TOT_N3  <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1\n    TOT_S6  <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1\n    TOT_S2  <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1\n    CH4     <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1\n    O2      <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1\n    N2      <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1\n    Mn2     <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1\n    Fe2     <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1\n    # state variables for solids are tableau-species concentrations (mol/m3_svf)\n    MnO2    <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1\n    OM      <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1\n    FeOH3   <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1\n    FeOH3_P <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1\n    FeCO3   <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1\n    \n    \n    # transport terms\n    tran.ALK     <- tran.1D(C = ALK, C.up = ALK_up, D = diff_coeffs$ALK, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n    \n    tran.DIC     <- tran.1D(C = DIC, C.up = DIC_up, D = diff_coeffs$DIC, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n    \n    tran.TOT_P   <- tran.1D(C = TOT_P, C.up = H2PO4_up, D = diff_coeffs$H2PO4, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n    \n    tran.TOT_N5  <- tran.1D(C = TOT_N5, C.up = NO3_up, D = diff_coeffs$NO3, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n    \n    tran.TOT_N3  <- tran.1D(C = TOT_N3, C.up = NH4_up, D = diff_coeffs$NH4, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n    \n    tran.TOT_S6  <- tran.1D(C = TOT_S6, C.up = SO4_up, D = diff_coeffs$SO4, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n    \n    tran.TOT_S2  <- tran.1D(C = TOT_S2, C.up = H2S_up, D = diff_coeffs$H2S, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n    \n    tran.CH4     <- tran.1D(C = CH4, C.up = CH4_up, D = diff_coeffs$CH4, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n\n    tran.O2      <- tran.1D(C = O2, C.up = O2_up, D = diff_coeffs$O2, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n    \n    tran.N2      <- tran.1D(C = N2, C.up = N2_up, D = diff_coeffs$N2, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n    \n    tran.Mn2     <- tran.1D(C = Mn2, C.up = Mn2_up, D = diff_coeffs$Mn2, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n    \n    tran.Fe2     <- tran.1D(C = Fe2, C.up = Fe2_up, D = diff_coeffs$Fe2, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n    \n    tran.MnO2    <- tran.1D(C = MnO2, flux.up = MnO2_up, D = diff_coeffs$solid, \n                            v = adv_vel$v, VF = grid.svf, dx = grid)\n    \n    tran.OM      <- tran.1D(C = OM, flux.up = OM_up, D = diff_coeffs$solid, \n                            v = adv_vel$v, VF = grid.svf, dx = grid)\n    \n    tran.FeOH3   <- tran.1D(C = FeOH3, flux.up = FeOH3_up, D = diff_coeffs$solid, \n                            v = adv_vel$v, VF = grid.svf, dx = grid)\n    \n    tran.FeOH3_P <- tran.1D(C = FeOH3_P, flux.up = FeOH3_P_up, D = diff_coeffs$solid, \n                            v = adv_vel$v, VF = grid.svf, dx = grid)\n    \n    tran.FeCO3   <- tran.1D(C = FeCO3, flux.up = FeCO3_up, D = diff_coeffs$solid, \n                            v = adv_vel$v, VF = grid.svf, dx = grid)\n    \n    \n    # calculate solute equilibrium species (solve the tableau)\n    if (solve_equilibrium) {\n      # 1) grep the solute total components; here we need TOT_H = - ALK\n      solute_totals <- c(-ALK, DIC, TOT_P, TOT_N5, TOT_N3, TOT_S6, TOT_S2)\n      # 2) solve tableau\n      solute_equilibrium  <- solve_tableau(solute_totals, tableau, logK, N_grid)\n      # 3) assign results\n      pH    <- -log10(solute_equilibrium$species_conc[,1] * 10^-3)\n      OH    <- solute_equilibrium$species_conc[,2]\n      H2CO3 <- solute_equilibrium$species_conc[,3]\n      HCO3  <- solute_equilibrium$species_conc[,4]\n      CO3   <- solute_equilibrium$species_conc[,5]\n      H3PO4 <- solute_equilibrium$species_conc[,6]\n      HPO4  <- solute_equilibrium$species_conc[,7]\n      PO4   <- solute_equilibrium$species_conc[,8]\n      HNO3  <- solute_equilibrium$species_conc[,9]\n      NO3   <- solute_equilibrium$species_conc[,10]\n      NH4   <- solute_equilibrium$species_conc[,11]\n      NH3   <- solute_equilibrium$species_conc[,12]\n      H2SO4 <- solute_equilibrium$species_conc[,13]\n      HSO4  <- solute_equilibrium$species_conc[,14]\n      SO4   <- solute_equilibrium$species_conc[,15]\n      H2S   <- solute_equilibrium$species_conc[,16]\n      HS    <- solute_equilibrium$species_conc[,17]\n      S2    <- solute_equilibrium$species_conc[,18]\n    } else {\n      solute_equilibrium <- NA\n    }\n    \n    \n    # Precipitation Reactions\n    if (precipitation & solve_equilibrium) {\n      omega_siderite <- (Fe2 * CO3) / Ksp_siderite\n    } else if (precipitation) {\n      omega_siderite <- (Fe2 * DIC * 0.0001) / Ksp_siderite # !!!\n    }\n    else {\n      omega_siderite <- rep(1, N_grid)\n    }\n    # Siderite: R7 = precipitation, R8 = dissolution\n    R7 <- ifelse(omega_siderite > 1, k_precip_siderite * (omega_siderite - 1)^2, 0)\n    R8 <- ifelse(omega_siderite < 1, k_diss_siderite * FeCO3 * (1 - omega_siderite)^2, 0)\n    \n    \n    # FeOH3 fractions\n    FeOH3_tot <- FeOH3 + FeOH3_P\n    chi <- rep(1, length(FeOH3))\n    ind_valid <- FeOH3_tot > 0\n    chi[ind_valid] <- FeOH3[ind_valid] / FeOH3_tot[ind_valid]\n    \n    # limitation & inhibition terms\n    L_O2    <- O2   / (K_O2 + O2)\n    I_O2    <- K_O2 / (K_O2 + O2)\n    \n    L_NO3   <- TOT_N5 / (K_NO3 + TOT_N5)\n    I_NO3   <- K_NO3 / (K_NO3 + TOT_N5)\n    \n    L_MnO2  <- MnO2   / (K_MnO2 + MnO2)\n    I_MnO2  <- K_MnO2 / (K_MnO2 + MnO2)\n    \n    L_FeOH3 <- FeOH3_tot / (K_FeOH3 + FeOH3_tot)\n    I_FeOH3 <- K_FeOH3 / (K_FeOH3 + FeOH3_tot)\n    \n    L_SO4   <- TOT_S6 / (K_SO4 + TOT_S6)\n    I_SO4   <- K_SO4 / (K_SO4 + TOT_S6)\n    \n    L_H3PO4 <- TOT_P   / (K_H3PO4 + TOT_P)\n    I_H3PO4 <- K_H3PO4 / (K_H3PO4 + TOT_P)\n    \n    # reaction rates\n    R1 <- k_alpha * OM * L_O2\n    R2 <- k_alpha * OM * L_NO3                            * I_O2\n    R3 <- k_alpha * OM * L_MnO2                   * I_NO3 * I_O2\n    R4 <- k_alpha * OM * L_FeOH3         * I_MnO2 * I_NO3 * I_O2\n    R5 <- k_alpha * OM * L_SO4 * I_FeOH3 * I_MnO2 * I_NO3 * I_O2\n    R6 <- k_alpha * OM * I_SO4 * I_FeOH3 * I_MnO2 * I_NO3 * I_O2\n    \n    # change of species concentration due to reactions\n    ## solutes step1: change of slow-reaction-species (srs), the ones for which\n    ## the reactions are formulated, according to reaction stoichiometry\n    R.srs_O2    <- - s2p * R1                   # OM Degradation\n    R.srs_CO2   <- (s2p * (R1 + R2 + R3 + R4 + R5 + 1/2 * R6)\n                    - s2p * R7 + s2p * R8)  # Siderite Precipitation / Dissolution\n    R.srs_NH3   <- OM_b * s2p * (R1 + R2 + R3 + R4 + R5 + R6)\n    R.srs_H3PO4 <- s2p * ( OM_c * (R1 + R2 + R3 + R5 + R6) +\n                      (OM_c + (1 - chi) * 4 * lambda) * R4 )\n    R.srs_HNO3  <- - 4/5 * s2p * R2\n    R.srs_N2    <- 2/5 * s2p * R2\n    R.srs_FeOH2 <- (4 * s2p * R4                # OM degradation\n                    - s2p * R7 + s2p * R8)  # Siderite Precipitation / Dissolution\n    R.srs_MnOH2 <- 2 * s2p * R3\n    R.srs_H2SO4 <- - 1/2 * s2p * R5\n    R.srs_H2S   <- 1/2 * s2p * R5\n    R.srs_CH4   <- 1/2 * s2p * R6\n    \n    ## solutes step2: change of tableau-components = model species\n    ## translation of change of slow-reaction-species to change of \n    ## tableau components using the translation table\n    ## here the component-total \"H\" is already converted to alkalinity (*-1)\n    R.ALK   <- -1 * (- R.srs_NH3 + R.srs_H3PO4 + R.srs_HNO3 - 2 * R.srs_FeOH2\n                     - 2 * R.srs_MnOH2 + 2 * R.srs_H2SO4)\n    R.DIC    <- R.srs_CO2\n    R.CH4    <- R.srs_CH4\n    R.TOT_P  <- R.srs_H3PO4\n    R.TOT_N5 <- R.srs_HNO3\n    R.TOT_N3 <- R.srs_NH3\n    R.TOT_S6 <- R.srs_H2SO4\n    R.TOT_S2 <- R.srs_H2S\n    R.O2     <- R.srs_O2\n    R.N2     <- R.srs_N2\n    R.Mn2    <- R.srs_MnOH2\n    R.Fe2    <- R.srs_FeOH2\n    \n    ## solids\n    R.OM <- - R1 - R2 - R3 - R4 - R5 - R6\n    R.MnO2 <- - 2 * R3\n    R.FeOH3 <- - 4 * chi * R4\n    R.FeOH3_P <- - 4 * (1 - chi) * R4\n    R.FeCO3 <- R7 - R8\n    \n    # total change in concentration of model species\n    dCdt.ALK    <- R.ALK + tran.ALK$dC\n    dCdt.DIC    <- R.DIC + tran.DIC$dC\n    dCdt.CH4    <- R.CH4 + tran.CH4$dC\n    dCdt.TOT_P  <- R.TOT_P + tran.TOT_P$dC\n    dCdt.TOT_N5 <- R.TOT_N5 + tran.TOT_N5$dC\n    dCdt.TOT_N3 <- R.TOT_N3 + tran.TOT_N3$dC\n    dCdt.N2     <- R.N2  + tran.N2$dC\n    dCdt.TOT_S6 <- R.TOT_S6 + tran.TOT_S6$dC\n    dCdt.TOT_S2 <- R.TOT_S2 + tran.TOT_S2$dC\n    dCdt.O2     <- R.O2 + tran.O2$dC\n    dCdt.Mn2    <- R.Mn2 + tran.Mn2$dC\n    dCdt.Fe2    <- R.Fe2 + tran.Fe2$dC\n    dCdt.OM     <- R.OM + tran.OM$dC\n    dCdt.MnO2   <- R.MnO2 + tran.MnO2$dC\n    dCdt.FeOH3  <- R.FeOH3 + tran.FeOH3$dC\n    dCdt.FeOH3_P <- R.FeOH3_P + tran.FeOH3_P$dC\n    dCdt.FeCO3  <- R.FeCO3 + tran.FeCO3$dC\n    \n    # characteristic time scales\n    # if dCdt.X = 0 -> timescale will be Inf\n    time_scales <- c(\n      ALK = ALK / dCdt.ALK,\n      DIC = DIC / dCdt.DIC,\n      CH4 = CH4 / dCdt.CH4,\n      TOT_P = TOT_P / dCdt.TOT_P,\n      TOT_N5 = TOT_N5 / dCdt.TOT_N5,\n      TOT_N3 = TOT_N3 / dCdt.TOT_N3,\n      N2 = N2 / dCdt.N2,\n      TOT_S6 = TOT_S6 / dCdt.TOT_S6,\n      TOT_S2 = TOT_S2 / dCdt.TOT_S2,\n      O2 = O2 / dCdt.O2,\n      Mn2 = Mn2 / dCdt.Mn2,\n      Fe2 = Fe2 / dCdt.Fe2,\n      OM = OM / dCdt.OM,\n      MnO2 = MnO2 / dCdt.MnO2,\n      FeOH3 = FeOH3 / dCdt.FeOH3,\n      FeOH3_P = FeOH3_P / dCdt.FeOH3_P,\n      FeCO3 = FeCO3 / dCdt.FeCO3\n    )\n    # but we need to take the absolute value to find the correct minimum\n    time_scales <- abs(time_scales)\n    # set NaN values to a number (???)\n    time_scales[is.na(time_scales)] <- 100\n    # set 0 to a small number\n    time_scales[time_scales == 0] <- 1e-10\n\n    return(\n      list(\n        c(\n          dCdt.ALK = dCdt.ALK,\n          dCdt.DIC = dCdt.DIC,\n          dCdt.TOT_P = dCdt.TOT_P,\n          dCdt.TOT_N5 = dCdt.TOT_N5,\n          dCdt.TOT_N3 = dCdt.TOT_N3,\n          dCdt.TOT_S6 = dCdt.TOT_S6,\n          dCdt.TOT_S2 = dCdt.TOT_S2,\n          dCdt.CH4 = dCdt.CH4,\n          dCdt.O2 = dCdt.O2,\n          dCdt.N2 = dCdt.N2,\n          dCdt.Mn2 = dCdt.Mn2,\n          dCdt.Fe2 = dCdt.Fe2,\n          dCdt.MnO2 = dCdt.MnO2,\n          dCdt.OM = dCdt.OM,\n          dCdt.FeOH3 = dCdt.FeOH3,\n          dCdt.FeOH3_P = dCdt.FeOH3_P,\n          dCdt.FeCO3 = dCdt.FeCO3\n        ),\n        transport = list(\n          tran.ALK = tran.ALK,\n          tran.DIC = tran.DIC,\n          tran.TOT_P = tran.TOT_P,\n          tran.TOT_N5 = tran.TOT_N5,\n          tran.TOT_N3 = tran.TOT_N3,\n          tran.TOT_S6 = tran.TOT_S6,\n          tran.TOT_S2 = tran.TOT_S2,\n          tran.CH4 = tran.CH4,\n          tran.O2 = tran.O2,\n          tran.N2 = tran.N2,\n          tran.Mn2 = tran.Mn2,\n          tran.Fe2 = tran.Fe2,\n          tran.MnO2 = tran.MnO2,\n          tran.OM = tran.OM,\n          tran.FeOH3 = tran.FeOH3,\n          tran.FeOH3_P = tran.FeOH3_P,\n          tran.FeCO3 = tran.FeCO3\n        ),\n        sumR = list(\n          R.ALK     = R.ALK * grid.por$mid,\n          R.DIC     = R.DIC * grid.por$mid,\n          R.TOT_P   = R.TOT_P * grid.por$mid,\n          R.TOT_N5  = R.TOT_N5 * grid.por$mid,\n          R.TOT_N3  = R.TOT_N3 * grid.por$mid,\n          R.TOT_S6  = R.TOT_S6 * grid.por$mid,\n          R.TOT_S2  = R.TOT_S2 * grid.por$mid,\n          R.CH4     = R.CH4 * grid.por$mid,\n          R.O2      = R.O2 * grid.por$mid,\n          R.N2      = R.N2 * grid.por$mid,\n          R.Mn2     = R.Mn2 * grid.por$mid,\n          R.Fe2     = R.Fe2 * grid.por$mid,\n          R.MnO2    = R.MnO2 * grid.svf$mid,\n          R.OM      = R.OM * grid.svf$mid,\n          R.FeOH3   = R.FeOH3 * grid.svf$mid,\n          R.FeOH3_P = R.FeOH3_P * grid.svf$mid,\n          R.FeCO3   = R.FeCO3 * grid.svf$mid\n        ),\n        rates = list(\n          R1 = R1 * grid.svf$mid,\n          R2 = R2 * grid.svf$mid,\n          R3 = R3 * grid.svf$mid,\n          R4 = R4 * grid.svf$mid,\n          R5 = R5 * grid.svf$mid,\n          R6 = R6 * grid.svf$mid,\n          R7 = R7 * grid.svf$mid,\n          R8 = R8 * grid.svf$mid\n        ),\n        solute_equilibrium = solute_equilibrium,\n        time_scales = time_scales,\n        omega_siderite = omega_siderite,\n        timescale_Fe2 = Fe2 / dCdt.Fe2,\n        dCdt_Fe2 = dCdt.Fe2\n      )\n    )\n })\n}\n```\n\n\n## Solve Model\n\n### 1) Steady State\n\nSteady State is found in a two step procedure:\n\n1) Solve steady state without equilibrium solver. All reactions are controlled by component-totals. If necessary, pH dependent speciation is estiamted based on **???**\n2) Solve steady state with equilibrium solver. All reaction now are controlled by the actual concentrations.\n\n```{r std1}\n#| echo: true\n\ninitial <- rep(1e-4, N_grid * N_species)\n\nstd1 <- steady.1D(\n  y = initial,\n  func = model,\n  parms = parameter, \n  dimens = N_grid,\n  nspec = N_species,\n  names = model_species,\n  positive = TRUE,\n  method = \"stodes\",\n  diff_coeffs = diffusion_coefficients,\n  adv_vel = advective_velocities,\n  solve_equilibrium = FALSE,\n  precipitation = TRUE\n)\n```\n\n```{r std2}\n#| echo: true\n\nstd2 <- steady.1D(\n  y = std1$y,\n  func = model,\n  parms = parameter,\n  dimens = N_grid,\n  nspec = N_species,\n  names = model_species,\n  positive = TRUE,\n  method = \"stode\", # stode gives back result, even if steady state is not reached; stodes does not return internediate result\n  maxiter = 100,\n  diff_coeffs = diffusion_coefficients,\n  adv_vel = advective_velocities,\n  solve_equilibrium = TRUE,\n  precipitation = TRUE\n)\n```\n\n\n#### Profiles: Component-Totals\n\n```{r plot std2}\n#| column: screen-inset\n#| layout-ncol: 5\n#| fig.height: 3.5\n#| fig.width: 3.5\n\nplot_std_profiles(std2)\n```\n\n#### Profiles: Speciation\n\n```{r plot std2 speciation}\n#| column: screen-inset\n#| layout-ncol: 3\n#| fig.width: 6\n\nspeciation <- std2$solute_equilibrium$species_conc\ncolnames(speciation) <- tableau_species\n\nrcols <- viridis::viridis(6)\n\nmatplot(y=grid$x.mid, x = speciation[,3:5],\n        type=\"l\", lwd=2, lty=1,\n        ylim=c(length,0), \n        col=c(rcols[3], rcols[6], rcols[1]),\n        ylab=\"depth (m)\", \n        xlab=\"mol/m3_phase\"\n        )\nlegend(\n  x = \"topright\",\n  legend = c(\"H2CO3\", \"HCO3\", \"CO3\"),\n  lty = 1,\n  col = c(rcols[3], rcols[6], rcols[1]),\n  lwd = 2\n)\n\nmatplot(y=grid$x.mid, x = speciation[,6:9],\n        type=\"l\", lwd=2, lty=1,\n        ylim=c(length,0), \n        col=c(rcols[3], rcols[6], rcols[1], rcols[4]),\n        ylab=\"depth (m)\", \n        xlab=\"mol/m3_phase\"\n        )\nlegend(\n  x = \"topright\",\n  legend = c(\"H3PO4\", \"H2PO4-\", \"HPO42-\", \"PO43-\"),\n  lty = 1,\n  col = c(rcols[3], rcols[6], rcols[1], rcols[4]),\n  lwd = 2\n)\n\nmatplot(y=grid$x.mid, x = speciation[,10:11],\n        type=\"l\", lwd=2, lty=1,\n        ylim=c(length,0), \n        col=c(rcols[3], rcols[6]),\n        ylab=\"depth (m)\", \n        xlab=\"mol/m3_phase\"\n        )\nlegend(\n  x = \"topright\",\n  legend = c(\"HNO3\", \"NO3-\"),\n  lty = 1,\n  col = c(rcols[3], rcols[6]),\n  lwd = 2\n)\n\nmatplot(y=grid$x.mid, x = speciation[,12:13],\n        type=\"l\", lwd=2, lty=1,\n        ylim=c(length,0), \n        col=c(rcols[3], rcols[6]),\n        ylab=\"depth (m)\", \n        xlab=\"mol/m3_phase\"\n        )\nlegend(\n  x = \"topright\",\n  legend = c(\"NH4+\", \"NH3\"),\n  lty = 1,\n  col = c(rcols[3], rcols[6]),\n  lwd = 2\n)\n\nmatplot(y=grid$x.mid, x = speciation[,14:16],\n        type=\"l\", lwd=2, lty=1,\n        ylim=c(length,0), \n        col=c(rcols[3], rcols[6], rcols[1]),\n        ylab=\"depth (m)\", \n        xlab=\"mol/m3_phase\"\n        )\nlegend(\n  x = \"topright\",\n  legend = c(\"H2SO4\", \"HSO4-\", \"SO42-\"),\n  lty = 1,\n  col = c(rcols[3], rcols[6], rcols[1]),\n  lwd = 2\n)\n\nmatplot(y=grid$x.mid, x = speciation[,17:19],\n        type=\"l\", lwd=2, lty=1,\n        ylim=c(length,0), \n        col=c(rcols[3], rcols[6], rcols[1]),\n        ylab=\"depth (m)\", \n        xlab=\"mol/m3_phase\"\n        )\nlegend(\n  x = \"topright\",\n  legend = c(\"H2S\", \"HS-\", \"S2-\"),\n  lty = 1,\n  col = c(rcols[3], rcols[6], rcols[1]),\n  lwd = 2\n)\n```\n\n#### Profile: pH\n\n```{r plot pH}\n#| out.width: 100%\n\npH <- -log10(speciation[,1] * 10^-3) # mol/m3 * 10^-3 m3/L\nplot(grid$x.mid ~ pH, ylim = c(0.1, 0), type = \"l\", ylab = \"depth (m)\", lwd = 2)\n```\n\n#### Profiles: Saturation\n\n```{r plot saturation}\n#| out.width: 100%\n\nrcols <- viridis::viridis(2)\n\nomega_siderite <- speciation[,\"CO3\"] * std1$y[, \"Fe2\"] / parameter$Ksp_siderite\n\nplot(\n    x = std2$omega_siderite,\n    y = grid$x.mid,\n    ylim = c(max(grid$x.int), min(grid$x.int)),\n    type = \"l\",\n    lwd = 2,\n    col = rcols[1],\n    xlab = \"omega siderite\",\n    ylab = \"depth (m)\",\n    log = \"x\"\n  )\n```\n\n#### Profiles: Reaction Rates\n\n##### OM Degradation\n```{r plot rates OM Degradation}\n#| out.width: 100%\n\nplot_std_rates(std2, c(\"R1\", \"R2\", \"R3\", \"R4\", \"R5\", \"R6\"))\n```\n\n##### Siderite Precipitation\n```{r plot rates Siderite Precip}\n#| out.width: 100%\n\nplot_std_rates(std2, c(\"R7\", \"R8\"))\n```\n\n\n## Mass Balances\n\n### Species-based Mass Balances\n\nThe change in concentration of a species $i$, integrated over depth and in relation to the area $A$ is\n\n$$\\frac{dC_{A,i}}{dt} \\; \\left( \\frac{mol}{m^2 \\cdot a} \\right) = J(a)_i - J(b)_i + \\int_{a}^b \\Psi \\sum R_i$$\n\nwith\n\n- $J(a)_i$: flux of species $i$ across upper boundary\n- $J(b)_i$: flux of species $i$ across lower boundary\n- $\\Psi$: volume fraction.\n\n```{r std species-based mass balances}\n#| echo: true\n#| code-fold: true\n\nspecies_mass_balance <- function(species_vector, std, grid) {\n  \n  species_mass_balance_inner <- function(species, std, grid) {\n  \n    tran.species <- paste0(\"tran.\", species)\n    flux_up   <- std$transport[[tran.species]]$flux.up\n    flux_down <- std$transport[[tran.species]]$flux.down\n    netto_flux <- flux_up - flux_down\n    \n    R.species <- paste0(\"R.\", species)\n    sumR_integrated <- sum(std$sumR[[R.species]] * grid$dx)\n    \n    bilanz <- netto_flux + sumR_integrated\n    \n    return(data.frame(\n      species = species,\n      flux_up = flux_up,\n      flux_down = flux_down,\n      netto_flux = netto_flux,\n      sumR_integrated = sumR_integrated,\n      bilanz = bilanz\n    ))\n  }\n  \n  species_based_mass_balance <- data.frame(\n  \"Species\" = NULL,\n  \"Flux up\" = NULL,\n  \"Flux down\" = NULL,\n  \"Netto Flux\" = NULL,\n  \"Integral Sum R\" = NULL,\n  \"Bilanz\" = NULL\n  )\n  \n  for (species in species_vector) {\n    species_based_mass_balance <- rbind(\n      species_based_mass_balance,\n      species_mass_balance_inner(species, std, grid)\n    )\n  }\n  \n  return(species_based_mass_balance)\n}\n\nspecies_mass_balance_std1 <- species_mass_balance(model_species, std1, grid)\nspecies_mass_balance_std2 <- species_mass_balance(model_species, std2, grid)\n```\n\n```{r print species based mass balances}\nknitr::kable(\n  species_mass_balance_std1,\n  caption = \"std1\",\n  digits = 20,\n  format.args = list(format = \"e\", digits = 2)\n)\nknitr::kable(\n  species_mass_balance_std2,\n  caption = \"std2\",\n  digits = 20,\n  format.args = list(format = \"e\", digits = 2)\n)\n```\n\n\n### Element-based Mass Balances\n\nThe total amount of an chemical element $e$ is not influenced by chemical reactions.\nTherefore, the over the depth integrated and summed up reaction rates of of species $i$ that contain a chemical element is 0.\n\n$$\\sum \\left[ \\frac{e}{i} \\cdot \\int_{a}^b \\Psi \\sum R_i \\right]_e = 0$$\n\nFrom this follows, that under stationary conditions the flux in and out of the sediment domain cancel out.\n\n$$\\frac{dC_{A,e}}{dt} \\; \\left( \\frac{mol}{m^2 \\cdot a} \\right) = J(a)_e - J(b)_e = 0$$\n\n**Elemental Composition of Model-Species**\n```{r elemental composition}\n\nelemental_composition <- list(\n  C = data.frame(\n    species = c(\"DIC\", \"CH4\", \"OM\", \"FeCO3\"),\n    stoic   = c(1, 1, 1, 1)\n  ),\n  N = data.frame(\n    species = c(\"TOT_N5\", \"TOT_N3\", \"N2\", \"OM\"),\n    stoic   = c(1, 1, 2, reaction_parameter[[\"OM_b\"]])\n  ),\n  P = data.frame(\n    species = c(\"TOT_P\", \"OM\", \"FeOH3_P\"),\n    stoic   = c(1, reaction_parameter[[\"OM_c\"]], reaction_parameter[[\"lambda\"]])\n  ),\n  S = data.frame(\n    species = c(\"TOT_S6\", \"TOT_S2\"),\n    stoic   = c(1, 1)\n  ),\n  Fe = data.frame(\n    species = c(\"Fe2\", \"FeOH3\", \"FeOH3_P\", \"FeCO3\"),\n    stoic   = c(1, 1, 1, 1)\n  ),\n  Mn = data.frame(\n    species = c(\"Mn2\", \"MnO2\"),\n    stoic   = c(1, 1)\n  )\n)\n```\n\n```{r print elemental composition}\n#| layout-ncol: 3\n#| results: \"asis\"\n\nfor (i in seq_len(length(elemental_composition))) {\n  print(knitr::kable(\n    elemental_composition[[i]],\n    caption = names(elemental_composition[i]),\n    digits = 5,\n    valign = \"t\",\n    booktabs = TRUE\n  ))\n}\n```\n\n```{r element based mass balance}\n#| echo: true\n#| code-fold: true\n\nelement_mass_balance <- function(elemental_composition, std, grid) {\n  \n  species_sumR_integrated <- function(species, std, grid) {\n    \n    R.species <- paste0(\"R.\", species)\n    sumR_integrated <- sum(std$sumR[[R.species]] * grid$dx)\n    \n    return(sumR_integrated)\n  }\n\n  species_boundary_fluxes <- function(species, std, grid) {\n  \n    tran.species <- paste0(\"tran.\", species)\n    flux_up   <- std$transport[[tran.species]]$flux.up\n    flux_down <- std$transport[[tran.species]]$flux.down\n    \n    return(list(\n      flux_up = flux_up,\n      flux_down = flux_down\n    ))\n  }\n\n  elements <- names(elemental_composition)\n  \n  overview <- data.frame(\n    \"Element\" = NULL,\n    \"Netto Flux\" = NULL,\n    \"Integral Sum R\" = NULL\n  )\n\n  detailed <- list()\n  \n  for (element in elements) {\n\n    composition <- elemental_composition[[element]]\n\n    detailed_part <- data.frame(\n      \"Species\" = NULL,\n      \"Flux up\" = NULL,\n      \"Flux down\" = NULL,\n      \"Intergal Sum R\" = NULL\n    )\n\n    # for every species in which an element is present ...\n    for (i in seq_len(nrow(composition))) {\n      species <- composition$species[i]\n      stoic   <- composition$stoic[i]\n\n      sumR <- species_sumR_integrated(species, std, grid) * stoic\n\n      boundary_fluxes <- species_boundary_fluxes(species, std, grid)\n      flux_up <- boundary_fluxes$flux_up * stoic\n      flux_down <- boundary_fluxes$flux_down * stoic\n\n      detailed_part <- rbind(\n        detailed_part,\n        data.frame(\n          \"Species\" = species,\n          \"Flux up\" = flux_up,\n          \"Flux down\" = flux_down,\n          \"Integral Sum R\" = sumR\n        )\n      )\n    }\n\n    detailed[[element]] <- detailed_part\n\n    net_flux <- sum(detailed_part[[\"Flux.up\"]]) - sum(detailed_part[[\"Flux.down\"]])\n    net_rate <- sum(detailed_part[[\"Integral.Sum.R\"]])\n\n    overview <- rbind(\n      overview,\n      data.frame(\n        \"Element\" = element,\n        \"Netto Flux\" = net_flux,\n        \"Integral Sum R\" = net_rate\n      )\n    )\n  }\n  \n  return(list(\n    overview = overview,\n    detailed = detailed\n  ))\n}\n\nelement_mass_balance_std1 <- element_mass_balance(elemental_composition, std1, grid)\nelement_mass_balance_std2 <- element_mass_balance(elemental_composition, std2, grid)\n```\n\n```{r print element based mass balances}\n#| layout-ncol: 2\n\nknitr::kable(\n  element_mass_balance_std1$overview,\n  caption = \"std1\",\n  digits = 20,\n  format.args = list(format = \"e\", digits = 2),\n  valign = \"t\"\n)\nknitr::kable(\n  element_mass_balance_std2$overview,\n  caption = \"std2\",\n  digits = 20,\n  format.args = list(format = \"e\", digits = 2),\n  valign = \"t\"\n)\n```\n","srcMarkdownNoYaml":"\n\n```{r load libraries}\n#| message: false\n\nrequire(readODS)\nrequire(marelac)\nrequire(ReacTran)\nrequire(microbenchmark)\nrequire(plotly)\n```\n\n## Concept\n\n### Reactions\n\nReactions affect solute and solid model species differently.\n\nThe solid model species are the same occurring in the chemical reaction equations.\nTherefore they are affected directly according to the reaction stoichiometry.\n\nSolute model species are either component-totals (e.g. DIC, TOT_P, ...) to be speciated later or species on their own (e.g. O2, CH4).\nThe effect of reactions on solute species is first formulated for the species occurring in the chemical reaction equations according to the reaction stoichiometry.\nIn a second step this changes are translated to changes of the component-totals / model species using a translation table.\n\n### Transport\n\nFor solutes the (probably) dominant species of a component-total governs the diffusion coefficient (cf code-block \"Diffusion Coefficients\").\nThe transport of solids is not affected by species properties.\n\n\n## Reactions Describing OM Decomposition\n\n### OM Composition\n\n$\\ce{(CH2O)_a (NH3)_b (H3PO4)_c}$\n\n- $a = 1$\n- $b = 16/106$\n- $c = 1/106$\n\n\n### Rate Constants\n\n- $k_{\\alpha} = 0.05 - 1.62 \\: yr^{-1}$    [@moodley2005; @tromp1995global]\n- $k_{\\beta} = 0.025 - 0.0086 \\: yr^{-1}$  [@tromp1995global]\n\n\n### Limitation (L) and Inihibition (I) Terms\n\n#### O2\n\n$L_{\\ce{O2}} = \\frac{[\\ce{O2}]}{K_{\\ce{O2}} + [\\ce{O2}]}$\n\n$I_{\\ce{O2}} = \\frac{K_{\\ce{O2}}}{K_{\\ce{O2}} + [\\ce{O2}]}$\n\nwith $K_{O2} = 0.001 - 0.03 \\: mol \\: m^{-3}_{pw}$ [@wang1996multicomponent]\n\n#### NO3-\n\n$L_{\\ce{NO3^-}} = \\frac{[\\ce{NO3^-}]}{K_{\\ce{NO3-}} + [\\ce{NO3^-}]}$\n\n$I_{\\ce{NO3^-}} = \\frac{K_{\\ce{NO3^-}}}{K_{\\ce{NO3^-}} + [\\ce{NO3^-}]}$\n\nwith $K_{NO3-} = 0.004 - 0.08  \\: mol \\: m^{-3}_{pw}$ [@wang1996multicomponent]\n\n#### MnO2\n\n$L_{\\ce{MnO2^{\\alpha}}} = \\frac{[\\ce{MnO2^{\\alpha}}]}{K_{\\ce{MnO2}} + [\\ce{MnO2^{\\alpha}}]}$\n \n$I_{\\ce{MnO2^{\\alpha}}} = \\frac{K_{\\ce{MnO2}}}{K_{\\ce{MnO2}} + [\\ce{MnO2^{\\alpha}}]}$\n\nwith $K_{\\ce{MnO2^{\\alpha}}} = \\{0.004 - 0.032\\} \\: mol \\: {kg}^{-1} \\cdot \\rho_{dry}$  [@wang1996multicomponent]\n\n#### Fe(OH)3\n\n$L_{\\ce{Fe(OH)3_{; tot}^\\alpha}} = \\frac{[\\ce{Fe(OH)3_{; tot}^\\alpha}]}{K_{\\ce{Fe(OH)3}} + [\\ce{Fe(OH)3_{; tot}^\\alpha}]}$\n\n$I_{\\ce{Fe(OH)3^\\alpha}} = \\frac{K_{\\ce{Fe(OH)3}}}{K_{\\ce{Fe(OH)3}} + [\\ce{Fe(OH)3_{; tot}^\\alpha}]}$\n\nwith $K_{\\ce{FeOH3}} = \\{0.065 - 0.1\\} \\: mol \\: {kg}^{-1} \\cdot \\rho_{dry}$ [@wang1996multicomponent]\n\n#### SO42-\n\n$L_{\\ce{SO4^{2-}}} = \\frac{[\\ce{SO4^{2-}}]}{K_{\\ce{SO4^{2-}}} + [\\ce{SO4^{2-}}]}$\n\n$I_{\\ce{SO4^{2-}}} = \\frac{K_{\\ce{SO4^{2-}}}}{K_{\\ce{SO4^{2-}}} + [\\ce{SO4^{2-}}]}$\n\nwith $K_{SO42-} = 0.0016  \\: mol \\: {m^{-3}_{pw}}$ [@wang1996multicomponent]\n\n#### H3PO4\n\n$L_{\\ce{H3PO4}} = \\frac{[\\ce{H3PO4}]}{K_{\\ce{H3PO4}} + [\\ce{H3PO4}]}$\n\nwith $K_{\\ce{H3PO4}} = 10^{-5} \\: mol \\: m^{-3}_{pw}$ (Reinier)\n\n> formulated for lump sum\n\n### FeOH3 Fractions\n\n$\\ce{Fe(OH)3_{; tot}^\\alpha} = \\ce{Fe(OH)3^{\\alpha}} + \\ce{Fe(OH)3^\\alpha(H3PO4)_{\\lambda}}$ with $\\lambda = 0.6$\n\n$\\chi = \\frac{[\\ce{Fe(OH)3^{\\alpha}}]}{[\\ce{Fe(OH)3_{; tot}^\\alpha}]}$\n\n\n### Reactions\n\n#### OM + O2 (R1)\n\n$\\ce{OM^{\\alpha, \\beta} + O2 -> CO2 + b NH3 + c H3PO4 + H2O}$\n\n$R = k_{\\alpha, \\beta} \\: OM^{\\alpha, \\beta} \\: L_{\\ce{O2}}$\n\n\n#### OM + HNO3 (R2)\n\n$\\ce{OM^{\\alpha, \\beta} + 4/5 HNO3 -> CO2 + b NH3 + c H3PO4 + 2/5 N2 + 7/5 H2O}$\n\n$R = k_{\\alpha, \\beta} \\: OM^{\\alpha, \\beta} \\: L_{\\ce{NO3-}} \\: I_{\\ce{O2}}$\n\n\n#### OM + MnO2 (R3)\n\n$\\ce{OM^{\\alpha, \\beta} + 2 MnO2 + H2O -> CO2 + b NH3 + c H3PO4 + 2 Mn(OH)2}$\n\n$R = k_{\\alpha, \\beta} \\: OM^{\\alpha, \\beta} \\: L_{\\ce{MnO2}^\\alpha} \\: I_{\\ce{NO3^-}} \\: I_{\\ce{O2}}$\n\n\n#### OM + FeOH3 / FeOH3~H3PO4 (R4)\n\n$\\ce{OM^{\\alpha, \\beta} + 4 (\\chi Fe(OH)3^{\\alpha} + (1 - \\chi) Fe(OH)3^\\alpha(H3PO4)_{\\lambda} ) -> CO2 + b NH3 + (c + (1- \\chi) 4 \\lambda) H3PO4 + 4 Fe(OH)2 + 3 H2O}$\n\n$R = k_{\\alpha, \\beta} \\: OM^{\\alpha, \\beta} \\: L_{\\ce{Fe(OH)3_{; tot}^\\alpha}} \\: I_{\\ce{MnO2^{\\alpha}}} \\: I_{\\ce{NO3^-}} \\: I_{\\ce{O2}}$\n\n\n#### OM + H2SO4 (R5)\n\n$\\ce{OM^{\\alpha, \\beta} + 1/2 H2SO4 -> CO2 + b NH3 + c H3PO4 + 1/2 H2S + H2O}$\n\n$R = k_{\\alpha, \\beta} \\: OM^{\\alpha, \\beta} \\: L_{\\ce{SO4^{2-}}} \\: I_{\\ce{Fe(OH)3^\\alpha}} \\: I_{\\ce{MnO2^{\\alpha}}} \\: I_{\\ce{NO3^-}} \\: I_{\\ce{O2}}$\n\n\n#### Methanogenesis (R6)\n\n$\\ce{OM^{\\alpha, \\beta} -> 1/2 CO2 + b NH3 + c H3PO4 + 1/2 CH4}$\n\n$R = k_{\\alpha, \\beta} \\: OM^{\\alpha, \\beta} \\: I_{\\ce{SO4^{2-}}} \\: I_{\\ce{Fe(OH)3^\\alpha}} \\: I_{\\ce{MnO2^{\\alpha}}} \\: I_{\\ce{NO3^-}} \\: I_{\\ce{O2}}$\n\n\n## Precipitation Reactions\n\n### Siderite\n\nIn general:\n\n$\\ce{FeCO3 <-> Fe^{2+} + CO3^{2-}}$\n\nIn our model:\n\n$\\ce{FeCO3 + 2 H2O <-> Fe(OH)2 + H2CO3}$\n\nPrecipitation and Dissolution are split in two reactions from which only one is active at a time, depending on the saturation state $\\Omega$.\n\n$\\Omega = \\frac{\\ce{[Fe^{2+}]} \\cdot \\ce{[CO3^{2-}]}}{K_{sp; siderite}} \\quad$\nwith $\\quad K_{sp; siderite} = 10^{-10.4} \\; mol^2 \\; m^{-6}$\n\nIf $\\: \\Omega > 1$:\n\n- $R_{precipitation} = k_{precip} \\cdot (\\Omega - 1) \\quad$\nwith $\\quad k_{precip} \\approx 1 \\times 10^{-3} \\; mol \\; {m_{pw}}^{-3} \\; yr^{-1}$\n- $R_{dissolution} = 0$\n\nIf $\\: \\Omega < 1$:\n\n- $R_{precipitation} = 0$\n- $R_{dissolution} = - k_{diss} \\cdot \\ce{[FeCO3]} \\cdot (\\Omega - 1) \\quad$\nwith $\\quad k_{diss} \\approx 1 \\times 10^{-2} \\; yr^{-1}$\n\n\n## Equilibrium Reactions described via Tableau\n\n```{r read tableau}\nexcel <- read_fods(\"tableau.fods\", sheet = \"morel_tableau\")\n\ntableau_print <- as.data.frame(excel)\n\nexcel[is.na(excel)] <- 0\n\ncolumn_H2O  <- 2\ncolumn_logK <- 10\ncolumn_species_names <- 1\nrow_H2O     <- 1\n\ntableau <- as.matrix(excel[-row_H2O,-c(column_H2O, column_logK, column_species_names)])\n\nlogK <- as.vector(unlist(excel[-row_H2O, column_logK]))\n\ntableau_species <- unlist(excel[,column_species_names])[-1]\nnames(tableau_species) <- NULL\n\nmodel_species <- c(\"ALK\", \"DIC\", \"TOT_P\", \"TOT_N5\", \"TOT_N3\", \"TOT_S6\", \"TOT_S2\", \"CH4\", \"O2\", \"N2\", \"Mn2\", \"Fe2\", \"MnO2\", \"OM\", \"FeOH3\", \"FeOH3_P\", \"FeCO3\")\n\n#excel <- read_xlsx(\"tableau.xlsx\", sheet = \"translation_table\")\n#excel[is.na(excel)] <- 0\n\nrm(column_H2O, column_logK, column_species_names, row_H2O, excel)\n```\n\nThe Tableau is used to calculate equilibrium speciation of solute species after model run.\nFast equilibrium reactions are neglected during model runtime (so far).\n\n```{r print tableau}\noptions(knitr.kable.NA = '')\nknitr::kable(tableau_print)\n```\n\n\n## Functions\n\n### Solve Tableau\n\n```{r def solve_tableau}\n#| echo: true\n#| code-fold: true\n\nsolve_tableau <- function(component_total, tableau, logK, N_grid) {\n  \n  # load shared object\n  dyn.load(\"solve_tableau.so\")\n\n  return(.Fortran(\"solve_tableau\",\n                  component_total = as.double(component_total),\n                  tableau         = matrix(as.double(tableau), ncol = ncol(tableau)),\n                  logK            = as.double(logK),\n                  N_components    = as.integer(ncol(tableau)),\n                  N_species       = as.integer(nrow(tableau)),\n                  N_grid          = as.integer(N_grid),\n                  iter_pcfm       = rep(as.integer(0), N_grid),\n                  iter_newton     = rep(as.integer(0), N_grid),\n                  info_newton     = rep(as.integer(0), N_grid),\n                  difference      = matrix(as.double(0), ncol = ncol(tableau), nrow = N_grid),\n                  species_conc    = matrix(as.double(0), ncol = nrow(tableau), nrow = N_grid),\n                  success         = rep(as.integer(0), N_grid)\n                  )\n  )\n  \n}\n```\n\n### Plot steady.1D results\n\n```{r def plot functions 1}\n#| echo: true\n#| code-fold: true\n\nplot_std_profiles <- function(std) {\n  \n  plot(std, xyswap = TRUE, xlab = \"mol/m3_phase\", ylab = \"depth (m)\",\n       grid = grid$x.mid,\n       which = model_species,\n       lwd = 2,\n       cex = 1.5,\n       mfrow = c(1,1)\n  )\n}\n\nplot_std_rates <- function(std, reactions, title = \"\") {\n  \n  # rcols <- viridis::viridis(length(std$rates))\n  # \n  # matplot(y = grid$x.mid,\n  #         x = as.data.frame(std$rates),\n  #         type = \"l\", lwd=2, lty=1,\n  #         ylim = c(length,0), \n  #         col = rcols,\n  #         ylab=\"depth (m)\", \n  #         xlab=\"reaction rate (mol/(m3_bulk yr))\")\n  # \n  # legend(\n  #   x = \"bottomright\",\n  #   legend = names(std$rates),\n  #   lty = 1,\n  #   col = rcols <- viridis::viridis(length(std$rates)),\n  #   lwd = 2\n  # )\n  \n  data <- as.data.frame(std$rates)\n  data$depth <- grid$x.mid\n  \n  fig <- plot_ly(data, type = 'scatter', mode = 'lines', line = list(width = 3))\n  for (rate in reactions) {\n    fig <- fig %>% add_trace(y = ~depth, x = std$rates[[rate]], name = rate)\n  }\n  fig <- fig %>% layout(\n    title = title,\n    xaxis = list(title = \"reaction rate (mol/(m3_bulk yr))\"),\n    yaxis = list(title = \"depth (m)\", range = c(length,0)),\n    font = list(size = 16)\n  )\n    \n  fig\n}\n\nplot_omega <- function(std) {\n  plot(\n    x = std$omega_siderite,\n    y = grid$x.mid,\n    ylim = c(max(grid$x.int), min(grid$x.int)),\n    type = \"l\",\n    lwd = 2,\n    xlab = \"omega siderite\",\n    ylab = \"depth (m)\",\n    log = \"x\"\n  )\n}\n```\n\n### Plot Runge-Kutta results\n\n```{r def plot functions 2}\n#| echo: true\n#| code-fold: true\n\nplot_std_conc_evolution <- function(std_matrix_list, selection, N_lines, grid) {\n  \n  data <- std_matrix_list[[selection]]\n  \n  # number of available timesteps\n  available_timesteps <- ncol(data)\n  \n  # selection of N_lines timesteps\n  selected_timesteps <- floor(seq.int(1, available_timesteps, length.out = N_lines))\n  \n  # reduce data\n  data <- data[,selected_timesteps]\n  \n  # plot\n  matplot(y = grid$x.mid,\n          x = data,\n          type = \"l\",\n          ylim = c(max(grid$x.mid), min(grid$x.mid)),\n          xlab = \"concentration (mol/m^3_phase)\",\n          ylab = \"depth (m)\",\n          main = selection)\n}\n\nplot_std_rate_evolution <- function(std, selection, N_lines) {\n  \n  data <- std$rates_split[[selection]]\n  \n  # number of available depths\n  available_depths <- nrow(data)\n  \n  # selection of N_lines depths\n  selected_depths <- floor(seq.int(1, available_depths, length.out = N_lines))\n  \n  # reduce data\n  data <- data[selected_depths,]\n  \n  # plot\n  matplot(x = std$times,\n          y = t(data),\n          type = \"l\",\n          ylab = \"rate (mol/(m^3_phase * yr))\",\n          xlab = \"time (a)\",\n          main = selection)\n}\n```\n\n\n## Model Setup\n\n### Grid\n```{r grid setup}\n#| echo: true\n\nlength   <- 0.1 # (m)\nN_grid   <- 400 # (-)\n\ngrid     <- setup.grid.1D(L = length, N = N_grid, dx.1=0.0005)\n```\n\n### Porosity / Solid Volume Fraction\n```{r porosity}\n#| echo: true\n\nporFun.L  <- function(x, por.SWI, por.deep, porcoef) {\n  return( por.deep + (por.SWI-por.deep) * exp(-x*porcoef) ) \n}\n\nporFun.S  <- function(x, por.SWI, por.deep, porcoef) {\n  return( 1 - porFun.L(x, por.SWI, por.deep, porcoef) ) \n}\n\npor.swi  <- 0.8\npor.deep <- 0.8\n\ngrid.por <- setup.prop.1D(func = porFun.L, grid = grid, por.SWI = por.swi,\n                           por.deep=por.deep, porcoef=100)\n\ngrid.svf  <- setup.prop.1D(func = porFun.S, grid = grid, por.SWI = por.swi,\n                           por.deep=por.deep, porcoef=100)\n\nconversion_factors <- list(\n  s2p = ((grid.svf$mid) / grid.por$mid), # conversion of x/m3_svf to x/m3_pw\n  p2s = (grid.por$mid / (grid.svf$mid))  # conversion of x/m3_pw  to x/m3_svf\n)\n```\n\n### Advective Velocities\n```{r advection}\n#| echo: true\n\n# sedimentation velocity\nv <- 5e-6*365  # (m/yr)\n\n# returns pore water advective velocities (u) and solid phase advective velocities (v)\nadvective_velocities <- setup.compaction.1D(\n    v.0 = v,\n    por.0 = por.swi,\n    por.inf = por.deep,\n    por.grid = grid.por\n)\n```\n\n### Diffusion Coefficients\n```{r diffusion}\n#| echo: true\n\nsalinity    <- 35 # (psu)\ntemperature <- 20 # (dgC)\npressure    <- 1.013253 # (bar)\nDb          <- 5e-4 # mixing rate of the sediment; Bioturbation coefficient (m2/y)\nDb_mid      <- 0.5  # middle of Db decreasing zone (m)\nDb_width    <- 0.01 # width of Db decreasing zone (m)\n\ngrid.Db <- setup.prop.1D(\n    func = p.sig,\n    y.0 = Db,\n    y.inf = 0,\n    x.L = Db_mid,\n    x.att = Db_width,\n    grid = grid\n)\n\ntortuosity_squared <- 1-log(grid.por$int^2)\n\ns2yr <- 3600*24*365.25\n\ndiffcoeff_species <- c(\"HCO3\", \"HCO3\", \"CH4\", \"H2PO4\", \"NO3\", \"NH4\", \"SO4\",\n                       \"O2\", \"Mn\", \"Fe\", \"H2S\", \"N2\")\n\ndiffcoeffs <- diffcoeff(\n  species = diffcoeff_species,\n  S = salinity,\n  t = temperature,\n  P = pressure\n)\n\ndiffusion_coefficients <- list(\n  \n  # solute: molar diffusion coefficient / tortuosity**2 + bioturbation coefficient\n  # solid: bioturbation coefficient\n  \n  ALK   = diffcoeffs[[1]]  * s2yr / tortuosity_squared + grid.Db$int,\n  DIC   = diffcoeffs[[2]]  * s2yr / tortuosity_squared + grid.Db$int,\n  CH4   = diffcoeffs[[3]]  * s2yr / tortuosity_squared + grid.Db$int,\n  H2PO4 = diffcoeffs[[4]]  * s2yr / tortuosity_squared + grid.Db$int,\n  NO3   = diffcoeffs[[5]]  * s2yr / tortuosity_squared + grid.Db$int,\n  NH4   = diffcoeffs[[6]]  * s2yr / tortuosity_squared + grid.Db$int,\n  SO4   = diffcoeffs[[7]]  * s2yr / tortuosity_squared + grid.Db$int,\n  O2    = diffcoeffs[[8]]  * s2yr / tortuosity_squared + grid.Db$int,\n  Mn2   = diffcoeffs[[9]]  * s2yr / tortuosity_squared + grid.Db$int,\n  Fe2   = diffcoeffs[[10]] * s2yr / tortuosity_squared + grid.Db$int,\n  H2S   = diffcoeffs[[11]] * s2yr / tortuosity_squared + grid.Db$int,\n  N2    = diffcoeffs[[12]] * s2yr / tortuosity_squared + grid.Db$int,\n  solid = grid.Db$int\n    \n)\n```\n\n```{r plot por, Db, ...}\n#| layout-ncol: 4\n#| fig.height: 3.5\n#| fig.width: 3.5\n\nplot(x=grid.por$mid, y=grid$x.mid, type=\"l\",\n     ylim=c(length,0), ylab=\"depth (m)\", xlab=\"porosity (m3_liq/m3_bulk)\")\nplot(x=diffusion_coefficients$solid, y=grid$x.int, type=\"l\",\n     ylim=c(length,0), ylab=\"depth (m)\", xlab=\"D_solid (m2/yr)\")\nplot(x=diffusion_coefficients$DIC, y=grid$x.int, type=\"l\",\n     ylim=c(length,0), ylab=\"depth (m)\", xlab=\"D_DIC (m2/yr)\")\nplot(x=diffusion_coefficients$O2, y=grid$x.int, type=\"l\",\n     ylim=c(length,0), ylab=\"depth (m)\", xlab=\"D_O2 (m2/yr)\")\n```\n\n### Boundary Conditions\n```{r boundary conditions}\n#| echo: true\n\nboundary_conditions <- c(\n  # Alkalinity in eq/m3?\n  ALK_up   = 2,\n  # Solutes: concentrations in mol m-3\n  DIC_up   = 2,\n  CH4_up   = 0,\n  H2PO4_up = 0,\n  NO3_up   = 0.2,\n  NH4_up   = 0.001,\n  SO4_up   = 28,\n  O2_up    = 0.3,\n  N2_up    = 0, # <<<\n  Mn2_up   = 0,\n  Fe2_up   = 0,\n  H2S_up   = 0,\n  # Solids: flux in mol m-2 yr-1\n  OM_up      = 0.25 * 365,\n  MnO2_up    = 10,\n  FeOH3_up   = 10,\n  FeOH3_P_up = 10,\n  FeCO3_up   = 0\n)\n```\n\n### Reaction Parameters\n```{r reaction parameters}\n#| echo: true\n\ndry_density_sediment <- 2700 # kg/m³\n\nreaction_parameter <- c(\n  # OM degradation\n  ## reaction constants\n  k_alpha = 0.005 * 365, # yr-1\n  k_beta  = 0,#0.025,    # yr-1\n  ## composition of OM\n  OM_a    = 1,\n  OM_b    = 16 / 106,\n  OM_c    = 1 / 106,\n  ## limitation / inhibition constants (mol m-3)\n  K_O2    = 0.001,\n  K_NO3   = 0.001,\n  K_MnO2  = 0.001 * dry_density_sediment,#0.004 * dry_density_sediment,\n  K_FeOH3 = 0.001 * dry_density_sediment,#0.065 * dry_density_sediment,\n  K_SO4   = 0.1,\n  K_H3PO4 = 10^-5,\n  ## ratio of Fe to P in Fe(OH)_3(H3PO4)_lambda\n  lambda  = 0.6,\n  # Siderite Precipitation / Dissolution\n  k_precip_siderite = 1.8e2, # mol m-3_sf yr-1\n  k_diss_siderite = 2.5e-1,  # yr-1\n  Ksp_siderite = 10**(-10.4) * 1000**2\n)\n```\n\n### Collect Inputs\n```{r collect inputs}\n#| echo: true\n\nparameter <- c(\n  N_grid = N_grid,\n  conversion_factors,\n  boundary_conditions,\n  reaction_parameter,\n  logK = logK,\n  tableau = tableau\n)\n\nN_species <- length(model_species)\n```\n\n### Model Function\n```{r model function}\n#| echo: true\n#| code-fold: show\n\nmodel <- function (t, state, parms, diff_coeffs, adv_vel, solve_equilibrium, precipitation){\n  \n  with (as.list(parms),{\n    \n    # assign state variables\n    i <- 1\n    # state variables for solutes are total amounts,\n    # but implicitly concentrations (total_amount/m³_pw)\n    ALK     <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1 # -TOT_H\n    DIC     <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1 # TOT_H2CO3\n    TOT_P   <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1\n    TOT_N5  <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1\n    TOT_N3  <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1\n    TOT_S6  <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1\n    TOT_S2  <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1\n    CH4     <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1\n    O2      <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1\n    N2      <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1\n    Mn2     <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1\n    Fe2     <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1\n    # state variables for solids are tableau-species concentrations (mol/m3_svf)\n    MnO2    <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1\n    OM      <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1\n    FeOH3   <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1\n    FeOH3_P <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1\n    FeCO3   <- state[((i-1) * N_grid + 1) : (i * N_grid)]; i <- i + 1\n    \n    \n    # transport terms\n    tran.ALK     <- tran.1D(C = ALK, C.up = ALK_up, D = diff_coeffs$ALK, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n    \n    tran.DIC     <- tran.1D(C = DIC, C.up = DIC_up, D = diff_coeffs$DIC, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n    \n    tran.TOT_P   <- tran.1D(C = TOT_P, C.up = H2PO4_up, D = diff_coeffs$H2PO4, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n    \n    tran.TOT_N5  <- tran.1D(C = TOT_N5, C.up = NO3_up, D = diff_coeffs$NO3, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n    \n    tran.TOT_N3  <- tran.1D(C = TOT_N3, C.up = NH4_up, D = diff_coeffs$NH4, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n    \n    tran.TOT_S6  <- tran.1D(C = TOT_S6, C.up = SO4_up, D = diff_coeffs$SO4, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n    \n    tran.TOT_S2  <- tran.1D(C = TOT_S2, C.up = H2S_up, D = diff_coeffs$H2S, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n    \n    tran.CH4     <- tran.1D(C = CH4, C.up = CH4_up, D = diff_coeffs$CH4, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n\n    tran.O2      <- tran.1D(C = O2, C.up = O2_up, D = diff_coeffs$O2, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n    \n    tran.N2      <- tran.1D(C = N2, C.up = N2_up, D = diff_coeffs$N2, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n    \n    tran.Mn2     <- tran.1D(C = Mn2, C.up = Mn2_up, D = diff_coeffs$Mn2, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n    \n    tran.Fe2     <- tran.1D(C = Fe2, C.up = Fe2_up, D = diff_coeffs$Fe2, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n    \n    tran.MnO2    <- tran.1D(C = MnO2, flux.up = MnO2_up, D = diff_coeffs$solid, \n                            v = adv_vel$v, VF = grid.svf, dx = grid)\n    \n    tran.OM      <- tran.1D(C = OM, flux.up = OM_up, D = diff_coeffs$solid, \n                            v = adv_vel$v, VF = grid.svf, dx = grid)\n    \n    tran.FeOH3   <- tran.1D(C = FeOH3, flux.up = FeOH3_up, D = diff_coeffs$solid, \n                            v = adv_vel$v, VF = grid.svf, dx = grid)\n    \n    tran.FeOH3_P <- tran.1D(C = FeOH3_P, flux.up = FeOH3_P_up, D = diff_coeffs$solid, \n                            v = adv_vel$v, VF = grid.svf, dx = grid)\n    \n    tran.FeCO3   <- tran.1D(C = FeCO3, flux.up = FeCO3_up, D = diff_coeffs$solid, \n                            v = adv_vel$v, VF = grid.svf, dx = grid)\n    \n    \n    # calculate solute equilibrium species (solve the tableau)\n    if (solve_equilibrium) {\n      # 1) grep the solute total components; here we need TOT_H = - ALK\n      solute_totals <- c(-ALK, DIC, TOT_P, TOT_N5, TOT_N3, TOT_S6, TOT_S2)\n      # 2) solve tableau\n      solute_equilibrium  <- solve_tableau(solute_totals, tableau, logK, N_grid)\n      # 3) assign results\n      pH    <- -log10(solute_equilibrium$species_conc[,1] * 10^-3)\n      OH    <- solute_equilibrium$species_conc[,2]\n      H2CO3 <- solute_equilibrium$species_conc[,3]\n      HCO3  <- solute_equilibrium$species_conc[,4]\n      CO3   <- solute_equilibrium$species_conc[,5]\n      H3PO4 <- solute_equilibrium$species_conc[,6]\n      HPO4  <- solute_equilibrium$species_conc[,7]\n      PO4   <- solute_equilibrium$species_conc[,8]\n      HNO3  <- solute_equilibrium$species_conc[,9]\n      NO3   <- solute_equilibrium$species_conc[,10]\n      NH4   <- solute_equilibrium$species_conc[,11]\n      NH3   <- solute_equilibrium$species_conc[,12]\n      H2SO4 <- solute_equilibrium$species_conc[,13]\n      HSO4  <- solute_equilibrium$species_conc[,14]\n      SO4   <- solute_equilibrium$species_conc[,15]\n      H2S   <- solute_equilibrium$species_conc[,16]\n      HS    <- solute_equilibrium$species_conc[,17]\n      S2    <- solute_equilibrium$species_conc[,18]\n    } else {\n      solute_equilibrium <- NA\n    }\n    \n    \n    # Precipitation Reactions\n    if (precipitation & solve_equilibrium) {\n      omega_siderite <- (Fe2 * CO3) / Ksp_siderite\n    } else if (precipitation) {\n      omega_siderite <- (Fe2 * DIC * 0.0001) / Ksp_siderite # !!!\n    }\n    else {\n      omega_siderite <- rep(1, N_grid)\n    }\n    # Siderite: R7 = precipitation, R8 = dissolution\n    R7 <- ifelse(omega_siderite > 1, k_precip_siderite * (omega_siderite - 1)^2, 0)\n    R8 <- ifelse(omega_siderite < 1, k_diss_siderite * FeCO3 * (1 - omega_siderite)^2, 0)\n    \n    \n    # FeOH3 fractions\n    FeOH3_tot <- FeOH3 + FeOH3_P\n    chi <- rep(1, length(FeOH3))\n    ind_valid <- FeOH3_tot > 0\n    chi[ind_valid] <- FeOH3[ind_valid] / FeOH3_tot[ind_valid]\n    \n    # limitation & inhibition terms\n    L_O2    <- O2   / (K_O2 + O2)\n    I_O2    <- K_O2 / (K_O2 + O2)\n    \n    L_NO3   <- TOT_N5 / (K_NO3 + TOT_N5)\n    I_NO3   <- K_NO3 / (K_NO3 + TOT_N5)\n    \n    L_MnO2  <- MnO2   / (K_MnO2 + MnO2)\n    I_MnO2  <- K_MnO2 / (K_MnO2 + MnO2)\n    \n    L_FeOH3 <- FeOH3_tot / (K_FeOH3 + FeOH3_tot)\n    I_FeOH3 <- K_FeOH3 / (K_FeOH3 + FeOH3_tot)\n    \n    L_SO4   <- TOT_S6 / (K_SO4 + TOT_S6)\n    I_SO4   <- K_SO4 / (K_SO4 + TOT_S6)\n    \n    L_H3PO4 <- TOT_P   / (K_H3PO4 + TOT_P)\n    I_H3PO4 <- K_H3PO4 / (K_H3PO4 + TOT_P)\n    \n    # reaction rates\n    R1 <- k_alpha * OM * L_O2\n    R2 <- k_alpha * OM * L_NO3                            * I_O2\n    R3 <- k_alpha * OM * L_MnO2                   * I_NO3 * I_O2\n    R4 <- k_alpha * OM * L_FeOH3         * I_MnO2 * I_NO3 * I_O2\n    R5 <- k_alpha * OM * L_SO4 * I_FeOH3 * I_MnO2 * I_NO3 * I_O2\n    R6 <- k_alpha * OM * I_SO4 * I_FeOH3 * I_MnO2 * I_NO3 * I_O2\n    \n    # change of species concentration due to reactions\n    ## solutes step1: change of slow-reaction-species (srs), the ones for which\n    ## the reactions are formulated, according to reaction stoichiometry\n    R.srs_O2    <- - s2p * R1                   # OM Degradation\n    R.srs_CO2   <- (s2p * (R1 + R2 + R3 + R4 + R5 + 1/2 * R6)\n                    - s2p * R7 + s2p * R8)  # Siderite Precipitation / Dissolution\n    R.srs_NH3   <- OM_b * s2p * (R1 + R2 + R3 + R4 + R5 + R6)\n    R.srs_H3PO4 <- s2p * ( OM_c * (R1 + R2 + R3 + R5 + R6) +\n                      (OM_c + (1 - chi) * 4 * lambda) * R4 )\n    R.srs_HNO3  <- - 4/5 * s2p * R2\n    R.srs_N2    <- 2/5 * s2p * R2\n    R.srs_FeOH2 <- (4 * s2p * R4                # OM degradation\n                    - s2p * R7 + s2p * R8)  # Siderite Precipitation / Dissolution\n    R.srs_MnOH2 <- 2 * s2p * R3\n    R.srs_H2SO4 <- - 1/2 * s2p * R5\n    R.srs_H2S   <- 1/2 * s2p * R5\n    R.srs_CH4   <- 1/2 * s2p * R6\n    \n    ## solutes step2: change of tableau-components = model species\n    ## translation of change of slow-reaction-species to change of \n    ## tableau components using the translation table\n    ## here the component-total \"H\" is already converted to alkalinity (*-1)\n    R.ALK   <- -1 * (- R.srs_NH3 + R.srs_H3PO4 + R.srs_HNO3 - 2 * R.srs_FeOH2\n                     - 2 * R.srs_MnOH2 + 2 * R.srs_H2SO4)\n    R.DIC    <- R.srs_CO2\n    R.CH4    <- R.srs_CH4\n    R.TOT_P  <- R.srs_H3PO4\n    R.TOT_N5 <- R.srs_HNO3\n    R.TOT_N3 <- R.srs_NH3\n    R.TOT_S6 <- R.srs_H2SO4\n    R.TOT_S2 <- R.srs_H2S\n    R.O2     <- R.srs_O2\n    R.N2     <- R.srs_N2\n    R.Mn2    <- R.srs_MnOH2\n    R.Fe2    <- R.srs_FeOH2\n    \n    ## solids\n    R.OM <- - R1 - R2 - R3 - R4 - R5 - R6\n    R.MnO2 <- - 2 * R3\n    R.FeOH3 <- - 4 * chi * R4\n    R.FeOH3_P <- - 4 * (1 - chi) * R4\n    R.FeCO3 <- R7 - R8\n    \n    # total change in concentration of model species\n    dCdt.ALK    <- R.ALK + tran.ALK$dC\n    dCdt.DIC    <- R.DIC + tran.DIC$dC\n    dCdt.CH4    <- R.CH4 + tran.CH4$dC\n    dCdt.TOT_P  <- R.TOT_P + tran.TOT_P$dC\n    dCdt.TOT_N5 <- R.TOT_N5 + tran.TOT_N5$dC\n    dCdt.TOT_N3 <- R.TOT_N3 + tran.TOT_N3$dC\n    dCdt.N2     <- R.N2  + tran.N2$dC\n    dCdt.TOT_S6 <- R.TOT_S6 + tran.TOT_S6$dC\n    dCdt.TOT_S2 <- R.TOT_S2 + tran.TOT_S2$dC\n    dCdt.O2     <- R.O2 + tran.O2$dC\n    dCdt.Mn2    <- R.Mn2 + tran.Mn2$dC\n    dCdt.Fe2    <- R.Fe2 + tran.Fe2$dC\n    dCdt.OM     <- R.OM + tran.OM$dC\n    dCdt.MnO2   <- R.MnO2 + tran.MnO2$dC\n    dCdt.FeOH3  <- R.FeOH3 + tran.FeOH3$dC\n    dCdt.FeOH3_P <- R.FeOH3_P + tran.FeOH3_P$dC\n    dCdt.FeCO3  <- R.FeCO3 + tran.FeCO3$dC\n    \n    # characteristic time scales\n    # if dCdt.X = 0 -> timescale will be Inf\n    time_scales <- c(\n      ALK = ALK / dCdt.ALK,\n      DIC = DIC / dCdt.DIC,\n      CH4 = CH4 / dCdt.CH4,\n      TOT_P = TOT_P / dCdt.TOT_P,\n      TOT_N5 = TOT_N5 / dCdt.TOT_N5,\n      TOT_N3 = TOT_N3 / dCdt.TOT_N3,\n      N2 = N2 / dCdt.N2,\n      TOT_S6 = TOT_S6 / dCdt.TOT_S6,\n      TOT_S2 = TOT_S2 / dCdt.TOT_S2,\n      O2 = O2 / dCdt.O2,\n      Mn2 = Mn2 / dCdt.Mn2,\n      Fe2 = Fe2 / dCdt.Fe2,\n      OM = OM / dCdt.OM,\n      MnO2 = MnO2 / dCdt.MnO2,\n      FeOH3 = FeOH3 / dCdt.FeOH3,\n      FeOH3_P = FeOH3_P / dCdt.FeOH3_P,\n      FeCO3 = FeCO3 / dCdt.FeCO3\n    )\n    # but we need to take the absolute value to find the correct minimum\n    time_scales <- abs(time_scales)\n    # set NaN values to a number (???)\n    time_scales[is.na(time_scales)] <- 100\n    # set 0 to a small number\n    time_scales[time_scales == 0] <- 1e-10\n\n    return(\n      list(\n        c(\n          dCdt.ALK = dCdt.ALK,\n          dCdt.DIC = dCdt.DIC,\n          dCdt.TOT_P = dCdt.TOT_P,\n          dCdt.TOT_N5 = dCdt.TOT_N5,\n          dCdt.TOT_N3 = dCdt.TOT_N3,\n          dCdt.TOT_S6 = dCdt.TOT_S6,\n          dCdt.TOT_S2 = dCdt.TOT_S2,\n          dCdt.CH4 = dCdt.CH4,\n          dCdt.O2 = dCdt.O2,\n          dCdt.N2 = dCdt.N2,\n          dCdt.Mn2 = dCdt.Mn2,\n          dCdt.Fe2 = dCdt.Fe2,\n          dCdt.MnO2 = dCdt.MnO2,\n          dCdt.OM = dCdt.OM,\n          dCdt.FeOH3 = dCdt.FeOH3,\n          dCdt.FeOH3_P = dCdt.FeOH3_P,\n          dCdt.FeCO3 = dCdt.FeCO3\n        ),\n        transport = list(\n          tran.ALK = tran.ALK,\n          tran.DIC = tran.DIC,\n          tran.TOT_P = tran.TOT_P,\n          tran.TOT_N5 = tran.TOT_N5,\n          tran.TOT_N3 = tran.TOT_N3,\n          tran.TOT_S6 = tran.TOT_S6,\n          tran.TOT_S2 = tran.TOT_S2,\n          tran.CH4 = tran.CH4,\n          tran.O2 = tran.O2,\n          tran.N2 = tran.N2,\n          tran.Mn2 = tran.Mn2,\n          tran.Fe2 = tran.Fe2,\n          tran.MnO2 = tran.MnO2,\n          tran.OM = tran.OM,\n          tran.FeOH3 = tran.FeOH3,\n          tran.FeOH3_P = tran.FeOH3_P,\n          tran.FeCO3 = tran.FeCO3\n        ),\n        sumR = list(\n          R.ALK     = R.ALK * grid.por$mid,\n          R.DIC     = R.DIC * grid.por$mid,\n          R.TOT_P   = R.TOT_P * grid.por$mid,\n          R.TOT_N5  = R.TOT_N5 * grid.por$mid,\n          R.TOT_N3  = R.TOT_N3 * grid.por$mid,\n          R.TOT_S6  = R.TOT_S6 * grid.por$mid,\n          R.TOT_S2  = R.TOT_S2 * grid.por$mid,\n          R.CH4     = R.CH4 * grid.por$mid,\n          R.O2      = R.O2 * grid.por$mid,\n          R.N2      = R.N2 * grid.por$mid,\n          R.Mn2     = R.Mn2 * grid.por$mid,\n          R.Fe2     = R.Fe2 * grid.por$mid,\n          R.MnO2    = R.MnO2 * grid.svf$mid,\n          R.OM      = R.OM * grid.svf$mid,\n          R.FeOH3   = R.FeOH3 * grid.svf$mid,\n          R.FeOH3_P = R.FeOH3_P * grid.svf$mid,\n          R.FeCO3   = R.FeCO3 * grid.svf$mid\n        ),\n        rates = list(\n          R1 = R1 * grid.svf$mid,\n          R2 = R2 * grid.svf$mid,\n          R3 = R3 * grid.svf$mid,\n          R4 = R4 * grid.svf$mid,\n          R5 = R5 * grid.svf$mid,\n          R6 = R6 * grid.svf$mid,\n          R7 = R7 * grid.svf$mid,\n          R8 = R8 * grid.svf$mid\n        ),\n        solute_equilibrium = solute_equilibrium,\n        time_scales = time_scales,\n        omega_siderite = omega_siderite,\n        timescale_Fe2 = Fe2 / dCdt.Fe2,\n        dCdt_Fe2 = dCdt.Fe2\n      )\n    )\n })\n}\n```\n\n\n## Solve Model\n\n### 1) Steady State\n\nSteady State is found in a two step procedure:\n\n1) Solve steady state without equilibrium solver. All reactions are controlled by component-totals. If necessary, pH dependent speciation is estiamted based on **???**\n2) Solve steady state with equilibrium solver. All reaction now are controlled by the actual concentrations.\n\n```{r std1}\n#| echo: true\n\ninitial <- rep(1e-4, N_grid * N_species)\n\nstd1 <- steady.1D(\n  y = initial,\n  func = model,\n  parms = parameter, \n  dimens = N_grid,\n  nspec = N_species,\n  names = model_species,\n  positive = TRUE,\n  method = \"stodes\",\n  diff_coeffs = diffusion_coefficients,\n  adv_vel = advective_velocities,\n  solve_equilibrium = FALSE,\n  precipitation = TRUE\n)\n```\n\n```{r std2}\n#| echo: true\n\nstd2 <- steady.1D(\n  y = std1$y,\n  func = model,\n  parms = parameter,\n  dimens = N_grid,\n  nspec = N_species,\n  names = model_species,\n  positive = TRUE,\n  method = \"stode\", # stode gives back result, even if steady state is not reached; stodes does not return internediate result\n  maxiter = 100,\n  diff_coeffs = diffusion_coefficients,\n  adv_vel = advective_velocities,\n  solve_equilibrium = TRUE,\n  precipitation = TRUE\n)\n```\n\n\n#### Profiles: Component-Totals\n\n```{r plot std2}\n#| column: screen-inset\n#| layout-ncol: 5\n#| fig.height: 3.5\n#| fig.width: 3.5\n\nplot_std_profiles(std2)\n```\n\n#### Profiles: Speciation\n\n```{r plot std2 speciation}\n#| column: screen-inset\n#| layout-ncol: 3\n#| fig.width: 6\n\nspeciation <- std2$solute_equilibrium$species_conc\ncolnames(speciation) <- tableau_species\n\nrcols <- viridis::viridis(6)\n\nmatplot(y=grid$x.mid, x = speciation[,3:5],\n        type=\"l\", lwd=2, lty=1,\n        ylim=c(length,0), \n        col=c(rcols[3], rcols[6], rcols[1]),\n        ylab=\"depth (m)\", \n        xlab=\"mol/m3_phase\"\n        )\nlegend(\n  x = \"topright\",\n  legend = c(\"H2CO3\", \"HCO3\", \"CO3\"),\n  lty = 1,\n  col = c(rcols[3], rcols[6], rcols[1]),\n  lwd = 2\n)\n\nmatplot(y=grid$x.mid, x = speciation[,6:9],\n        type=\"l\", lwd=2, lty=1,\n        ylim=c(length,0), \n        col=c(rcols[3], rcols[6], rcols[1], rcols[4]),\n        ylab=\"depth (m)\", \n        xlab=\"mol/m3_phase\"\n        )\nlegend(\n  x = \"topright\",\n  legend = c(\"H3PO4\", \"H2PO4-\", \"HPO42-\", \"PO43-\"),\n  lty = 1,\n  col = c(rcols[3], rcols[6], rcols[1], rcols[4]),\n  lwd = 2\n)\n\nmatplot(y=grid$x.mid, x = speciation[,10:11],\n        type=\"l\", lwd=2, lty=1,\n        ylim=c(length,0), \n        col=c(rcols[3], rcols[6]),\n        ylab=\"depth (m)\", \n        xlab=\"mol/m3_phase\"\n        )\nlegend(\n  x = \"topright\",\n  legend = c(\"HNO3\", \"NO3-\"),\n  lty = 1,\n  col = c(rcols[3], rcols[6]),\n  lwd = 2\n)\n\nmatplot(y=grid$x.mid, x = speciation[,12:13],\n        type=\"l\", lwd=2, lty=1,\n        ylim=c(length,0), \n        col=c(rcols[3], rcols[6]),\n        ylab=\"depth (m)\", \n        xlab=\"mol/m3_phase\"\n        )\nlegend(\n  x = \"topright\",\n  legend = c(\"NH4+\", \"NH3\"),\n  lty = 1,\n  col = c(rcols[3], rcols[6]),\n  lwd = 2\n)\n\nmatplot(y=grid$x.mid, x = speciation[,14:16],\n        type=\"l\", lwd=2, lty=1,\n        ylim=c(length,0), \n        col=c(rcols[3], rcols[6], rcols[1]),\n        ylab=\"depth (m)\", \n        xlab=\"mol/m3_phase\"\n        )\nlegend(\n  x = \"topright\",\n  legend = c(\"H2SO4\", \"HSO4-\", \"SO42-\"),\n  lty = 1,\n  col = c(rcols[3], rcols[6], rcols[1]),\n  lwd = 2\n)\n\nmatplot(y=grid$x.mid, x = speciation[,17:19],\n        type=\"l\", lwd=2, lty=1,\n        ylim=c(length,0), \n        col=c(rcols[3], rcols[6], rcols[1]),\n        ylab=\"depth (m)\", \n        xlab=\"mol/m3_phase\"\n        )\nlegend(\n  x = \"topright\",\n  legend = c(\"H2S\", \"HS-\", \"S2-\"),\n  lty = 1,\n  col = c(rcols[3], rcols[6], rcols[1]),\n  lwd = 2\n)\n```\n\n#### Profile: pH\n\n```{r plot pH}\n#| out.width: 100%\n\npH <- -log10(speciation[,1] * 10^-3) # mol/m3 * 10^-3 m3/L\nplot(grid$x.mid ~ pH, ylim = c(0.1, 0), type = \"l\", ylab = \"depth (m)\", lwd = 2)\n```\n\n#### Profiles: Saturation\n\n```{r plot saturation}\n#| out.width: 100%\n\nrcols <- viridis::viridis(2)\n\nomega_siderite <- speciation[,\"CO3\"] * std1$y[, \"Fe2\"] / parameter$Ksp_siderite\n\nplot(\n    x = std2$omega_siderite,\n    y = grid$x.mid,\n    ylim = c(max(grid$x.int), min(grid$x.int)),\n    type = \"l\",\n    lwd = 2,\n    col = rcols[1],\n    xlab = \"omega siderite\",\n    ylab = \"depth (m)\",\n    log = \"x\"\n  )\n```\n\n#### Profiles: Reaction Rates\n\n##### OM Degradation\n```{r plot rates OM Degradation}\n#| out.width: 100%\n\nplot_std_rates(std2, c(\"R1\", \"R2\", \"R3\", \"R4\", \"R5\", \"R6\"))\n```\n\n##### Siderite Precipitation\n```{r plot rates Siderite Precip}\n#| out.width: 100%\n\nplot_std_rates(std2, c(\"R7\", \"R8\"))\n```\n\n\n## Mass Balances\n\n### Species-based Mass Balances\n\nThe change in concentration of a species $i$, integrated over depth and in relation to the area $A$ is\n\n$$\\frac{dC_{A,i}}{dt} \\; \\left( \\frac{mol}{m^2 \\cdot a} \\right) = J(a)_i - J(b)_i + \\int_{a}^b \\Psi \\sum R_i$$\n\nwith\n\n- $J(a)_i$: flux of species $i$ across upper boundary\n- $J(b)_i$: flux of species $i$ across lower boundary\n- $\\Psi$: volume fraction.\n\n```{r std species-based mass balances}\n#| echo: true\n#| code-fold: true\n\nspecies_mass_balance <- function(species_vector, std, grid) {\n  \n  species_mass_balance_inner <- function(species, std, grid) {\n  \n    tran.species <- paste0(\"tran.\", species)\n    flux_up   <- std$transport[[tran.species]]$flux.up\n    flux_down <- std$transport[[tran.species]]$flux.down\n    netto_flux <- flux_up - flux_down\n    \n    R.species <- paste0(\"R.\", species)\n    sumR_integrated <- sum(std$sumR[[R.species]] * grid$dx)\n    \n    bilanz <- netto_flux + sumR_integrated\n    \n    return(data.frame(\n      species = species,\n      flux_up = flux_up,\n      flux_down = flux_down,\n      netto_flux = netto_flux,\n      sumR_integrated = sumR_integrated,\n      bilanz = bilanz\n    ))\n  }\n  \n  species_based_mass_balance <- data.frame(\n  \"Species\" = NULL,\n  \"Flux up\" = NULL,\n  \"Flux down\" = NULL,\n  \"Netto Flux\" = NULL,\n  \"Integral Sum R\" = NULL,\n  \"Bilanz\" = NULL\n  )\n  \n  for (species in species_vector) {\n    species_based_mass_balance <- rbind(\n      species_based_mass_balance,\n      species_mass_balance_inner(species, std, grid)\n    )\n  }\n  \n  return(species_based_mass_balance)\n}\n\nspecies_mass_balance_std1 <- species_mass_balance(model_species, std1, grid)\nspecies_mass_balance_std2 <- species_mass_balance(model_species, std2, grid)\n```\n\n```{r print species based mass balances}\nknitr::kable(\n  species_mass_balance_std1,\n  caption = \"std1\",\n  digits = 20,\n  format.args = list(format = \"e\", digits = 2)\n)\nknitr::kable(\n  species_mass_balance_std2,\n  caption = \"std2\",\n  digits = 20,\n  format.args = list(format = \"e\", digits = 2)\n)\n```\n\n\n### Element-based Mass Balances\n\nThe total amount of an chemical element $e$ is not influenced by chemical reactions.\nTherefore, the over the depth integrated and summed up reaction rates of of species $i$ that contain a chemical element is 0.\n\n$$\\sum \\left[ \\frac{e}{i} \\cdot \\int_{a}^b \\Psi \\sum R_i \\right]_e = 0$$\n\nFrom this follows, that under stationary conditions the flux in and out of the sediment domain cancel out.\n\n$$\\frac{dC_{A,e}}{dt} \\; \\left( \\frac{mol}{m^2 \\cdot a} \\right) = J(a)_e - J(b)_e = 0$$\n\n**Elemental Composition of Model-Species**\n```{r elemental composition}\n\nelemental_composition <- list(\n  C = data.frame(\n    species = c(\"DIC\", \"CH4\", \"OM\", \"FeCO3\"),\n    stoic   = c(1, 1, 1, 1)\n  ),\n  N = data.frame(\n    species = c(\"TOT_N5\", \"TOT_N3\", \"N2\", \"OM\"),\n    stoic   = c(1, 1, 2, reaction_parameter[[\"OM_b\"]])\n  ),\n  P = data.frame(\n    species = c(\"TOT_P\", \"OM\", \"FeOH3_P\"),\n    stoic   = c(1, reaction_parameter[[\"OM_c\"]], reaction_parameter[[\"lambda\"]])\n  ),\n  S = data.frame(\n    species = c(\"TOT_S6\", \"TOT_S2\"),\n    stoic   = c(1, 1)\n  ),\n  Fe = data.frame(\n    species = c(\"Fe2\", \"FeOH3\", \"FeOH3_P\", \"FeCO3\"),\n    stoic   = c(1, 1, 1, 1)\n  ),\n  Mn = data.frame(\n    species = c(\"Mn2\", \"MnO2\"),\n    stoic   = c(1, 1)\n  )\n)\n```\n\n```{r print elemental composition}\n#| layout-ncol: 3\n#| results: \"asis\"\n\nfor (i in seq_len(length(elemental_composition))) {\n  print(knitr::kable(\n    elemental_composition[[i]],\n    caption = names(elemental_composition[i]),\n    digits = 5,\n    valign = \"t\",\n    booktabs = TRUE\n  ))\n}\n```\n\n```{r element based mass balance}\n#| echo: true\n#| code-fold: true\n\nelement_mass_balance <- function(elemental_composition, std, grid) {\n  \n  species_sumR_integrated <- function(species, std, grid) {\n    \n    R.species <- paste0(\"R.\", species)\n    sumR_integrated <- sum(std$sumR[[R.species]] * grid$dx)\n    \n    return(sumR_integrated)\n  }\n\n  species_boundary_fluxes <- function(species, std, grid) {\n  \n    tran.species <- paste0(\"tran.\", species)\n    flux_up   <- std$transport[[tran.species]]$flux.up\n    flux_down <- std$transport[[tran.species]]$flux.down\n    \n    return(list(\n      flux_up = flux_up,\n      flux_down = flux_down\n    ))\n  }\n\n  elements <- names(elemental_composition)\n  \n  overview <- data.frame(\n    \"Element\" = NULL,\n    \"Netto Flux\" = NULL,\n    \"Integral Sum R\" = NULL\n  )\n\n  detailed <- list()\n  \n  for (element in elements) {\n\n    composition <- elemental_composition[[element]]\n\n    detailed_part <- data.frame(\n      \"Species\" = NULL,\n      \"Flux up\" = NULL,\n      \"Flux down\" = NULL,\n      \"Intergal Sum R\" = NULL\n    )\n\n    # for every species in which an element is present ...\n    for (i in seq_len(nrow(composition))) {\n      species <- composition$species[i]\n      stoic   <- composition$stoic[i]\n\n      sumR <- species_sumR_integrated(species, std, grid) * stoic\n\n      boundary_fluxes <- species_boundary_fluxes(species, std, grid)\n      flux_up <- boundary_fluxes$flux_up * stoic\n      flux_down <- boundary_fluxes$flux_down * stoic\n\n      detailed_part <- rbind(\n        detailed_part,\n        data.frame(\n          \"Species\" = species,\n          \"Flux up\" = flux_up,\n          \"Flux down\" = flux_down,\n          \"Integral Sum R\" = sumR\n        )\n      )\n    }\n\n    detailed[[element]] <- detailed_part\n\n    net_flux <- sum(detailed_part[[\"Flux.up\"]]) - sum(detailed_part[[\"Flux.down\"]])\n    net_rate <- sum(detailed_part[[\"Integral.Sum.R\"]])\n\n    overview <- rbind(\n      overview,\n      data.frame(\n        \"Element\" = element,\n        \"Netto Flux\" = net_flux,\n        \"Integral Sum R\" = net_rate\n      )\n    )\n  }\n  \n  return(list(\n    overview = overview,\n    detailed = detailed\n  ))\n}\n\nelement_mass_balance_std1 <- element_mass_balance(elemental_composition, std1, grid)\nelement_mass_balance_std2 <- element_mass_balance(elemental_composition, std2, grid)\n```\n\n```{r print element based mass balances}\n#| layout-ncol: 2\n\nknitr::kable(\n  element_mass_balance_std1$overview,\n  caption = \"std1\",\n  digits = 20,\n  format.args = list(format = \"e\", digits = 2),\n  valign = \"t\"\n)\nknitr::kable(\n  element_mass_balance_std2$overview,\n  caption = \"std2\",\n  digits = 20,\n  format.args = list(format = \"e\", digits = 2),\n  valign = \"t\"\n)\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"toc-depth":4,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","theme":"flatly","toc-location":"left","toc-title":" ","grid":{"body-width":"1200px","sidebar-width":"380px","margin-width":"340px"},"title":"Fe Treatment Model","bibliography":["FeTreatment.bib"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}