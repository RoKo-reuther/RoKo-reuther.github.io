[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Fe Treatment Model",
    "section": "",
    "text": "Reactions affect solute and solid model species differently.\nThe solid model species are the same occurring in the chemical reaction equations. Therefore they are affected directly according to the reaction stoichiometry.\nSolute model species are either component-totals (e.g. DIC, TOT_P, …) to be speciated later or species on their own (e.g. O2, CH4). The effect of reactions on solute species is first formulated for the species occurring in the chemical reaction equations according to the reaction stoichiometry. In a second step this changes are translated to changes of the component-totals / model species using a translation table.\n\n\n\nFor solutes the (probably) dominant species of a component-total governs the diffusion coefficient (cf code-block “Diffusion Coefficients”). The transport of solids is not affected by species properties."
  },
  {
    "objectID": "index.html#concept",
    "href": "index.html#concept",
    "title": "Fe Treatment Model",
    "section": "",
    "text": "Reactions affect solute and solid model species differently.\nThe solid model species are the same occurring in the chemical reaction equations. Therefore they are affected directly according to the reaction stoichiometry.\nSolute model species are either component-totals (e.g. DIC, TOT_P, …) to be speciated later or species on their own (e.g. O2, CH4). The effect of reactions on solute species is first formulated for the species occurring in the chemical reaction equations according to the reaction stoichiometry. In a second step this changes are translated to changes of the component-totals / model species using a translation table.\n\n\n\nFor solutes the (probably) dominant species of a component-total governs the diffusion coefficient (cf code-block “Diffusion Coefficients”). The transport of solids is not affected by species properties."
  },
  {
    "objectID": "index.html#reactions-describing-om-decomposition",
    "href": "index.html#reactions-describing-om-decomposition",
    "title": "Fe Treatment Model",
    "section": "Reactions Describing OM Decomposition",
    "text": "Reactions Describing OM Decomposition\n\nOM Composition\n\\(\\ce{(CH2O)_a (NH3)_b (H3PO4)_c}\\)\n\n\\(a = 1\\)\n\\(b = 16/106\\)\n\\(c = 1/106\\)\n\n\n\nRate Constants\n\n\\(k_{\\alpha} = 0.05 - 1.62 \\: yr^{-1}\\) (Moodley et al. 2005; Tromp, Van Cappellen, and Key 1995)\n\\(k_{\\beta} = 0.025 - 0.0086 \\: yr^{-1}\\) (Tromp, Van Cappellen, and Key 1995)\n\n\n\nLimitation (L) and Inihibition (I) Terms\n\nO2\n\\(L_{\\ce{O2}} = \\frac{[\\ce{O2}]}{K_{\\ce{O2}} + [\\ce{O2}]}\\)\n\\(I_{\\ce{O2}} = \\frac{K_{\\ce{O2}}}{K_{\\ce{O2}} + [\\ce{O2}]}\\)\nwith \\(K_{O2} = 0.001 - 0.03 \\: mol \\: m^{-3}_{pw}\\) (Wang and Van Cappellen 1996)\n\n\nNO3-\n\\(L_{\\ce{NO3^-}} = \\frac{[\\ce{NO3^-}]}{K_{\\ce{NO3-}} + [\\ce{NO3^-}]}\\)\n\\(I_{\\ce{NO3^-}} = \\frac{K_{\\ce{NO3^-}}}{K_{\\ce{NO3^-}} + [\\ce{NO3^-}]}\\)\nwith \\(K_{NO3-} = 0.004 - 0.08 \\: mol \\: m^{-3}_{pw}\\) (Wang and Van Cappellen 1996)\n\n\nMnO2\n\\(L_{\\ce{MnO2^{\\alpha}}} = \\frac{[\\ce{MnO2^{\\alpha}}]}{K_{\\ce{MnO2}} + [\\ce{MnO2^{\\alpha}}]}\\)\n\\(I_{\\ce{MnO2^{\\alpha}}} = \\frac{K_{\\ce{MnO2}}}{K_{\\ce{MnO2}} + [\\ce{MnO2^{\\alpha}}]}\\)\nwith \\(K_{\\ce{MnO2^{\\alpha}}} = \\{0.004 - 0.032\\} \\: mol \\: {kg}^{-1} \\cdot \\rho_{dry}\\) (Wang and Van Cappellen 1996)\n\n\nFe(OH)3\n\\(L_{\\ce{Fe(OH)3_{; tot}^\\alpha}} = \\frac{[\\ce{Fe(OH)3_{; tot}^\\alpha}]}{K_{\\ce{Fe(OH)3}} + [\\ce{Fe(OH)3_{; tot}^\\alpha}]}\\)\n\\(I_{\\ce{Fe(OH)3^\\alpha}} = \\frac{K_{\\ce{Fe(OH)3}}}{K_{\\ce{Fe(OH)3}} + [\\ce{Fe(OH)3_{; tot}^\\alpha}]}\\)\nwith \\(K_{\\ce{FeOH3}} = \\{0.065 - 0.1\\} \\: mol \\: {kg}^{-1} \\cdot \\rho_{dry}\\) (Wang and Van Cappellen 1996)\n\n\nSO42-\n\\(L_{\\ce{SO4^{2-}}} = \\frac{[\\ce{SO4^{2-}}]}{K_{\\ce{SO4^{2-}}} + [\\ce{SO4^{2-}}]}\\)\n\\(I_{\\ce{SO4^{2-}}} = \\frac{K_{\\ce{SO4^{2-}}}}{K_{\\ce{SO4^{2-}}} + [\\ce{SO4^{2-}}]}\\)\nwith \\(K_{SO42-} = 0.0016 \\: mol \\: {m^{-3}_{pw}}\\) (Wang and Van Cappellen 1996)\n\n\nH3PO4\n\\(L_{\\ce{H3PO4}} = \\frac{[\\ce{H3PO4}]}{K_{\\ce{H3PO4}} + [\\ce{H3PO4}]}\\)\nwith \\(K_{\\ce{H3PO4}} = 10^{-5} \\: mol \\: m^{-3}_{pw}\\) (Reinier)\n\nformulated for lump sum\n\n\n\n\nFeOH3 Fractions\n\\(\\ce{Fe(OH)3_{; tot}^\\alpha} = \\ce{Fe(OH)3^{\\alpha}} + \\ce{Fe(OH)3^\\alpha(H3PO4)_{\\lambda}}\\) with \\(\\lambda = 0.6\\)\n\\(\\chi = \\frac{[\\ce{Fe(OH)3^{\\alpha}}]}{[\\ce{Fe(OH)3_{; tot}^\\alpha}]}\\)\n\n\nReactions\n\nOM + O2 (R1)\n\\(\\ce{OM^{\\alpha, \\beta} + O2 -&gt; CO2 + b NH3 + c H3PO4 + H2O}\\)\n\\(R = k_{\\alpha, \\beta} \\: OM^{\\alpha, \\beta} \\: L_{\\ce{O2}}\\)\n\n\nOM + HNO3 (R2)\n\\(\\ce{OM^{\\alpha, \\beta} + 4/5 HNO3 -&gt; CO2 + b NH3 + c H3PO4 + 2/5 N2 + 7/5 H2O}\\)\n\\(R = k_{\\alpha, \\beta} \\: OM^{\\alpha, \\beta} \\: L_{\\ce{NO3-}} \\: I_{\\ce{O2}}\\)\n\n\nOM + MnO2 (R3)\n\\(\\ce{OM^{\\alpha, \\beta} + 2 MnO2 + H2O -&gt; CO2 + b NH3 + c H3PO4 + 2 Mn(OH)2}\\)\n\\(R = k_{\\alpha, \\beta} \\: OM^{\\alpha, \\beta} \\: L_{\\ce{MnO2}^\\alpha} \\: I_{\\ce{NO3^-}} \\: I_{\\ce{O2}}\\)\n\n\nOM + FeOH3 / FeOH3~H3PO4 (R4)\n\\(\\ce{OM^{\\alpha, \\beta} + 4 (\\chi Fe(OH)3^{\\alpha} + (1 - \\chi) Fe(OH)3^\\alpha(H3PO4)_{\\lambda} ) -&gt; CO2 + b NH3 + (c + (1- \\chi) 4 \\lambda) H3PO4 + 4 Fe(OH)2 + 3 H2O}\\)\n\\(R = k_{\\alpha, \\beta} \\: OM^{\\alpha, \\beta} \\: L_{\\ce{Fe(OH)3_{; tot}^\\alpha}} \\: I_{\\ce{MnO2^{\\alpha}}} \\: I_{\\ce{NO3^-}} \\: I_{\\ce{O2}}\\)\n\n\nOM + H2SO4 (R5)\n\\(\\ce{OM^{\\alpha, \\beta} + 1/2 H2SO4 -&gt; CO2 + b NH3 + c H3PO4 + 1/2 H2S + H2O}\\)\n\\(R = k_{\\alpha, \\beta} \\: OM^{\\alpha, \\beta} \\: L_{\\ce{SO4^{2-}}} \\: I_{\\ce{Fe(OH)3^\\alpha}} \\: I_{\\ce{MnO2^{\\alpha}}} \\: I_{\\ce{NO3^-}} \\: I_{\\ce{O2}}\\)\n\n\nMethanogenesis (R6)\n\\(\\ce{OM^{\\alpha, \\beta} -&gt; 1/2 CO2 + b NH3 + c H3PO4 + 1/2 CH4}\\)\n\\(R = k_{\\alpha, \\beta} \\: OM^{\\alpha, \\beta} \\: I_{\\ce{SO4^{2-}}} \\: I_{\\ce{Fe(OH)3^\\alpha}} \\: I_{\\ce{MnO2^{\\alpha}}} \\: I_{\\ce{NO3^-}} \\: I_{\\ce{O2}}\\)"
  },
  {
    "objectID": "index.html#precipitation-reactions",
    "href": "index.html#precipitation-reactions",
    "title": "Fe Treatment Model",
    "section": "Precipitation Reactions",
    "text": "Precipitation Reactions\n\nSiderite\nIn general:\n\\(\\ce{FeCO3 &lt;-&gt; Fe^{2+} + CO3^{2-}}\\)\nIn our model:\n\\(\\ce{FeCO3 + 2 H2O &lt;-&gt; Fe(OH)2 + H2CO3}\\)\nPrecipitation and Dissolution are split in two reactions from which only one is active at a time, depending on the saturation state \\(\\Omega\\).\n\\(\\Omega = \\frac{\\ce{[Fe^{2+}]} \\cdot \\ce{[CO3^{2-}]}}{K_{sp; siderite}} \\quad\\) with \\(\\quad K_{sp; siderite} = 10^{-10.4} \\; mol^2 \\; m^{-6}\\)\nIf \\(\\: \\Omega &gt; 1\\):\n\n\\(R_{precipitation} = k_{precip} \\cdot (\\Omega - 1) \\quad\\) with \\(\\quad k_{precip} \\approx 1 \\times 10^{-3} \\; mol \\; {m_{pw}}^{-3} \\; yr^{-1}\\)\n\\(R_{dissolution} = 0\\)\n\nIf \\(\\: \\Omega &lt; 1\\):\n\n\\(R_{precipitation} = 0\\)\n\\(R_{dissolution} = - k_{diss} \\cdot \\ce{[FeCO3]} \\cdot (\\Omega - 1) \\quad\\) with \\(\\quad k_{diss} \\approx 1 \\times 10^{-2} \\; yr^{-1}\\)"
  },
  {
    "objectID": "index.html#equilibrium-reactions-described-via-tableau",
    "href": "index.html#equilibrium-reactions-described-via-tableau",
    "title": "Fe Treatment Model",
    "section": "Equilibrium Reactions described via Tableau",
    "text": "Equilibrium Reactions described via Tableau\nThe Tableau is used to calculate equilibrium speciation of solute species after model run. Fast equilibrium reactions are neglected during model runtime (so far).\n\n\n\n\n\nSpecies\nH2O\nH\nH2CO3\nH2PO4\nNO3\nNH4\nSO4\nH2S\nlogK\n\n\n\n\nH2O\n1\n\n\n\n\n\n\n\n0.00\n\n\nH\n\n1\n\n\n\n\n\n\n0.00\n\n\nOH\n1\n-1\n\n\n\n\n\n\n-8.00\n\n\nH2CO3\n\n\n1\n\n\n\n\n\n0.00\n\n\nHCO3\n\n-1\n1\n\n\n\n\n\n-3.35\n\n\nCO3\n\n-2\n1\n\n\n\n\n\n-10.68\n\n\nH3PO4\n\n1\n\n1\n\n\n\n\n-0.84\n\n\nH2PO4\n\n\n\n1\n\n\n\n\n0.00\n\n\nHPO4\n\n-1\n\n1\n\n\n\n\n-4.21\n\n\nPO4\n\n-2\n\n1\n\n\n\n\n-13.53\n\n\nHNO3\n\n1\n\n\n1\n\n\n\n-4.37\n\n\nNO3\n\n\n\n\n1\n\n\n\n0.00\n\n\nNH4\n\n\n\n\n\n1\n\n\n0.00\n\n\nNH3\n\n-1\n\n\n\n1\n\n\n-6.25\n\n\nH2SO4\n\n2\n\n\n\n\n1\n\n-7.10\n\n\nHSO4\n\n1\n\n\n\n\n1\n\n-1.10\n\n\nSO4\n\n\n\n\n\n\n1\n\n0.00\n\n\nH2S\n\n\n\n\n\n\n\n1\n0.00\n\n\nHS\n\n-1\n\n\n\n\n\n1\n-4.00\n\n\nS(2-)\n\n-2\n\n\n\n\n\n1\n-15.00"
  },
  {
    "objectID": "index.html#functions",
    "href": "index.html#functions",
    "title": "Fe Treatment Model",
    "section": "Functions",
    "text": "Functions\n\nSolve Tableau\n\n\nCode\nsolve_tableau &lt;- function(component_total, tableau, logK, N_grid) {\n  \n  # load shared object\n  dyn.load(\"solve_tableau.so\")\n\n  return(.Fortran(\"solve_tableau\",\n                  component_total = as.double(component_total),\n                  tableau         = matrix(as.double(tableau), ncol = ncol(tableau)),\n                  logK            = as.double(logK),\n                  N_components    = as.integer(ncol(tableau)),\n                  N_species       = as.integer(nrow(tableau)),\n                  N_grid          = as.integer(N_grid),\n                  iter_pcfm       = rep(as.integer(0), N_grid),\n                  iter_newton     = rep(as.integer(0), N_grid),\n                  info_newton     = rep(as.integer(0), N_grid),\n                  difference      = matrix(as.double(0), ncol = ncol(tableau), nrow = N_grid),\n                  species_conc    = matrix(as.double(0), ncol = nrow(tableau), nrow = N_grid),\n                  success         = rep(as.integer(0), N_grid)\n                  )\n  )\n  \n}\n\n\n\n\nPlot steady.1D results\n\n\nCode\nplot_std_profiles &lt;- function(std) {\n  \n  plot(std, xyswap = TRUE, xlab = \"mol/m3_phase\", ylab = \"depth (m)\",\n       grid = grid$x.mid,\n       which = model_species,\n       lwd = 2,\n       cex = 1.5,\n       mfrow = c(1,1)\n  )\n}\n\nplot_std_rates &lt;- function(std) {\n  \n  # rcols &lt;- viridis::viridis(length(std$rates))\n  # \n  # matplot(y = grid$x.mid,\n  #         x = as.data.frame(std$rates),\n  #         type = \"l\", lwd=2, lty=1,\n  #         ylim = c(length,0), \n  #         col = rcols,\n  #         ylab=\"depth (m)\", \n  #         xlab=\"reaction rate (mol/(m3_bulk yr))\")\n  # \n  # legend(\n  #   x = \"bottomright\",\n  #   legend = names(std$rates),\n  #   lty = 1,\n  #   col = rcols &lt;- viridis::viridis(length(std$rates)),\n  #   lwd = 2\n  # )\n  \n  data &lt;- as.data.frame(std$rates)\n  data$depth &lt;- grid$x.mid\n  \n  fig &lt;- plot_ly(data, type = 'scatter', mode = 'lines', line = list(width = 3))\n  for (rate in names(std$rates)) {\n    fig &lt;- fig %&gt;% add_trace(y = ~depth, x = std$rates[[rate]], name = rate)\n  }\n  fig &lt;- fig %&gt;% layout(\n    xaxis = list(title = \"reaction rate (mol/(m3_bulk yr))\"),\n    yaxis = list(title = \"depth (m)\", range = c(length,0))\n  )\n    \n  fig\n}\n\nplot_omega &lt;- function(std) {\n  plot(\n    x = std$omega_siderite,\n    y = grid$x.mid,\n    ylim = c(max(grid$x.int), min(grid$x.int)),\n    type = \"l\",\n    lwd = 2,\n    xlab = \"omega siderite\",\n    ylab = \"depth (m)\",\n    log = \"x\"\n  )\n}\n\n\n\n\nPlot Runge-Kutta results\n\n\nCode\nplot_std_conc_evolution &lt;- function(std_matrix_list, selection, N_lines, grid) {\n  \n  data &lt;- std_matrix_list[[selection]]\n  \n  # number of available timesteps\n  available_timesteps &lt;- ncol(data)\n  \n  # selection of N_lines timesteps\n  selected_timesteps &lt;- floor(seq.int(1, available_timesteps, length.out = N_lines))\n  \n  # reduce data\n  data &lt;- data[,selected_timesteps]\n  \n  # plot\n  matplot(y = grid$x.mid,\n          x = data,\n          type = \"l\",\n          ylim = c(max(grid$x.mid), min(grid$x.mid)),\n          xlab = \"concentration (mol/m^3_phase)\",\n          ylab = \"depth (m)\",\n          main = selection)\n}\n\nplot_std_rate_evolution &lt;- function(std, selection, N_lines) {\n  \n  data &lt;- std$rates_split[[selection]]\n  \n  # number of available depths\n  available_depths &lt;- nrow(data)\n  \n  # selection of N_lines depths\n  selected_depths &lt;- floor(seq.int(1, available_depths, length.out = N_lines))\n  \n  # reduce data\n  data &lt;- data[selected_depths,]\n  \n  # plot\n  matplot(x = std$times,\n          y = t(data),\n          type = \"l\",\n          ylab = \"rate (mol/(m^3_phase * yr))\",\n          xlab = \"time (a)\",\n          main = selection)\n}"
  },
  {
    "objectID": "index.html#model-setup",
    "href": "index.html#model-setup",
    "title": "Fe Treatment Model",
    "section": "Model Setup",
    "text": "Model Setup\n\nGrid\n\nlength   &lt;- 0.1 # (m)\nN_grid   &lt;- 400 # (-)\n\ngrid     &lt;- setup.grid.1D(L = length, N = N_grid, dx.1=0.0005)\n\n\n\nPorosity / Solid Volume Fraction\n\nporFun.L  &lt;- function(x, por.SWI, por.deep, porcoef) {\n  return( por.deep + (por.SWI-por.deep) * exp(-x*porcoef) ) \n}\n\nporFun.S  &lt;- function(x, por.SWI, por.deep, porcoef) {\n  return( 1 - porFun.L(x, por.SWI, por.deep, porcoef) ) \n}\n\npor.swi  &lt;- 0.8\npor.deep &lt;- 0.8\n\ngrid.por &lt;- setup.prop.1D(func = porFun.L, grid = grid, por.SWI = por.swi,\n                           por.deep=por.deep, porcoef=100)\n\ngrid.svf  &lt;- setup.prop.1D(func = porFun.S, grid = grid, por.SWI = por.swi,\n                           por.deep=por.deep, porcoef=100)\n\nconversion_factors &lt;- list(\n  s2p = ((grid.svf$mid) / grid.por$mid), # conversion of x/m3_svf to x/m3_pw\n  p2s = (grid.por$mid / (grid.svf$mid))  # conversion of x/m3_pw  to x/m3_svf\n)\n\n\n\nAdvective Velocities\n\n# sedimentation velocity\nv &lt;- 5e-6*365  # (m/yr)\n\n# returns pore water advective velocities (u) and solid phase advective velocities (v)\nadvective_velocities &lt;- setup.compaction.1D(\n    v.0 = v,\n    por.0 = por.swi,\n    por.inf = por.deep,\n    por.grid = grid.por\n)\n\n\n\nDiffusion Coefficients\n\nsalinity    &lt;- 35 # (psu)\ntemperature &lt;- 20 # (dgC)\npressure    &lt;- 1.013253 # (bar)\nDb          &lt;- 5e-4 # mixing rate of the sediment; Bioturbation coefficient (m2/y)\nDb_mid      &lt;- 0.5  # middle of Db decreasing zone (m)\nDb_width    &lt;- 0.01 # width of Db decreasing zone (m)\n\ngrid.Db &lt;- setup.prop.1D(\n    func = p.sig,\n    y.0 = Db,\n    y.inf = 0,\n    x.L = Db_mid,\n    x.att = Db_width,\n    grid = grid\n)\n\ntortuosity_squared &lt;- 1-log(grid.por$int^2)\n\ns2yr &lt;- 3600*24*365.25\n\ndiffcoeff_species &lt;- c(\"HCO3\", \"HCO3\", \"CH4\", \"H2PO4\", \"NO3\", \"NH4\", \"SO4\",\n                       \"O2\", \"Mn\", \"Fe\", \"H2S\", \"N2\")\n\ndiffcoeffs &lt;- diffcoeff(\n  species = diffcoeff_species,\n  S = salinity,\n  t = temperature,\n  P = pressure\n)\n\ndiffusion_coefficients &lt;- list(\n  \n  # solute: molar diffusion coefficient / tortuosity**2 + bioturbation coefficient\n  # solid: bioturbation coefficient\n  \n  ALK   = diffcoeffs[[1]]  * s2yr / tortuosity_squared + grid.Db$int,\n  DIC   = diffcoeffs[[2]]  * s2yr / tortuosity_squared + grid.Db$int,\n  CH4   = diffcoeffs[[3]]  * s2yr / tortuosity_squared + grid.Db$int,\n  H2PO4 = diffcoeffs[[4]]  * s2yr / tortuosity_squared + grid.Db$int,\n  NO3   = diffcoeffs[[5]]  * s2yr / tortuosity_squared + grid.Db$int,\n  NH4   = diffcoeffs[[6]]  * s2yr / tortuosity_squared + grid.Db$int,\n  SO4   = diffcoeffs[[7]]  * s2yr / tortuosity_squared + grid.Db$int,\n  O2    = diffcoeffs[[8]]  * s2yr / tortuosity_squared + grid.Db$int,\n  Mn2   = diffcoeffs[[9]]  * s2yr / tortuosity_squared + grid.Db$int,\n  Fe2   = diffcoeffs[[10]] * s2yr / tortuosity_squared + grid.Db$int,\n  H2S   = diffcoeffs[[11]] * s2yr / tortuosity_squared + grid.Db$int,\n  N2    = diffcoeffs[[12]] * s2yr / tortuosity_squared + grid.Db$int,\n  solid = grid.Db$int\n    \n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBoundary Conditions\n\nboundary_conditions &lt;- c(\n  # Alkalinity in eq/m3?\n  ALK_up   = 2,\n  # Solutes: concentrations in mol m-3\n  DIC_up   = 2,\n  CH4_up   = 0,\n  H2PO4_up = 0,\n  NO3_up   = 0.2,\n  NH4_up   = 0.001,\n  SO4_up   = 28,\n  O2_up    = 0.3,\n  N2_up    = 0, # &lt;&lt;&lt;\n  Mn2_up   = 0,\n  Fe2_up   = 0,\n  H2S_up   = 0,\n  # Solids: flux in mol m-2 yr-1\n  OM_up      = 0.25 * 365,\n  MnO2_up    = 10,\n  FeOH3_up   = 10,\n  FeOH3_P_up = 10,\n  FeCO3_up   = 0\n)\n\n\n\nReaction Parameters\n\ndry_density_sediment &lt;- 2700 # kg/m³\n\nreaction_parameter &lt;- c(\n  # OM degradation\n  ## reaction constants\n  k_alpha = 0.005 * 365, # yr-1\n  k_beta  = 0,#0.025,    # yr-1\n  ## composition of OM\n  OM_a    = 1,\n  OM_b    = 16 / 106,\n  OM_c    = 1 / 106,\n  ## limitation / inhibition constants (mol m-3)\n  K_O2    = 0.001,\n  K_NO3   = 0.001,\n  K_MnO2  = 0.001 * dry_density_sediment,#0.004 * dry_density_sediment,\n  K_FeOH3 = 0.001 * dry_density_sediment,#0.065 * dry_density_sediment,\n  K_SO4   = 0.1,\n  K_H3PO4 = 10^-5,\n  ## ratio of Fe to P in Fe(OH)_3(H3PO4)_lambda\n  lambda  = 0.6,\n  # Siderite Precipitation / Dissolution\n  k_precip_siderite = 1.8e2, # mol m-3_sf yr-1\n  k_diss_siderite = 2.5e-1,  # yr-1\n  Ksp_siderite = 10**(-10.4) * 1000**2\n)\n\n\n\nCollect Inputs\n\nparameter &lt;- c(\n  N_grid = N_grid,\n  conversion_factors,\n  boundary_conditions,\n  reaction_parameter,\n  logK = logK,\n  tableau = tableau\n)\n\nN_species &lt;- length(model_species)\n\n\n\nModel Function\n\n\nCode\nmodel &lt;- function (t, state, parms, diff_coeffs, adv_vel, solve_equilibrium, precipitation){\n  \n  with (as.list(parms),{\n    \n    # assign state variables\n    i &lt;- 1\n    # state variables for solutes are total amounts,\n    # but implicitly concentrations (total_amount/m³_pw)\n    ALK     &lt;- state[((i-1) * N_grid + 1) : (i * N_grid)]; i &lt;- i + 1 # -TOT_H\n    DIC     &lt;- state[((i-1) * N_grid + 1) : (i * N_grid)]; i &lt;- i + 1 # TOT_H2CO3\n    TOT_P   &lt;- state[((i-1) * N_grid + 1) : (i * N_grid)]; i &lt;- i + 1\n    TOT_N5  &lt;- state[((i-1) * N_grid + 1) : (i * N_grid)]; i &lt;- i + 1\n    TOT_N3  &lt;- state[((i-1) * N_grid + 1) : (i * N_grid)]; i &lt;- i + 1\n    TOT_S6  &lt;- state[((i-1) * N_grid + 1) : (i * N_grid)]; i &lt;- i + 1\n    TOT_S2  &lt;- state[((i-1) * N_grid + 1) : (i * N_grid)]; i &lt;- i + 1\n    CH4     &lt;- state[((i-1) * N_grid + 1) : (i * N_grid)]; i &lt;- i + 1\n    O2      &lt;- state[((i-1) * N_grid + 1) : (i * N_grid)]; i &lt;- i + 1\n    N2      &lt;- state[((i-1) * N_grid + 1) : (i * N_grid)]; i &lt;- i + 1\n    Mn2     &lt;- state[((i-1) * N_grid + 1) : (i * N_grid)]; i &lt;- i + 1\n    Fe2     &lt;- state[((i-1) * N_grid + 1) : (i * N_grid)]; i &lt;- i + 1\n    # state variables for solids are tableau-species concentrations (mol/m3_svf)\n    MnO2    &lt;- state[((i-1) * N_grid + 1) : (i * N_grid)]; i &lt;- i + 1\n    OM      &lt;- state[((i-1) * N_grid + 1) : (i * N_grid)]; i &lt;- i + 1\n    FeOH3   &lt;- state[((i-1) * N_grid + 1) : (i * N_grid)]; i &lt;- i + 1\n    FeOH3_P &lt;- state[((i-1) * N_grid + 1) : (i * N_grid)]; i &lt;- i + 1\n    FeCO3   &lt;- state[((i-1) * N_grid + 1) : (i * N_grid)]; i &lt;- i + 1\n    \n    \n    # transport terms\n    tran.ALK     &lt;- tran.1D(C = ALK, C.up = ALK_up, D = diff_coeffs$ALK, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n    \n    tran.DIC     &lt;- tran.1D(C = DIC, C.up = DIC_up, D = diff_coeffs$DIC, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n    \n    tran.TOT_P   &lt;- tran.1D(C = TOT_P, C.up = H2PO4_up, D = diff_coeffs$H2PO4, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n    \n    tran.TOT_N5  &lt;- tran.1D(C = TOT_N5, C.up = NO3_up, D = diff_coeffs$NO3, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n    \n    tran.TOT_N3  &lt;- tran.1D(C = TOT_N3, C.up = NH4_up, D = diff_coeffs$NH4, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n    \n    tran.TOT_S6  &lt;- tran.1D(C = TOT_S6, C.up = SO4_up, D = diff_coeffs$SO4, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n    \n    tran.TOT_S2  &lt;- tran.1D(C = TOT_S2, C.up = H2S_up, D = diff_coeffs$H2S, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n    \n    tran.CH4     &lt;- tran.1D(C = CH4, C.up = CH4_up, D = diff_coeffs$CH4, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n\n    tran.O2      &lt;- tran.1D(C = O2, C.up = O2_up, D = diff_coeffs$O2, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n    \n    tran.N2      &lt;- tran.1D(C = N2, C.up = N2_up, D = diff_coeffs$N2, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n    \n    tran.Mn2     &lt;- tran.1D(C = Mn2, C.up = Mn2_up, D = diff_coeffs$Mn2, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n    \n    tran.Fe2     &lt;- tran.1D(C = Fe2, C.up = Fe2_up, D = diff_coeffs$Fe2, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n    \n    tran.MnO2    &lt;- tran.1D(C = MnO2, flux.up = MnO2_up, D = diff_coeffs$solid, \n                            v = adv_vel$v, VF = grid.svf, dx = grid)\n    \n    tran.OM      &lt;- tran.1D(C = OM, flux.up = OM_up, D = diff_coeffs$solid, \n                            v = adv_vel$v, VF = grid.svf, dx = grid)\n    \n    tran.FeOH3   &lt;- tran.1D(C = FeOH3, flux.up = FeOH3_up, D = diff_coeffs$solid, \n                            v = adv_vel$v, VF = grid.svf, dx = grid)\n    \n    tran.FeOH3_P &lt;- tran.1D(C = FeOH3_P, flux.up = FeOH3_P_up, D = diff_coeffs$solid, \n                            v = adv_vel$v, VF = grid.svf, dx = grid)\n    \n    tran.FeCO3   &lt;- tran.1D(C = FeCO3, flux.up = FeCO3_up, D = diff_coeffs$solid, \n                            v = adv_vel$v, VF = grid.svf, dx = grid)\n    \n    \n    # calculate solute equilibrium species (solve the tableau)\n    if (solve_equilibrium) {\n      # 1) grep the solute total components; here we need TOT_H = - ALK\n      solute_totals &lt;- c(-ALK, DIC, TOT_P, TOT_N5, TOT_N3, TOT_S6, TOT_S2)\n      # 2) solve tableau\n      solute_equilibrium  &lt;- solve_tableau(solute_totals, tableau, logK, N_grid)\n      # 3) assign results\n      pH    &lt;- -log10(solute_equilibrium$species_conc[,1] * 10^-3)\n      OH    &lt;- solute_equilibrium$species_conc[,2]\n      H2CO3 &lt;- solute_equilibrium$species_conc[,3]\n      HCO3  &lt;- solute_equilibrium$species_conc[,4]\n      CO3   &lt;- solute_equilibrium$species_conc[,5]\n      H3PO4 &lt;- solute_equilibrium$species_conc[,6]\n      HPO4  &lt;- solute_equilibrium$species_conc[,7]\n      PO4   &lt;- solute_equilibrium$species_conc[,8]\n      HNO3  &lt;- solute_equilibrium$species_conc[,9]\n      NO3   &lt;- solute_equilibrium$species_conc[,10]\n      NH4   &lt;- solute_equilibrium$species_conc[,11]\n      NH3   &lt;- solute_equilibrium$species_conc[,12]\n      H2SO4 &lt;- solute_equilibrium$species_conc[,13]\n      HSO4  &lt;- solute_equilibrium$species_conc[,14]\n      SO4   &lt;- solute_equilibrium$species_conc[,15]\n      H2S   &lt;- solute_equilibrium$species_conc[,16]\n      HS    &lt;- solute_equilibrium$species_conc[,17]\n      S2    &lt;- solute_equilibrium$species_conc[,18]\n    } else {\n      solute_equilibrium &lt;- NA\n    }\n    \n    \n    # Precipitation Reactions\n    if (precipitation & solve_equilibrium) {\n      omega_siderite &lt;- (Fe2 * CO3) / Ksp_siderite\n    } else if (precipitation) {\n      omega_siderite &lt;- (Fe2 * DIC * 0.0001) / Ksp_siderite # !!!\n    }\n    else {\n      omega_siderite &lt;- rep(1, N_grid)\n    }\n    # Siderite: R7 = precipitation, R8 = dissolution\n    R7 &lt;- ifelse(omega_siderite &gt; 1, k_precip_siderite * (omega_siderite - 1)^2, 0)\n    R8 &lt;- ifelse(omega_siderite &lt; 1, k_diss_siderite * FeCO3 * (1 - omega_siderite)^2, 0)\n    \n    \n    # FeOH3 fractions\n    FeOH3_tot &lt;- FeOH3 + FeOH3_P\n    chi &lt;- rep(1, length(FeOH3))\n    ind_valid &lt;- FeOH3_tot &gt; 0\n    chi[ind_valid] &lt;- FeOH3[ind_valid] / FeOH3_tot[ind_valid]\n    \n    # limitation & inhibition terms\n    L_O2    &lt;- O2   / (K_O2 + O2)\n    I_O2    &lt;- K_O2 / (K_O2 + O2)\n    \n    L_NO3   &lt;- TOT_N5 / (K_NO3 + TOT_N5)\n    I_NO3   &lt;- K_NO3 / (K_NO3 + TOT_N5)\n    \n    L_MnO2  &lt;- MnO2   / (K_MnO2 + MnO2)\n    I_MnO2  &lt;- K_MnO2 / (K_MnO2 + MnO2)\n    \n    L_FeOH3 &lt;- FeOH3_tot / (K_FeOH3 + FeOH3_tot)\n    I_FeOH3 &lt;- K_FeOH3 / (K_FeOH3 + FeOH3_tot)\n    \n    L_SO4   &lt;- TOT_S6 / (K_SO4 + TOT_S6)\n    I_SO4   &lt;- K_SO4 / (K_SO4 + TOT_S6)\n    \n    L_H3PO4 &lt;- TOT_P   / (K_H3PO4 + TOT_P)\n    I_H3PO4 &lt;- K_H3PO4 / (K_H3PO4 + TOT_P)\n    \n    # reaction rates\n    R1 &lt;- k_alpha * OM * L_O2\n    R2 &lt;- k_alpha * OM * L_NO3                            * I_O2\n    R3 &lt;- k_alpha * OM * L_MnO2                   * I_NO3 * I_O2\n    R4 &lt;- k_alpha * OM * L_FeOH3         * I_MnO2 * I_NO3 * I_O2\n    R5 &lt;- k_alpha * OM * L_SO4 * I_FeOH3 * I_MnO2 * I_NO3 * I_O2\n    R6 &lt;- k_alpha * OM * I_SO4 * I_FeOH3 * I_MnO2 * I_NO3 * I_O2\n    \n    # change of species concentration due to reactions\n    ## solutes step1: change of slow-reaction-species (srs), the ones for which\n    ## the reactions are formulated, according to reaction stoichiometry\n    R.srs_O2    &lt;- - s2p * R1                   # OM Degradation\n    R.srs_CO2   &lt;- (s2p * (R1 + R2 + R3 + R4 + R5 + 1/2 * R6)\n                    - s2p * R7 + s2p * R8)  # Siderite Precipitation / Dissolution\n    R.srs_NH3   &lt;- OM_b * s2p * (R1 + R2 + R3 + R4 + R5 + R6)\n    R.srs_H3PO4 &lt;- s2p * ( OM_c * (R1 + R2 + R3 + R5 + R6) +\n                      (OM_c + (1 - chi) * 4 * lambda) * R4 )\n    R.srs_HNO3  &lt;- - 4/5 * s2p * R2\n    R.srs_N2    &lt;- 2/5 * s2p * R2\n    R.srs_FeOH2 &lt;- (4 * s2p * R4                # OM degradation\n                    - s2p * R7 + s2p * R8)  # Siderite Precipitation / Dissolution\n    R.srs_MnOH2 &lt;- 2 * s2p * R3\n    R.srs_H2SO4 &lt;- - 1/2 * s2p * R5\n    R.srs_H2S   &lt;- 1/2 * s2p * R5\n    R.srs_CH4   &lt;- 1/2 * s2p * R6\n    \n    ## solutes step2: change of tableau-components = model species\n    ## translation of change of slow-reaction-species to change of \n    ## tableau components using the translation table\n    ## here the component-total \"H\" is already converted to alkalinity (*-1)\n    R.ALK   &lt;- -1 * (- R.srs_NH3 + R.srs_H3PO4 + R.srs_HNO3 - 2 * R.srs_FeOH2\n                     - 2 * R.srs_MnOH2 + 2 * R.srs_H2SO4)\n    R.DIC    &lt;- R.srs_CO2\n    R.CH4    &lt;- R.srs_CH4\n    R.TOT_P  &lt;- R.srs_H3PO4\n    R.TOT_N5 &lt;- R.srs_HNO3\n    R.TOT_N3 &lt;- R.srs_NH3\n    R.TOT_S6 &lt;- R.srs_H2SO4\n    R.TOT_S2 &lt;- R.srs_H2S\n    R.O2     &lt;- R.srs_O2\n    R.N2     &lt;- R.srs_N2\n    R.Mn2    &lt;- R.srs_MnOH2\n    R.Fe2    &lt;- R.srs_FeOH2\n    \n    ## solids\n    R.OM &lt;- - R1 - R2 - R3 - R4 - R5 - R6\n    R.MnO2 &lt;- - 2 * R3\n    R.FeOH3 &lt;- - 4 * chi * R4\n    R.FeOH3_P &lt;- - 4 * (1 - chi) * R4\n    R.FeCO3 &lt;- R7 - R8\n    \n    # total change in concentration of model species\n    dCdt.ALK    &lt;- R.ALK + tran.ALK$dC\n    dCdt.DIC    &lt;- R.DIC + tran.DIC$dC\n    dCdt.CH4    &lt;- R.CH4 + tran.CH4$dC\n    dCdt.TOT_P  &lt;- R.TOT_P + tran.TOT_P$dC\n    dCdt.TOT_N5 &lt;- R.TOT_N5 + tran.TOT_N5$dC\n    dCdt.TOT_N3 &lt;- R.TOT_N3 + tran.TOT_N3$dC\n    dCdt.N2     &lt;- R.N2  + tran.N2$dC\n    dCdt.TOT_S6 &lt;- R.TOT_S6 + tran.TOT_S6$dC\n    dCdt.TOT_S2 &lt;- R.TOT_S2 + tran.TOT_S2$dC\n    dCdt.O2     &lt;- R.O2 + tran.O2$dC\n    dCdt.Mn2    &lt;- R.Mn2 + tran.Mn2$dC\n    dCdt.Fe2    &lt;- R.Fe2 + tran.Fe2$dC\n    dCdt.OM     &lt;- R.OM + tran.OM$dC\n    dCdt.MnO2   &lt;- R.MnO2 + tran.MnO2$dC\n    dCdt.FeOH3  &lt;- R.FeOH3 + tran.FeOH3$dC\n    dCdt.FeOH3_P &lt;- R.FeOH3_P + tran.FeOH3_P$dC\n    dCdt.FeCO3  &lt;- R.FeCO3 + tran.FeCO3$dC\n    \n    # characteristic time scales\n    # if dCdt.X = 0 -&gt; timescale will be Inf\n    time_scales &lt;- c(\n      ALK = ALK / dCdt.ALK,\n      DIC = DIC / dCdt.DIC,\n      CH4 = CH4 / dCdt.CH4,\n      TOT_P = TOT_P / dCdt.TOT_P,\n      TOT_N5 = TOT_N5 / dCdt.TOT_N5,\n      TOT_N3 = TOT_N3 / dCdt.TOT_N3,\n      N2 = N2 / dCdt.N2,\n      TOT_S6 = TOT_S6 / dCdt.TOT_S6,\n      TOT_S2 = TOT_S2 / dCdt.TOT_S2,\n      O2 = O2 / dCdt.O2,\n      Mn2 = Mn2 / dCdt.Mn2,\n      Fe2 = Fe2 / dCdt.Fe2,\n      OM = OM / dCdt.OM,\n      MnO2 = MnO2 / dCdt.MnO2,\n      FeOH3 = FeOH3 / dCdt.FeOH3,\n      FeOH3_P = FeOH3_P / dCdt.FeOH3_P,\n      FeCO3 = FeCO3 / dCdt.FeCO3\n    )\n    # but we need to take the absolute value to find the correct minimum\n    time_scales &lt;- abs(time_scales)\n    # set NaN values to a number (???)\n    time_scales[is.na(time_scales)] &lt;- 100\n    # set 0 to a small number\n    time_scales[time_scales == 0] &lt;- 1e-10\n\n    return(\n      list(\n        c(\n          dCdt.ALK = dCdt.ALK,\n          dCdt.DIC = dCdt.DIC,\n          dCdt.TOT_P = dCdt.TOT_P,\n          dCdt.TOT_N5 = dCdt.TOT_N5,\n          dCdt.TOT_N3 = dCdt.TOT_N3,\n          dCdt.TOT_S6 = dCdt.TOT_S6,\n          dCdt.TOT_S2 = dCdt.TOT_S2,\n          dCdt.CH4 = dCdt.CH4,\n          dCdt.O2 = dCdt.O2,\n          dCdt.N2 = dCdt.N2,\n          dCdt.Mn2 = dCdt.Mn2,\n          dCdt.Fe2 = dCdt.Fe2,\n          dCdt.MnO2 = dCdt.MnO2,\n          dCdt.OM = dCdt.OM,\n          dCdt.FeOH3 = dCdt.FeOH3,\n          dCdt.FeOH3_P = dCdt.FeOH3_P,\n          dCdt.FeCO3 = dCdt.FeCO3\n        ),\n        transport = list(\n          tran.ALK = tran.ALK,\n          tran.DIC = tran.DIC,\n          tran.TOT_P = tran.TOT_P,\n          tran.TOT_N5 = tran.TOT_N5,\n          tran.TOT_N3 = tran.TOT_N3,\n          tran.TOT_S6 = tran.TOT_S6,\n          tran.TOT_S2 = tran.TOT_S2,\n          tran.CH4 = tran.CH4,\n          tran.O2 = tran.O2,\n          tran.N2 = tran.N2,\n          tran.Mn2 = tran.Mn2,\n          tran.Fe2 = tran.Fe2,\n          tran.MnO2 = tran.MnO2,\n          tran.OM = tran.OM,\n          tran.FeOH3 = tran.FeOH3,\n          tran.FeOH3_P = tran.FeOH3_P,\n          tran.FeCO3 = tran.FeCO3\n        ),\n        sumR = list(\n          R.ALK     = R.ALK * grid.por$mid,\n          R.DIC     = R.DIC * grid.por$mid,\n          R.TOT_P   = R.TOT_P * grid.por$mid,\n          R.TOT_N5  = R.TOT_N5 * grid.por$mid,\n          R.TOT_N3  = R.TOT_N3 * grid.por$mid,\n          R.TOT_S6  = R.TOT_S6 * grid.por$mid,\n          R.TOT_S2  = R.TOT_S2 * grid.por$mid,\n          R.CH4     = R.CH4 * grid.por$mid,\n          R.O2      = R.O2 * grid.por$mid,\n          R.N2      = R.N2 * grid.por$mid,\n          R.Mn2     = R.Mn2 * grid.por$mid,\n          R.Fe2     = R.Fe2 * grid.por$mid,\n          R.MnO2    = R.MnO2 * grid.svf$mid,\n          R.OM      = R.OM * grid.svf$mid,\n          R.FeOH3   = R.FeOH3 * grid.svf$mid,\n          R.FeOH3_P = R.FeOH3_P * grid.svf$mid,\n          R.FeCO3   = R.FeCO3 * grid.svf$mid\n        ),\n        rates = list(\n          R1 = R1 * grid.svf$mid,\n          R2 = R2 * grid.svf$mid,\n          R3 = R3 * grid.svf$mid,\n          R4 = R4 * grid.svf$mid,\n          R5 = R5 * grid.svf$mid,\n          R6 = R6 * grid.svf$mid,\n          R7 = R7 * grid.svf$mid,\n          R8 = R8 * grid.svf$mid\n        ),\n        solute_equilibrium = solute_equilibrium,\n        time_scales = time_scales,\n        omega_siderite = omega_siderite,\n        timescale_Fe2 = Fe2 / dCdt.Fe2,\n        dCdt_Fe2 = dCdt.Fe2\n      )\n    )\n })\n}"
  },
  {
    "objectID": "index.html#solve-model",
    "href": "index.html#solve-model",
    "title": "Fe Treatment Model",
    "section": "Solve Model",
    "text": "Solve Model\n\nStep 1) Steady State without Speciation\nSolve steady state without equilibrium solver. Precipitation reactions are controlled by component-totals.\n\ninitial &lt;- rep(1e-4, N_grid * N_species)\n\nstd1 &lt;- steady.1D(\n  y = initial,\n  func = model,\n  parms = parameter, \n  dimens = N_grid,\n  nspec = N_species,\n  names = model_species,\n  positive = TRUE,\n  method = \"stodes\",\n  diff_coeffs = diffusion_coefficients,\n  adv_vel = advective_velocities,\n  solve_equilibrium = FALSE,\n  precipitation = TRUE\n)\n\nThe speciation is calculated for the resulting steady-state.\n\n# the first 7 model-species are tableau components\n# In the model we have alkalinity (column 1) - but here we need TOT_H = -ALK\ncomponent_total &lt;- c(-1*std1$y[,1], std1$y[,2:7])\n\nmicrobenchmark(\n  equilibrium  &lt;- solve_tableau(component_total, tableau, logK, N_grid),\n  times = 1\n)\n\nUnit: milliseconds\n                                                                      expr\n equilibrium &lt;- solve_tableau(component_total, tableau, logK,      N_grid)\n      min       lq     mean   median       uq      max neval\n 21.37227 21.37227 21.37227 21.37227 21.37227 21.37227     1\n\n# Check \"success\" state for every layer\n## 0 = at least one total_component differs more than 1e-12 (atol)\n## 1 = atol reached at first try with pcfm\n## 2 = atol reached at first try with newton\n## 3 = atol reached at second try with pcfm\n## 4 = atol reached at second try with newton\n## 5 = atol reached at third try with pcfm\ntable(equilibrium$success)\n\n\n  2   4 \n395   5 \n\n# Check for NA results, indicating something went wrong\nsum(is.na(equilibrium$species_conc))\n\n[1] 0\n\n\n\nProfiles: Component-Totals\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProfiles: Speciation\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProfile: pH\n\n\n\n\n\n\n\nProfiles: Saturation\n\n\n\n\n\n\n\nProfiles: Reaction Rates\n\n\n\n\n\n\n\n\n\nStep 2) Steady State with Speciation\nSolve steady state with equilibrium solver. Precipitation reactions are controlled by the actual species concentrations.\n\n\nCode\n# Runge-Kutta Method\nrk &lt;- function(func, x0, y0, maxsteps, stol = 1e-8, nrow_concs, names, N_grid, tableau_species, ...) {\n  \n  times &lt;- c()\n  h_log &lt;- c()\n  concs &lt;- matrix(ncol = maxsteps+1, nrow = nrow_concs)\n  omega_siderite &lt;- matrix(ncol = maxsteps+1, nrow = N_grid)\n  tran.Fe2 &lt;- matrix(ncol = maxsteps+1, nrow = N_grid)\n  timescale.Fe2 &lt;- matrix(ncol = maxsteps+1, nrow = N_grid)\n  dCdt.Fe2 &lt;- matrix(ncol = maxsteps+1, nrow = N_grid)\n\n  for (i in seq(maxsteps+1)) {\n    \n    # calculate model at current time\n    model_return &lt;- func(x0, y0, ...)\n    \n    # set integration timestep\n    h &lt;- min(model_return$time_scales) * 0.05\n    # maximum timestep: 1e-6\n    h &lt;- min(h, 1e-6)\n    \n    # logging\n    if (i == 1) {\n      rates &lt;- as.data.frame(model_return$rates)\n      speciation &lt;- model_return$solute_equilibrium$species_conc\n    } else {\n      rates &lt;- rbind(rates, as.data.frame(model_return$rates))\n      speciation &lt;- rbind(speciation, model_return$solute_equilibrium$species_conc)\n    }\n    \n    times[i]  &lt;- x0\n    h_log[i]  &lt;- h\n    concs[,i] &lt;- y0\n    omega_siderite[,i] &lt;- model_return$omega_siderite\n    tran.Fe2[,i] &lt;- model_return$transport$tran.Fe2$dC\n    dCdt.Fe2[,i] &lt;- model_return$dCdt_Fe2\n    timescale.Fe2[,i] &lt;- model_return$timescale_Fe2\n    \n    dCdt  &lt;- model_return[[1]]\n    \n    # check if to break loop\n    #if (mean(abs(dCdt)) &lt; stol) break\n    \n    # 1st order R-K method\n    x0 &lt;- x0 + h\n    y0 &lt;- y0 + h * dCdt\n    \n    y0[y0 &lt; 0] &lt;- 0\n  \n  }\n  \n  concs_split &lt;- list()\n  for (j in seq_len(length(names))) {\n    concs_split[[j]] &lt;- concs[((j-1) * N_grid + 1) : (j * N_grid),]\n  }\n  names(concs_split) &lt;- names\n  \n  rates_split &lt;- list()\n  for (j in seq_len(ncol(rates))) {\n    rates_split[[j]] &lt;- matrix(rates[,j], ncol = i)\n  }\n  names(rates_split) &lt;- colnames(rates)\n  \n  speciation_split &lt;- list()\n  for (j in seq_len(ncol(speciation))) {\n    speciation_split[[j]] &lt;- matrix(speciation[,j], ncol = i)\n  }\n  names(speciation_split) &lt;- tableau_species\n  \n  return(list(\n    # method log\n    times = times,\n    h = h_log,\n    # output of final step according to steady.1D\n    y = matrix(y0, nrow = N_grid, byrow = FALSE),\n    transport = model_return$transport,\n    sumR = model_return$sumR,\n    rates = model_return$rates,\n    solute_equilibrium = model_return$solute_equilibrium,\n    time_scales = model_return$time_scales,\n    # time series output\n    concs_split = concs_split,\n    rates_split = rates_split,\n    speciation_split = speciation_split,\n    # to be cleaned up ...\n    omega_siderite = omega_siderite,\n    timescale.Fe2 = timescale.Fe2,\n    tran.Fe2 = tran.Fe2,\n    dCdt.Fe2 = dCdt.Fe2,\n    dCdt = dCdt\n  ))\n}\n\n\n\nstd3 &lt;- steady.1D( # !!!\n  y = std1$y,\n  func = model,\n  parms = parameter,\n  dimens = N_grid,\n  nspec = N_species,\n  names = model_species,\n  positive = TRUE,\n  method = \"stode\",\n  maxiter = 100,\n  diff_coeffs = diffusion_coefficients,\n  adv_vel = advective_velocities,\n  solve_equilibrium = TRUE,\n  precipitation = TRUE\n)\n\n\ntimesteps &lt;- 200\n\nstd2 &lt;- rk(\n  func = model,\n  x0 = 0,\n  y0 = as.vector(std3$y), # !!!\n  maxsteps = timesteps,\n  stol = 1e-8,\n  nrow_concs = length(model_species) * N_grid,\n  names = model_species,\n  N_grid = N_grid,\n  tableau_species = tableau_species,\n  parms = parameter,\n  diff_coeffs = diffusion_coefficients,\n  adv_vel = advective_velocities,\n  solve_equilibrium = TRUE,\n  precipitation = TRUE\n)\n\n\nDevelopment of integration timestep h\n\n\n\n\n\n\n\nConcentration Profiles\nConcentrations at different timesteps over depth (solid black is the first one).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReaction Rate Development\nReaction rates in different layers over time.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProblem Analysis\n\n\n\n\n\nTime steps:\n\n\n\n\n\n\n\nDepth:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProfiles: Speciation\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProfile: pH"
  },
  {
    "objectID": "index.html#mass-balances",
    "href": "index.html#mass-balances",
    "title": "Fe Treatment Model",
    "section": "Mass Balances",
    "text": "Mass Balances\n\nSpecies-based Mass Balances\nThe change in concentration of a species \\(i\\), integrated over depth and in relation to the area \\(A\\) is\n\\[\\frac{dC_{A,i}}{dt} \\; \\left( \\frac{mol}{m^2 \\cdot a} \\right) = J(a)_i - J(b)_i + \\int_{a}^b \\Psi \\sum R_i\\]\nwith\n\n\\(J(a)_i\\): flux of species \\(i\\) across upper boundary\n\\(J(b)_i\\): flux of species \\(i\\) across lower boundary\n\\(\\Psi\\): volume fraction.\n\n\n\n\nstd1\n\n\nspecies\nflux_up\nflux_down\nnetto_flux\nsumR_integrated\nbilanz\n\n\n\n\nALK\n-87.9\n9.9e-02\n-88.0\n88.0\n-2.7e-13\n\n\nDIC\n-66.5\n9.9e-02\n-66.6\n66.6\n-1.1e-13\n\n\nTOT_P\n-6.9\n4.2e-03\n-6.9\n6.9\n-8.9e-16\n\n\nTOT_N5\n2.4\n0.0e+00\n2.4\n-2.4\n-1.3e-15\n\n\nTOT_N3\n-13.8\n1.2e-02\n-13.8\n13.8\n0.0e+00\n\n\nTOT_S6\n27.8\n1.3e-09\n27.8\n-27.8\n-1.9e-13\n\n\nTOT_S2\n-27.7\n2.4e-02\n-27.8\n27.8\n3.6e-15\n\n\nCH4\n-6.2\n1.6e-02\n-6.2\n6.2\n0.0e+00\n\n\nO2\n10.2\n0.0e+00\n10.2\n-10.2\n-3.6e-15\n\n\nN2\n-1.2\n1.5e-04\n-1.2\n1.2\n2.2e-16\n\n\nMn2\n-10.0\n4.6e-03\n-10.0\n10.0\n0.0e+00\n\n\nFe2\n-1.6\n8.6e-06\n-1.6\n1.6\n-1.3e-13\n\n\nMnO2\n10.0\n0.0e+00\n10.0\n-10.0\n0.0e+00\n\n\nOM\n91.2\n3.0e-02\n91.2\n-91.2\n0.0e+00\n\n\nFeOH3\n10.0\n0.0e+00\n10.0\n-10.0\n0.0e+00\n\n\nFeOH3_P\n10.0\n0.0e+00\n10.0\n-10.0\n0.0e+00\n\n\nFeCO3\n0.0\n1.8e+01\n-18.4\n18.4\n1.3e-13\n\n\n\n\n\n\nstd2\n\n\nspecies\nflux_up\nflux_down\nnetto_flux\nsumR_integrated\nbilanz\n\n\n\n\nALK\n-85.07\n9.9e-02\n-85.17\n85.17\n1.1e-11\n\n\nDIC\n-65.07\n9.9e-02\n-65.17\n65.17\n5.5e-12\n\n\nTOT_P\n-6.86\n4.2e-03\n-6.86\n6.86\n-8.9e-16\n\n\nTOT_N5\n2.44\n0.0e+00\n2.44\n-2.44\n-8.9e-16\n\n\nTOT_N3\n-13.76\n1.2e-02\n-13.77\n13.77\n-1.8e-15\n\n\nTOT_S6\n27.76\n1.3e-09\n27.76\n-27.76\n-1.9e-13\n\n\nTOT_S2\n-27.74\n2.4e-02\n-27.76\n27.76\n3.6e-15\n\n\nCH4\n-6.18\n1.6e-02\n-6.20\n6.20\n-8.9e-16\n\n\nO2\n10.24\n0.0e+00\n10.24\n-10.24\n-3.6e-15\n\n\nN2\n-1.22\n1.5e-04\n-1.22\n1.22\n-2.2e-16\n\n\nMn2\n-10.00\n4.6e-03\n-10.00\n10.00\n3.6e-15\n\n\nFe2\n-0.15\n1.8e-06\n-0.15\n0.15\n5.5e-12\n\n\nMnO2\n10.00\n0.0e+00\n10.00\n-10.00\n-1.8e-15\n\n\nOM\n91.25\n3.0e-02\n91.22\n-91.22\n0.0e+00\n\n\nFeOH3\n10.00\n0.0e+00\n10.00\n-10.00\n0.0e+00\n\n\nFeOH3_P\n10.00\n0.0e+00\n10.00\n-10.00\n0.0e+00\n\n\nFeCO3\n0.00\n2.0e+01\n-19.85\n19.85\n-5.5e-12\n\n\n\n\n\n\nstd3\n\n\nspecies\nflux_up\nflux_down\nnetto_flux\nsumR_integrated\nbilanz\n\n\n\n\nALK\n-85.07\n9.9e-02\n-85.17\n85.17\n1.3e-11\n\n\nDIC\n-65.07\n9.9e-02\n-65.17\n65.17\n6.6e-12\n\n\nTOT_P\n-6.86\n4.2e-03\n-6.86\n6.86\n-8.9e-16\n\n\nTOT_N5\n2.44\n0.0e+00\n2.44\n-2.44\n-1.3e-15\n\n\nTOT_N3\n-13.76\n1.2e-02\n-13.77\n13.77\n0.0e+00\n\n\nTOT_S6\n27.76\n1.3e-09\n27.76\n-27.76\n-1.9e-13\n\n\nTOT_S2\n-27.74\n2.4e-02\n-27.76\n27.76\n3.6e-15\n\n\nCH4\n-6.18\n1.6e-02\n-6.20\n6.20\n0.0e+00\n\n\nO2\n10.24\n0.0e+00\n10.24\n-10.24\n-3.6e-15\n\n\nN2\n-1.22\n1.5e-04\n-1.22\n1.22\n0.0e+00\n\n\nMn2\n-10.00\n4.6e-03\n-10.00\n10.00\n1.8e-15\n\n\nFe2\n-0.15\n1.8e-06\n-0.15\n0.15\n6.6e-12\n\n\nMnO2\n10.00\n0.0e+00\n10.00\n-10.00\n-1.8e-15\n\n\nOM\n91.25\n3.0e-02\n91.22\n-91.22\n0.0e+00\n\n\nFeOH3\n10.00\n0.0e+00\n10.00\n-10.00\n0.0e+00\n\n\nFeOH3_P\n10.00\n0.0e+00\n10.00\n-10.00\n0.0e+00\n\n\nFeCO3\n0.00\n2.0e+01\n-19.85\n19.85\n-6.6e-12\n\n\n\n\n\n\n\nElement-based Mass Balances"
  }
]