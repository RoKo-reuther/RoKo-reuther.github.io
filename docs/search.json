[
  {
    "objectID": "interactive_transient.html",
    "href": "interactive_transient.html",
    "title": "Explore Results of dynamic Run",
    "section": "",
    "text": "species_transposed = transpose(species)\n\nimport {offsetInterval} from \"@mootari/offset-slider\"\n\nviewof species_selection = Inputs.checkbox(species_names, {label: \"Species:\"})\n\nviewof time_selection = offsetInterval(times, {\n  label: \"Time (yr):\",\n  value: [ d3.min(times), d3.min(times) ]\n})\n\nviewof depth_selection = offsetInterval(depths, {\n  label: \"Depth:\",\n  value: [ d3.min(depths), d3.max(depths) ]\n})\n\nviewof colormode = Inputs.radio([\"time\", \"name\"], {label: \"Color:\"})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfiltered = species_transposed.filter(function(entry) {\n  return time_selection[0]  &lt;= entry.time && time_selection[1]   &gt;= entry.time &&\n         depth_selection[0] &lt;= entry.depth && depth_selection[1] &gt;= entry.depth &&\n         species_selection.includes(entry.name);\n})\n\n\n\nPlot.plot({\n  width:  800,\n  height: 600,\n  y: {domain: [d3.max(depths), d3.min(depths)]},  \n  color: {legend: true},\n  marks: [\n    Plot.frame(),\n    Plot.lineY(filtered, {x: \"value\", y: \"depth\", stroke: colormode, curve: \"basis\", strokeWidth: 5})\n  ]}\n)"
  },
  {
    "objectID": "interactive_transient.html#explore-model-results-interactively",
    "href": "interactive_transient.html#explore-model-results-interactively",
    "title": "Interactive steady-state",
    "section": "",
    "text": "yearlyChart = Plot.plot({\n  marks: [\n    Plot.line(transpose(trans), \n      {x: \"time\", y: \"time\"}, \n      { stroke: \"black\" }\n    )\n  ]}\n)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Fe Treatment Model",
    "section": "",
    "text": "next meeting: 21.02.2024 | 09:30\nnext steps:\n\nadd Ammonium oxidation + MnCO3 precip / diss\nsetup version comparable to Wang & Van Cappellen\nimport Terra Nova porewater-data for comparision"
  },
  {
    "objectID": "index.html#quick-info",
    "href": "index.html#quick-info",
    "title": "Fe Treatment Model",
    "section": "",
    "text": "next meeting: 21.02.2024 | 09:30\nnext steps:\n\nadd Ammonium oxidation + MnCO3 precip / diss\nsetup version comparable to Wang & Van Cappellen\nimport Terra Nova porewater-data for comparision"
  },
  {
    "objectID": "index.html#concept",
    "href": "index.html#concept",
    "title": "Fe Treatment Model",
    "section": "Concept",
    "text": "Concept\n\nReactions\nReactions affect solute and solid model species differently.\nThe solid model species are the same occurring in the chemical reaction equations. Therefore they are affected directly according to the reaction stoichiometry.\nSolute model species are either component-totals (e.g. DIC, TOT_P, …) to be speciated later or species on their own (e.g. O2, CH4). The effect of reactions on solute species is first formulated for the species occurring in the chemical reaction equations according to the reaction stoichiometry. In a second step this changes are translated to changes of the component-totals / model species using a translation table.\n\n\nTransport\nFor solutes the (probably) dominant species of a component-total governs the diffusion coefficient (cf code-block “Diffusion Coefficients”). The transport of solids is not affected by species properties."
  },
  {
    "objectID": "index.html#reactions-describing-om-decomposition",
    "href": "index.html#reactions-describing-om-decomposition",
    "title": "Fe Treatment Model",
    "section": "Reactions Describing OM Decomposition",
    "text": "Reactions Describing OM Decomposition\n\nOM Composition\n\\(\\ce{(CH2O)_a (NH3)_b (H3PO4)_c}\\)\n\n\\(a = 1\\)\n\\(b = 16/106\\)\n\\(c = 1/106\\)\n\n\n\nRate Constants\n\n\\(k_{\\alpha} = 0.05 - 1.62 \\: yr^{-1}\\) (Moodley et al. 2005; Tromp, Van Cappellen, and Key 1995)\n\\(k_{\\beta} = 0.025 - 0.0086 \\: yr^{-1}\\) (Tromp, Van Cappellen, and Key 1995)\n\n\n\nLimitation (L) and Inihibition (I) Terms\n\nO2\n\\(L_{\\ce{O2}} = \\frac{[\\ce{O2}]}{K_{\\ce{O2}} + [\\ce{O2}]}\\)\n\\(I_{\\ce{O2}} = \\frac{K_{\\ce{O2}}}{K_{\\ce{O2}} + [\\ce{O2}]}\\)\nwith \\(K_{O2} = 0.001 - 0.03 \\: mol \\: m^{-3}_{pw}\\) (Wang and Van Cappellen 1996)\n\n\nNO3-\n\\(L_{\\ce{NO3^-}} = \\frac{[\\ce{NO3^-}]}{K_{\\ce{NO3-}} + [\\ce{NO3^-}]}\\)\n\\(I_{\\ce{NO3^-}} = \\frac{K_{\\ce{NO3^-}}}{K_{\\ce{NO3^-}} + [\\ce{NO3^-}]}\\)\nwith \\(K_{NO3-} = 0.004 - 0.08 \\: mol \\: m^{-3}_{pw}\\) (Wang and Van Cappellen 1996)\n\n\nMnO2\n\\(L_{\\ce{MnO2^{\\alpha}}} = \\frac{[\\ce{MnO2^{\\alpha}}]}{K_{\\ce{MnO2}} + [\\ce{MnO2^{\\alpha}}]}\\)\n\\(I_{\\ce{MnO2^{\\alpha}}} = \\frac{K_{\\ce{MnO2}}}{K_{\\ce{MnO2}} + [\\ce{MnO2^{\\alpha}}]}\\)\nwith \\(K_{\\ce{MnO2^{\\alpha}}} = \\{0.004 - 0.032\\} \\: mol \\: {kg}^{-1} \\cdot \\rho_{dry}\\) (Wang and Van Cappellen 1996)\n\n\nFe(OH)3\n\\(L_{\\ce{Fe(OH)3_{; tot}^\\alpha}} = \\frac{[\\ce{Fe(OH)3_{; tot}^\\alpha}]}{K_{\\ce{Fe(OH)3}} + [\\ce{Fe(OH)3_{; tot}^\\alpha}]}\\)\n\\(I_{\\ce{Fe(OH)3^\\alpha}} = \\frac{K_{\\ce{Fe(OH)3}}}{K_{\\ce{Fe(OH)3}} + [\\ce{Fe(OH)3_{; tot}^\\alpha}]}\\)\nwith \\(K_{\\ce{FeOH3}} = \\{0.065 - 0.1\\} \\: mol \\: {kg}^{-1} \\cdot \\rho_{dry}\\) (Wang and Van Cappellen 1996)\n\n\nSO42-\n\\(L_{\\ce{SO4^{2-}}} = \\frac{[\\ce{SO4^{2-}}]}{K_{\\ce{SO4^{2-}}} + [\\ce{SO4^{2-}}]}\\)\n\\(I_{\\ce{SO4^{2-}}} = \\frac{K_{\\ce{SO4^{2-}}}}{K_{\\ce{SO4^{2-}}} + [\\ce{SO4^{2-}}]}\\)\nwith \\(K_{SO42-} = 0.0016 \\: mol \\: {m^{-3}_{pw}}\\) (Wang and Van Cappellen 1996)\n\n\nH3PO4\n\\(L_{\\ce{H3PO4}} = \\frac{[\\ce{H3PO4}]}{K_{\\ce{H3PO4}} + [\\ce{H3PO4}]}\\)\nwith \\(K_{\\ce{H3PO4}} = 10^{-5} \\: mol \\: m^{-3}_{pw}\\) (Reinier)\n\nformulated for lump sum\n\n\n\n\nFeOH3 Fractions\n\\(\\ce{Fe(OH)3_{; tot}^\\alpha} = \\ce{Fe(OH)3^{\\alpha}} + \\ce{Fe(OH)3^\\alpha(H3PO4)_{\\lambda}}\\) with \\(\\lambda = 0.6\\)\n\\(\\chi = \\frac{[\\ce{Fe(OH)3^{\\alpha}}]}{[\\ce{Fe(OH)3_{; tot}^\\alpha}]}\\)\n\n\nReactions\n\nOM + O2 (R1)\n\\(\\ce{OM^{\\alpha, \\beta} + O2 -&gt; CO2 + b NH3 + c H3PO4 + H2O}\\)\n\\(R = k_{\\alpha, \\beta} \\: OM^{\\alpha, \\beta} \\: L_{\\ce{O2}}\\)\n\n\nOM + HNO3 (R2)\n\\(\\ce{OM^{\\alpha, \\beta} + 4/5 HNO3 -&gt; CO2 + b NH3 + c H3PO4 + 2/5 N2 + 7/5 H2O}\\)\n\\(R = k_{\\alpha, \\beta} \\: OM^{\\alpha, \\beta} \\: L_{\\ce{NO3-}} \\: I_{\\ce{O2}}\\)\n\n\nOM + MnO2 (R3)\n\\(\\ce{OM^{\\alpha, \\beta} + 2 MnO2 + H2O -&gt; CO2 + b NH3 + c H3PO4 + 2 Mn(OH)2}\\)\n\\(R = k_{\\alpha, \\beta} \\: OM^{\\alpha, \\beta} \\: L_{\\ce{MnO2}^\\alpha} \\: I_{\\ce{NO3^-}} \\: I_{\\ce{O2}}\\)\n\n\nOM + FeOH3 / FeOH3~H3PO4 (R4)\n\\(\\ce{OM^{\\alpha, \\beta} + 4 (\\chi Fe(OH)3^{\\alpha} + (1 - \\chi) Fe(OH)3^\\alpha(H3PO4)_{\\lambda} ) -&gt; CO2 + b NH3 + (c + (1- \\chi) 4 \\lambda) H3PO4 + 4 Fe(OH)2 + 3 H2O}\\)\n\\(R = k_{\\alpha, \\beta} \\: OM^{\\alpha, \\beta} \\: L_{\\ce{Fe(OH)3_{; tot}^\\alpha}} \\: I_{\\ce{MnO2^{\\alpha}}} \\: I_{\\ce{NO3^-}} \\: I_{\\ce{O2}}\\)\n\n\nOM + H2SO4 (R5)\n\\(\\ce{OM^{\\alpha, \\beta} + 1/2 H2SO4 -&gt; CO2 + b NH3 + c H3PO4 + 1/2 H2S + H2O}\\)\n\\(R = k_{\\alpha, \\beta} \\: OM^{\\alpha, \\beta} \\: L_{\\ce{SO4^{2-}}} \\: I_{\\ce{Fe(OH)3^\\alpha}} \\: I_{\\ce{MnO2^{\\alpha}}} \\: I_{\\ce{NO3^-}} \\: I_{\\ce{O2}}\\)\n\n\nMethanogenesis (R6)\n\\(\\ce{OM^{\\alpha, \\beta} -&gt; 1/2 CO2 + b NH3 + c H3PO4 + 1/2 CH4}\\)\n\\(R = k_{\\alpha, \\beta} \\: OM^{\\alpha, \\beta} \\: I_{\\ce{SO4^{2-}}} \\: I_{\\ce{Fe(OH)3^\\alpha}} \\: I_{\\ce{MnO2^{\\alpha}}} \\: I_{\\ce{NO3^-}} \\: I_{\\ce{O2}}\\)"
  },
  {
    "objectID": "index.html#secondary-redox-reactions",
    "href": "index.html#secondary-redox-reactions",
    "title": "Fe Treatment Model",
    "section": "Secondary Redox Reactions",
    "text": "Secondary Redox Reactions\n\nH2S Oxidation (R11)\n\\(\\ce{2 O2 + H2S -&gt; H2SO4}\\)\n\\(R = k \\: [\\ce{O2}] \\: [\\ce{\\sum H2S}]\\)\nwith \\(k \\geq 1.6 \\times 10^2 \\: m^3 \\: mol^{-1} \\: yr^{-1}\\) (Wang and Van Cappellen 1996)\n\n\nSO4-Reduction coupled to AOM (R12)\n\\(\\ce{H2SO4 + CH4 -&gt; CO2 + H2S + 2 H2O}\\)\n\\(R = k \\: [\\ce{SO4^{2-}}] \\: [\\ce{CH4}]\\)\nwith \\(k = 10 - 120 \\: m^3 \\: mol^{-1} \\: yr^{-1}\\) (Wang and Van Cappellen 1996; Rooze et al. 2016)"
  },
  {
    "objectID": "index.html#redox-precipitation-dissolution-reactions",
    "href": "index.html#redox-precipitation-dissolution-reactions",
    "title": "Fe Treatment Model",
    "section": "Redox Precipitation / Dissolution Reactions",
    "text": "Redox Precipitation / Dissolution Reactions\n\nFeOH3 / FeOH3~H3PO4-Reduction coupled to Sulphide Oxidation (R9)\n\\(\\ce{2 ( \\chi Fe(OH)3^{\\alpha} + (1-\\chi) Fe(OH)3^{\\alpha}(H3PO4)_{\\lambda} ) + H2S -&gt; 2 Fe(OH)_2 + S^0 + 2 H2O + 2 (1 - \\chi) \\lambda H3PO4}\\)\n\\(R = k \\: [\\ce{Fe(OH)3_{; tot}^{\\alpha}}] \\: [\\ce{\\sum H2S}] \\quad (mol \\: {m_{sf}}^{-3} \\: yr^{-3})\\)\nwith \\(k \\leq 10^2 \\: {m_{pw}}^3 \\: mol^{-1} \\: yr^{-1}\\) (Wang and Van Cappellen 1996)\n\nunit correct???\n\n\n\nFeOH3 / FeOH3~H3PO4-Formation (R10)\n\\(\\ce{O2 + 4 Fe(OH)_2 + 2 H2O + 4 L_{\\ce{H3PO4}} \\lambda H3PO4 -&gt; 4 ( (1 - L_{\\ce{H3PO4}}) Fe(OH)3^{\\alpha} + L_{\\ce{H3PO4}} Fe(OH)3^{\\alpha}(H3PO3)_{\\lambda} )}\\)\n\\(R = k \\: [\\ce{O2}] \\: [\\ce{Fe^{2+}}]\\)\nwith \\(k = 1.4 \\times 10^5 \\: {m_{pw}}^3 \\: mol^{-1} \\: yr^{-1}\\) (Wang and Van Cappellen 1996)"
  },
  {
    "objectID": "index.html#precipitation-reactions",
    "href": "index.html#precipitation-reactions",
    "title": "Fe Treatment Model",
    "section": "Precipitation Reactions",
    "text": "Precipitation Reactions\n\nSiderite Precipitation (R7) / Dissolution (R8)\nIn general:\n\\(\\ce{FeCO3 &lt;-&gt; Fe^{2+} + CO3^{2-}}\\)\nIn our model:\n\\(\\ce{FeCO3 + 2 H2O &lt;-&gt; Fe(OH)2 + H2CO3}\\)\nPrecipitation and Dissolution are split in two reactions from which only one is active at a time, depending on the saturation state \\(\\Omega\\).\n\\(\\Omega = \\frac{\\ce{[Fe^{2+}]} \\cdot \\ce{[CO3^{2-}]}}{K_{sp; siderite}} \\quad\\) with \\(\\quad K_{sp; siderite} = 10^{-10.4} \\cdot 1000^2 \\; mol^2 \\; m^{-6}\\)\nIf \\(\\: \\Omega &gt; 1\\):\n\n\\(R_{precipitation} = k_{precip} \\cdot (\\Omega - 1)^2 \\quad\\) with \\(\\quad k_{precip} \\approx 1.8 \\times 10^{2} \\; mol \\; {m_{sf}}^{-3} \\; yr^{-1}\\)\n\\(R_{dissolution} = 0\\)\n\nIf \\(\\: \\Omega &lt; 1\\):\n\n\\(R_{precipitation} = 0\\)\n\\(R_{dissolution} = - k_{diss} \\cdot \\ce{[FeCO3]} \\cdot (\\Omega - 1)^2 \\quad\\) with \\(\\quad k_{diss} \\approx 2.5 \\times 10^{-1} \\; yr^{-1}\\)\n\n\n\nFeS Precipitation (R13) / Dissolution (R14)\nChemically:\n\\(\\ce{Fe^{2+} + HS- &lt;-&gt; FeS + H+}\\)\nIn our model:\n\\(\\ce{Fe(OH)_2 + H2S &lt;-&gt; FeS + 2 H2O}\\)\nPrecipitation and Dissolution are split in two reactions from which only one is active at a time, depending on the saturation state \\(\\Omega\\).\n\\(\\Omega = \\frac{ \\ce{[Fe^{2+}]} \\cdot \\ce{[HS^{-}]} }{ \\ce{[H+]} \\cdot K_{sp; FeS} } \\quad\\) with \\(\\quad K_{sp; FeS} = 10^{-3.915} \\cdot 1000 \\; mol \\; m^{-3}\\)\n\nphreeqc.dat\nFeS(ppt) | FeS + H+ = Fe+2 + HS- | log_k -3.915\n\nIf \\(\\: \\Omega &gt; 1\\):\n\n\\(R_{precipitation} = k_{precip} \\cdot (\\Omega - 1)^2 \\quad\\) with \\(\\quad k_{precip} \\approx 2.5 \\times 10^{-3} \\; mol \\; {m_{sf}}^{-3} \\; yr^{-1}\\) (Markelov et al. 2019)\n\\(R_{dissolution} = 0\\)\n\nIf \\(\\: \\Omega &lt; 1\\):\n\n\\(R_{precipitation} = 0\\)\n\\(R_{dissolution} = - k_{diss} \\cdot \\ce{[FeS]} \\cdot (\\Omega - 1)^2 \\quad\\) with \\(\\quad k_{diss} \\approx 1 \\times 10^{-3} \\; yr^{-1}\\) (Markelov et al. 2019)\n\n\n\nVivianite Precipitation (R15) / Dissolution (R16)\nChemically:\n\\(\\ce{3 Fe^{2+} + 2 PO4^{2-} &lt;-&gt; Fe3(PO4)2}\\)\nIn our model:\n\\(\\ce{3 Fe(OH)2 + 2 H3PO4 &lt;-&gt; Fe3(PO4)2 + 6 H2O}\\)\nPrecipitation and Dissolution are split in two reactions from which only one is active at a time, depending on the saturation state \\(\\Omega\\).\n\\(\\Omega = \\frac{ \\ce{[Fe^{2+}]}^3 \\cdot \\ce{[HPO_4^{2-}]}^2 }{ \\ce{[H+]}^2 \\cdot K_{sp; Viv} } \\quad\\) with \\(\\quad K_{sp; Viv} = 10^{-36} \\cdot 1000^3 \\; mol^3 \\; m^{-9}\\)\n\nphreeqc.dat\nVivianite | Fe3(PO4)2:8H2O = 3 Fe+2 + 2 PO4-3 + 8 H2O | log_k -36.000\n\nIf \\(\\: \\Omega &gt; 1\\):\n\n\\(R_{precipitation} = k_{precip} \\cdot (\\Omega - 1)^2 \\quad\\) with \\(\\quad k_{precip} \\approx 1.1 \\times 10^{-2} \\; mol \\; {m_{sf}}^{-3} \\; yr^{-1}\\) (Markelov et al. 2019)\n\\(R_{dissolution} = 0\\)\n\nIf \\(\\: \\Omega &lt; 1\\):\n\n\\(R_{precipitation} = 0\\)\n\\(R_{dissolution} = - k_{diss} \\cdot \\ce{[Fe3(PO4)2]} \\cdot (\\Omega - 1)^2 \\quad\\) with \\(\\quad k_{diss} \\approx 5.3 \\times 10^{-3} \\; yr^{-1}\\) (Markelov et al. 2019)\n\n\n\nCaCO3 Precipitation (R17) / Dissolution (R18)\nChemically:\n\\(\\ce{Ca^{2+} + CO3^{2-} &lt;-&gt; CaCO3}\\)\nIn our model:\n\\(\\ce{Ca(OH)2 + H2CO3 &lt;-&gt; CaCO3 + 2 H2O}\\)\nPrecipitation and Dissolution are split in two reactions from which only one is active at a time, depending on the saturation state \\(\\Omega\\).\n\\(\\Omega = \\frac{ \\ce{[Ca^{2+}]} \\cdot \\ce{[CO3^{2-}]} }{ K_{sp; \\ce{CaCO3}} } \\quad\\) with \\(\\quad K_{sp; \\ce{CaCO3}} = 10^{-8.48} \\cdot 1000^2 \\; mol^2 \\; m^{-6}\\)\n\nphreeqc.dat\nCalcite | CaCO3 = CO3-2 + Ca+2 | log_k -8.480\n\nIf \\(\\: \\Omega &gt; 1\\):\n\n\\(R_{precipitation} = k_{precip} \\cdot (\\Omega - 1)^2 \\quad\\) with \\(\\quad k_{precip} \\approx 1 \\times 10^{-1} \\; mol \\; {m_{sf}}^{-3} \\; yr^{-1}\\) (Markelov et al. 2019)\n\\(R_{dissolution} = 0\\)\n\nIf \\(\\: \\Omega &lt; 1\\):\n\n\\(R_{precipitation} = 0\\)\n\\(R_{dissolution} = - k_{diss} \\cdot \\ce{[CaCO3]} \\cdot (\\Omega - 1)^2 \\quad\\) with \\(\\quad k_{diss} \\approx 1.25 \\times 10^{-1} \\; yr^{-1}\\) (Markelov et al. 2019)\n\n\n\nApatite Precipitation (R19) / Dissolution (R20)\nChemically:\n\\(\\ce{3 Ca^{2+} + 2 HPO4^{2-} &lt;-&gt; Ca3(PO4)2 + 2 H+}\\)\nIn our model:\n\\(\\ce{3 Ca(OH)2 + 2 H3PO4 &lt;-&gt; Ca3(PO4)2 + 6 H2O}\\)\nPrecipitation and Dissolution are split in two reactions from which only one is active at a time, depending on the saturation state \\(\\Omega\\).\n\\(\\Omega = \\frac{ \\ce{[Ca^{2+}]}^3 \\cdot \\ce{[HPO_4^{2-}]}^2 }{ \\ce{[H+]}^2 \\cdot K_{sp; Apatite} } \\quad\\) with \\(\\quad K_{sp; Apatite} = 6 \\times 10^{-20} \\; mol^3 \\; m^{-9}\\)\n\n? Calciumcarbonate or Hydroxyapatite ?\n\nIf \\(\\: \\Omega &gt; 1\\):\n\n\\(R_{precipitation} = k_{precip} \\cdot (\\Omega - 1)^2 \\quad\\) with \\(\\quad k_{precip} \\approx 1.4 \\times 10^{-6} \\; mol \\; {m_{sf}}^{-3} \\; yr^{-1}\\) (Markelov et al. 2019)\n\\(R_{dissolution} = 0\\)\n\nIf \\(\\: \\Omega &lt; 1\\):\n\n\\(R_{precipitation} = 0\\)\n\\(R_{dissolution} = - k_{diss} \\cdot \\ce{[Apatite]} \\cdot (\\Omega - 1)^2 \\quad\\) with \\(\\quad k_{diss} \\approx 3.7 \\times 10^{-2} \\; yr^{-1}\\) (Markelov et al. 2019)"
  },
  {
    "objectID": "index.html#equilibrium-reactions-described-via-tableau",
    "href": "index.html#equilibrium-reactions-described-via-tableau",
    "title": "Fe Treatment Model",
    "section": "Equilibrium Reactions described via Tableau",
    "text": "Equilibrium Reactions described via Tableau\nThe Tableau is used to calculate equilibrium speciation of solute species after model run. Fast equilibrium reactions are neglected during model runtime (so far).\n\n\n\n\n\nSpecies\nH2O\nH\nH2CO3\nH2PO4\nNO3\nNH4\nSO4\nH2S\nlogK\n\n\n\n\nH2O\n1\n\n\n\n\n\n\n\n0.00\n\n\nH\n\n1\n\n\n\n\n\n\n0.00\n\n\nOH\n1\n-1\n\n\n\n\n\n\n-8.00\n\n\nH2CO3\n\n\n1\n\n\n\n\n\n0.00\n\n\nHCO3\n\n-1\n1\n\n\n\n\n\n-3.35\n\n\nCO3\n\n-2\n1\n\n\n\n\n\n-10.68\n\n\nH3PO4\n\n1\n\n1\n\n\n\n\n-0.84\n\n\nH2PO4\n\n\n\n1\n\n\n\n\n0.00\n\n\nHPO4\n\n-1\n\n1\n\n\n\n\n-4.21\n\n\nPO4\n\n-2\n\n1\n\n\n\n\n-13.53\n\n\nHNO3\n\n1\n\n\n1\n\n\n\n-4.37\n\n\nNO3\n\n\n\n\n1\n\n\n\n0.00\n\n\nNH4\n\n\n\n\n\n1\n\n\n0.00\n\n\nNH3\n\n-1\n\n\n\n1\n\n\n-6.25\n\n\nH2SO4\n\n2\n\n\n\n\n1\n\n-7.10\n\n\nHSO4\n\n1\n\n\n\n\n1\n\n-1.10\n\n\nSO4\n\n\n\n\n\n\n1\n\n0.00\n\n\nH2S\n\n\n\n\n\n\n\n1\n0.00\n\n\nHS\n\n-1\n\n\n\n\n\n1\n-4.00\n\n\nS2\n\n-2\n\n\n\n\n\n1\n-15.00"
  },
  {
    "objectID": "index.html#functions",
    "href": "index.html#functions",
    "title": "Fe Treatment Model",
    "section": "Functions",
    "text": "Functions\n\nSave and upload Results\n\n\nCode\nsave_and_upload_results &lt;- function(result, result_name, result_type, grid) {\n\n  # result_type: \"std\" | \"trans\"\n\n  # save as .rds\n  saveRDS(result, paste0(\"last_results/\", result_name, \".rds\"))\n\n  # save results as .csv\n  ## std\n  if (result_type == \"std\") {\n    # species concentrations\n    write.csv(result$y, paste0(\"../temp_drop/\", result_name, \"_species.csv\"))\n    # transport\n    write.csv(result$transport, paste0(\"../temp_drop/\", result_name, \"_transport.csv\"))\n    # sumR\n    write.csv(result$sumR, paste0(\"../temp_drop/\", result_name, \"_sumR.csv\"))\n    # reaction rates\n    write.csv(result$rates, paste0(\"../temp_drop/\", result_name, \"_rates.csv\"))\n    # omega\n    write.csv(result$omega, paste0(\"../temp_drop/\", result_name, \"_omega.csv\"))\n    # speciation\n    try(write.csv(result$solute_equilibrium$species_conc, paste0(\"../temp_drop/\", result_name, \"_speciation.csv\")), silent = TRUE)\n    \n  } else if (result_type == \"trans\") {\n\n  }\n\n  # upload to github repo: git@github.com:RoKo-reuther/temp_drop.git\n  system(\"cd ../temp_drop && git add . && git commit -m 'update' && git push\")\n}\n\n\n\n\nSolve Tableau\n\n\nCode\nsolve_tableau &lt;- function(component_total, tableau, logK, N_grid, tableau_species) {\n  \n  # load shared object\n  dyn.load(\"solve_tableau.so\")\n\n  res &lt;- .Fortran(\"solve_tableau\",\n                  component_total = as.double(component_total),\n                  tableau         = matrix(as.double(tableau), ncol = ncol(tableau)),\n                  logK            = as.double(logK),\n                  N_components    = as.integer(ncol(tableau)),\n                  N_species       = as.integer(nrow(tableau)),\n                  N_grid          = as.integer(N_grid),\n                  iter_pcfm       = rep(as.integer(0), N_grid),\n                  iter_newton     = rep(as.integer(0), N_grid),\n                  info_newton     = rep(as.integer(0), N_grid),\n                  difference      = matrix(as.double(0), ncol = ncol(tableau), nrow = N_grid),\n                  species_conc    = matrix(as.double(0), ncol = nrow(tableau), nrow = N_grid),\n                  success         = rep(as.integer(0), N_grid)\n                  )\n\n  colnames(res$species_conc) &lt;- tableau_species\n\n  return(res)\n  \n}\n\n\n\n\nCalculate Speciation-Ratios for Fixed pH\n\n\nCode\nspeciation_ratios &lt;- function(pH, tableau, tableau_species, logK) {\n\n  # determine number of total components TOT_X in tableau\n  N_components &lt;- ncol(tableau)\n\n  # prepare vector with \"component-concentrations\"\n  # here we are only interested in ratios at a fixed pH ...\n  # so the only one that matters is the first one: TOT_H; the rest is set to 1\n  component_conc &lt;- c(log10(10^-pH * 10^3), rep(1, N_components - 1))\n\n  # calculate species concentrations\n  species_conc &lt;- as.list(10**(tableau %*% component_conc + logK))\n\n  # name entries\n  names(species_conc) &lt;- tableau_species\n\n  # calculate ratios of interest\n  with(species_conc, {\n    ratios &lt;- c(\n      fixed_H = 10^-pH * 10^3,\n      f_H2CO3 = H2CO3 / sum(H2CO3, HCO3, CO3),\n      f_HCO3  =  HCO3 / sum(H2CO3, HCO3, CO3),\n      f_CO3   =   CO3 / sum(H2CO3, HCO3, CO3),\n      f_H2S   =   H2S / sum(H2S, HS, S2),\n      f_HS    =    HS / sum(H2S, HS, S2),\n      f_S2    =    S2 / sum(H2S, HS, S2),\n      f_H3PO4 = H3PO4 / sum(H3PO4, H2PO4, HPO4, PO4),\n      f_H2PO4 = H2PO4 / sum(H3PO4, H2PO4, HPO4, PO4),\n      f_HPO4  = HPO4  / sum(H3PO4, H2PO4, HPO4, PO4),\n      f_PO4   = PO4   / sum(H3PO4, H2PO4, HPO4, PO4),\n      f_NH4   = NH4   / sum(NH4, NH3),\n      f_NH3   = NH3   / sum(NH4, NH3)\n    )\n\n    return(ratios)\n  })\n}\n\n\n\n\nPlot steady.1D Results\n\n\nCode\nplot_simple_comparision &lt;- function(a, b, a_name, b_name, grid, xlab, ylab, log = \"\") {\n  plot(\n    grid$x.mid ~ a,\n    ylim = c(max(grid$x.int), min(grid$x.int)),\n    xlim = c(min(a, b), max(a, b)),\n    type = \"l\",\n    ylab = ylab,\n    xlab = xlab,\n    lwd = 2,\n    col = \"gray45\",\n    lty = 2,\n    log = log\n  )\n  points(\n    grid$x.mid ~ b,\n    type = \"l\",\n    lwd = 2,\n    col = \"black\"\n  )\n  legend(\n    \"bottomright\",\n    legend = c(a_name, b_name),\n    col = c(\"gray45\", \"black\"),\n    lwd = 2,\n    lty = c(2, 1),\n    box.lwd = 0\n  )\n}\n\nplot_std_profiles &lt;- function(std_gray, std_black, grid) {\n\n  std_black &lt;- cbind(grid = grid$x.mid, std_black$y)\n  \n  plot(std_gray, xyswap = TRUE, xlab = \"mol/m3_phase\", ylab = \"depth (m)\",\n       grid = grid$x.mid,\n       which = model_species,\n       col = \"gray45\",\n       lty = 2,\n       lwd = 2,\n       cex = 1.5,\n       mfrow = c(1,1),\n       obs = std_black,\n       obspar = c(type = \"l\", lwd = 2, col = \"black\")\n  )\n}\n\nplot_std_rates &lt;- function(std, reactions, title = \"\") {\n  \n  # rcols &lt;- viridis::viridis(length(std$rates))\n  # \n  # matplot(y = grid$x.mid,\n  #         x = as.data.frame(std$rates),\n  #         type = \"l\", lwd=2, lty=1,\n  #         ylim = c(length,0), \n  #         col = rcols,\n  #         ylab=\"depth (m)\", \n  #         xlab=\"reaction rate (mol/(m3_bulk yr))\")\n  # \n  # legend(\n  #   x = \"bottomright\",\n  #   legend = names(std$rates),\n  #   lty = 1,\n  #   col = rcols &lt;- viridis::viridis(length(std$rates)),\n  #   lwd = 2\n  # )\n  \n  data &lt;- as.data.frame(std$rates)\n  data$depth &lt;- grid$x.mid\n  \n  fig &lt;- plot_ly(data, type = 'scatter', mode = 'lines', line = list(width = 3))\n  for (rate in reactions) {\n    fig &lt;- fig %&gt;% add_trace(y = ~depth, x = std$rates[[rate]], name = rate)\n  }\n  fig &lt;- fig %&gt;% layout(\n    title = title,\n    xaxis = list(title = \"reaction rate (mol/(m3_bulk yr))\"),\n    yaxis = list(title = \"depth (m)\", range = c(length,0)),\n    font = list(size = 16)\n  )\n    \n  fig\n}\n\n\n\n\nPlot Runge-Kutta Results\n\n\nCode\nplot_std_conc_evolution &lt;- function(std_matrix_list, selection, N_lines, grid) {\n  \n  data &lt;- std_matrix_list[[selection]]\n  \n  # number of available timesteps\n  available_timesteps &lt;- ncol(data)\n  \n  # selection of N_lines timesteps\n  selected_timesteps &lt;- floor(seq.int(1, available_timesteps, length.out = N_lines))\n  \n  # reduce data\n  data &lt;- data[,selected_timesteps]\n  \n  # plot\n  matplot(y = grid$x.mid,\n          x = data,\n          type = \"l\",\n          ylim = c(max(grid$x.mid), min(grid$x.mid)),\n          xlab = \"concentration (mol/m^3_phase)\",\n          ylab = \"depth (m)\",\n          main = selection)\n}\n\nplot_std_rate_evolution &lt;- function(std, selection, N_lines) {\n  \n  data &lt;- std$rates_split[[selection]]\n  \n  # number of available depths\n  available_depths &lt;- nrow(data)\n  \n  # selection of N_lines depths\n  selected_depths &lt;- floor(seq.int(1, available_depths, length.out = N_lines))\n  \n  # reduce data\n  data &lt;- data[selected_depths,]\n  \n  # plot\n  matplot(x = std$times,\n          y = t(data),\n          type = \"l\",\n          ylab = \"rate (mol/(m^3_phase * yr))\",\n          xlab = \"time (a)\",\n          main = selection)\n}\n\n\n\n\nPlot Speciation\n\n\nCode\nplot_speciation &lt;- function(speciation, grid) {\n\n  rcols &lt;- viridis::viridis(6)\n\n  matplot(y=grid$x.mid, x = speciation[,3:5],\n    type=\"l\", lwd=2, lty=1,\n    ylim=c(length,0),\n    col=c(rcols[3], rcols[6], rcols[1]),\n    ylab=\"depth (m)\", \n    xlab=\"mol/m3_phase\"\n  )\n  legend(\n    x = \"bottom\",\n    legend = c(\"H2CO3\", \"HCO3\", \"CO3\"),\n    lty = 1,\n    col = c(rcols[3], rcols[6], rcols[1]),\n    lwd = 2\n  )\n\n  matplot(y=grid$x.mid, x = speciation[,6:9],\n    type=\"l\", lwd=2, lty=1,\n    ylim=c(length,0), \n    col=c(rcols[3], rcols[6], rcols[1], rcols[4]),\n    ylab=\"depth (m)\", \n    xlab=\"mol/m3_phase\"\n  )\n  legend(\n    x = \"bottom\",\n    legend = c(\"H3PO4\", \"H2PO4-\", \"HPO42-\", \"PO43-\"),\n    lty = 1,\n    col = c(rcols[3], rcols[6], rcols[1], rcols[4]),\n    lwd = 2\n  )\n\n  matplot(y=grid$x.mid, x = speciation[,10:11],\n    type=\"l\", lwd=2, lty=1,\n    ylim=c(length,0), \n    col=c(rcols[3], rcols[6]),\n    ylab=\"depth (m)\", \n    xlab=\"mol/m3_phase\"\n  )\n  legend(\n    x = \"bottom\",\n    legend = c(\"HNO3\", \"NO3-\"),\n    lty = 1,\n    col = c(rcols[3], rcols[6]),\n    lwd = 2\n  )\n\n  matplot(y=grid$x.mid, x = speciation[,12:13],\n    type=\"l\", lwd=2, lty=1,\n    ylim=c(length,0), \n    col=c(rcols[3], rcols[6]),\n    ylab=\"depth (m)\", \n    xlab=\"mol/m3_phase\"\n  )\n  legend(\n    x = \"bottom\",\n    legend = c(\"NH4+\", \"NH3\"),\n    lty = 1,\n    col = c(rcols[3], rcols[6]),\n    lwd = 2\n  )\n\n  matplot(y=grid$x.mid, x = speciation[,14:16],\n    type=\"l\", lwd=2, lty=1,\n    ylim=c(length,0), \n    col=c(rcols[3], rcols[6], rcols[1]),\n    ylab=\"depth (m)\", \n    xlab=\"mol/m3_phase\"\n  )\n  legend(\n    x = \"bottom\",\n    legend = c(\"H2SO4\", \"HSO4-\", \"SO42-\"),\n    lty = 1,\n    col = c(rcols[3], rcols[6], rcols[1]),\n    lwd = 2\n  )\n\n  matplot(y=grid$x.mid, x = speciation[,17:19],\n    type=\"l\", lwd=2, lty=1,\n    ylim=c(length,0), \n    col=c(rcols[3], rcols[6], rcols[1]),\n    ylab=\"depth (m)\", \n    xlab=\"mol/m3_phase\"\n  )\n  legend(\n    x = \"bottom\",\n    legend = c(\"H2S\", \"HS-\", \"S2-\"),\n    lty = 1,\n    col = c(rcols[3], rcols[6], rcols[1]),\n    lwd = 2\n  )\n}\n\n\n\n\nSplit dynamic model results\n\n\nCode\nsplit_trans_results &lt;- function(trans, grid, tableau_species) {\n\n  res     &lt;- list()\n  N_grid  &lt;- attr(trans, \"dimens\")\n  N_spec  &lt;- attr(trans, \"nspec\")\n\n  # extract blocks\n\n  ## time stamps\n  times    &lt;- trans[,1]\n  N_times  &lt;- length(times)\n\n  ## species concentrations\n  start &lt;- 2\n  end   &lt;- 2 + N_grid * N_spec - 1\n\n  res[[\"species\"]] &lt;- data.frame(\n    name  = rep(attr(trans, \"ynames\"), each = N_times * N_grid),\n    value = as.vector(trans[,start:end]),\n    time  = rep(times, N_grid * N_spec),\n    step  = rep(seq(1, N_times), N_grid * N_spec),\n    depth = rep(rep(grid$x.mid, each = N_times), N_spec)\n  )\n\n  ## transport - tran$dC\n  data &lt;- trans[, grep(\"^transport.tran.*\\\\.dC.*$\", colnames(trans))]\n  \n  res[[\"transport\"]] &lt;- data.frame(\n    name  = rep(sub(\".dC.*\", \"\", sub(\"transport.tran.\", \"\", colnames(data))), each = N_times),\n    value = unlist(as.vector(data)),\n    time  = rep(times, N_grid * N_spec),\n    step  = rep(seq(1, N_times), N_grid * N_spec),\n    depth = rep(rep(grid$x.mid, each = N_times), N_spec)\n  )\n\n  ## transport - fluxes\n  data &lt;- trans[, grep(\"^transport.tran.*\\\\.flux.*$\", colnames(trans))]\n  \n  res[[\"fluxes\"]] &lt;- data.frame(\n    name  = rep(sub(\".flux.*\", \"\", sub(\"transport.tran.\", \"\", colnames(data))), each = N_times),\n    value = unlist(as.vector(data)),\n    time  = rep(times, N_spec * 2),\n    step  = rep(seq(1, N_times), N_spec * 2),\n    type  = rep(rep(c(\"up\", \"down\"), each = N_times), N_spec)\n  )\n\n  ## sumR\n  data   &lt;- trans[, grep(\"^sumR.\", colnames(trans))]\n\n  N_sumR &lt;- attr(trans, \"lengthvar\")[[\"sumR\"]]\n  len_to_remove &lt;- nchar(as.character(rep(seq(1, N_grid), N_sumR)))\n  names &lt;- substr(colnames(data), 1, nchar(colnames(data)) - len_to_remove)\n  names &lt;- rep(sub(\"sumR.R.\", \"\", names), each = N_times)\n\n  res[[\"sumR\"]] &lt;- data.frame(\n    name  = names,\n    value = unlist(as.vector(data)),\n    time  = rep(times, N_grid * N_sumR),\n    step  = rep(seq(1, N_times), N_grid * N_sumR),\n    depth = rep(rep(grid$x.mid, each = N_times), N_sumR)\n  )\n\n  ## reaction rates\n  data &lt;- trans[, grep(\"^rates.\", colnames(trans))]\n\n  N_rates &lt;- attr(trans, \"lengthvar\")[[\"rates\"]]\n  len_to_remove &lt;- nchar(as.character(rep(seq(1, N_grid), N_rates)))\n  names &lt;- substr(colnames(data), 1, nchar(colnames(data)) - len_to_remove)\n  names &lt;- rep(sub(\"rates.\", \"\", names), each = N_times)\n  \n  res[[\"rates\"]] &lt;- data.frame(\n    name  = names,\n    value = unlist(as.vector(data)),\n    time  = rep(times, N_grid * N_rates),\n    step  = rep(seq(1, N_times), N_grid * N_rates),\n    depth = rep(rep(grid$x.mid, each = N_times), N_rates)\n  )\n\n  ## omega\n  data &lt;- trans[, grep(\"^omega.\", colnames(trans))]\n\n  N_omega &lt;- attr(trans, \"lengthvar\")[[\"omega\"]]\n  len_to_remove &lt;- nchar(as.character(rep(seq(1, N_grid), N_omega)))\n  names &lt;- substr(colnames(data), 1, nchar(colnames(data)) - len_to_remove)\n  names &lt;- rep(sub(\"omega.\", \"\", names), each = N_times)\n  \n  res[[\"omega\"]] &lt;- data.frame(\n    name  = names,\n    value = unlist(as.vector(data)),\n    time  = rep(times, N_grid * N_omega),\n    step  = rep(seq(1, N_times), N_grid * N_omega),\n    depth = rep(rep(grid$x.mid, each = N_times), N_omega)\n  )\n\n  ## solute equilibrium: speciation\n  data &lt;- trans[, grep(\"^solute_equilibrium.species_conc\", colnames(trans))]\n\n  N_tableau_species &lt;- length(tableau_species)\n\n  res[[\"speciation\"]] &lt;- data.frame(\n    name  = rep(tableau_species, each = N_grid * N_times),\n    value = unlist(as.vector(data)),\n    time  = rep(times, N_grid * N_tableau_species),\n    step  = rep(seq(1, N_times), N_grid * N_tableau_species),\n    depth = rep(rep(grid$x.mid, each = N_times), N_tableau_species)\n  )\n\n  return(res)\n\n}\n\n\n\n\nPlot dynamic concentrations (contour)\n\n\nCode\nplot_trans_conc_contour &lt;- function(trans_res, species) {\n\n  data &lt;- subset(trans_res$species, name == species)\n\n  fig &lt;- plot_ly(data, x = ~time, y = ~depth, z = ~value, type = \"contour\")\n\n  fig &lt;- fig %&gt;% layout(\n    title = list(text = paste(species, \" (mol/(m3_phase))\"), yanchor = \"top\", y = 1),\n    xaxis = list(title = \"time (yr)\"),\n    yaxis = list(title = \"depth (m)\", range = c(max(data$depth),0)),\n    font = list(size = 16)\n  )\n\n  fig\n}\n\n\n\n\nPlot dynamic concentrations (lines)\n\n\nCode\nplot_trans_conc_lines &lt;- function(trans_res, species, timesteps) {\n\n  data &lt;- subset(trans_res$species, name == species)\n\n  fig &lt;- plot_ly(type = 'scatter', mode = 'lines', line = list(width = 3))\n\n  for (timestep in timesteps) {\n    depth &lt;- subset(data, time == timestep)$depth\n    value &lt;- subset(data, time == timestep)$value\n    fig   &lt;- fig %&gt;% add_trace(y = ~depth, x = ~value, name = toString(timestep))\n  }\n\n  fig &lt;- fig %&gt;% layout(\n    xaxis = list(title = paste(species, \" (mol/(m3_phase))\")),\n    yaxis = list(title = \"depth (m)\", range = c(max(data$depth),0)),\n    font  = list(size = 16)\n  )\n\n  fig\n}"
  },
  {
    "objectID": "index.html#model-setup",
    "href": "index.html#model-setup",
    "title": "Fe Treatment Model",
    "section": "Model Setup",
    "text": "Model Setup\n\nGrid\n\nlength   &lt;- 0.1 # (m)\nN_grid   &lt;- 200 # (-)\n\ngrid     &lt;- setup.grid.1D(L = length, N = N_grid, dx.1 = 0.0005)\n\n\n\nPorosity / Solid Volume Fraction\n\nporFun.L  &lt;- function(x, por.SWI, por.deep, porcoef) {\n  return( por.deep + (por.SWI-por.deep) * exp(-x*porcoef) ) \n}\n\nporFun.S  &lt;- function(x, por.SWI, por.deep, porcoef) {\n  return( 1 - porFun.L(x, por.SWI, por.deep, porcoef) ) \n}\n\npor.swi  &lt;- 0.818\npor.deep &lt;- 0.818\n\ngrid.por &lt;- setup.prop.1D(func = porFun.L, grid = grid, por.SWI = por.swi,\n                           por.deep=por.deep, porcoef=100)\n\ngrid.svf  &lt;- setup.prop.1D(func = porFun.S, grid = grid, por.SWI = por.swi,\n                           por.deep=por.deep, porcoef=100)\n\nconversion_factors &lt;- list(\n  s2p = ((grid.svf$mid) / grid.por$mid), # conversion of x/m3_svf to x/m3_pw\n  p2s = (grid.por$mid / (grid.svf$mid))  # conversion of x/m3_pw  to x/m3_svf\n)\n\n\n\nAdvective Velocities\n\n# sedimentation velocity\nv &lt;- 0.002  # (m/yr)\n\n# returns pore water advective velocities (u) and solid phase advective velocities (v)\nadvective_velocities &lt;- setup.compaction.1D(\n    v.0 = v,\n    por.0 = por.swi,\n    por.inf = por.deep,\n    por.grid = grid.por\n)\n\n\n\nDiffusion Coefficients\n\nsalinity    &lt;- 35 # (psu)\ntemperature &lt;- 5  # (dgC)\npressure    &lt;- 1.013253 # (bar)\nDb          &lt;- 0.002 # mixing rate of the sediment; Bioturbation coefficient (m2/y); 1e-5 - 0.01 (Katsev 2006)\nDb_mid      &lt;- 0.2  # middle of Db decreasing zone (m)\nDb_width    &lt;- 0.1   # width of Db decreasing zone (m)\n\ngrid.Db &lt;- setup.prop.1D(\n    func = p.sig,\n    y.0 = Db,\n    y.inf = 0,\n    x.L = Db_mid,\n    x.att = Db_width,\n    grid = grid\n)\n#grid.Db &lt;- setup.prop.1D(value = Db, grid = grid)\n\ntortuosity_squared &lt;- 1 - log(grid.por$int^2)\n\ns2yr &lt;- 3600 * 24 * 365.25\n\ndiffcoeff_species &lt;- c(\"HCO3\", \"HCO3\", \"CH4\", \"H2PO4\", \"NO3\", \"NH4\", \"SO4\",\n                       \"O2\", \"Mn\", \"Fe\", \"H2S\", \"N2\", \"Ca\")\n\ndiffcoeffs &lt;- diffcoeff(\n  species = diffcoeff_species,\n  S = salinity,\n  t = temperature,\n  P = pressure\n)\n\ndiffusion_coefficients &lt;- list(\n  \n  # solute: molar diffusion coefficient / tortuosity**2 + bioturbation coefficient\n  # solid: bioturbation coefficient\n  \n  ALK   = diffcoeffs[[1]]  * s2yr / tortuosity_squared + grid.Db$int,\n  DIC   = diffcoeffs[[2]]  * s2yr / tortuosity_squared + grid.Db$int,\n  CH4   = diffcoeffs[[3]]  * s2yr / tortuosity_squared + grid.Db$int,\n  H2PO4 = diffcoeffs[[4]]  * s2yr / tortuosity_squared + grid.Db$int,\n  NO3   = diffcoeffs[[5]]  * s2yr / tortuosity_squared + grid.Db$int,\n  NH4   = diffcoeffs[[6]]  * s2yr / tortuosity_squared + grid.Db$int,\n  SO4   = diffcoeffs[[7]]  * s2yr / tortuosity_squared + grid.Db$int,\n  O2    = diffcoeffs[[8]]  * s2yr / tortuosity_squared + grid.Db$int,\n  Mn2   = diffcoeffs[[9]]  * s2yr / tortuosity_squared + grid.Db$int,\n  Fe2   = diffcoeffs[[10]] * s2yr / tortuosity_squared + grid.Db$int,\n  H2S   = diffcoeffs[[11]] * s2yr / tortuosity_squared + grid.Db$int,\n  N2    = diffcoeffs[[12]] * s2yr / tortuosity_squared + grid.Db$int,\n  Ca2   = diffcoeffs[[13]] * s2yr / tortuosity_squared + grid.Db$int,\n  solid = grid.Db$int\n    \n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBoundary Conditions\n\nboundary_conditions &lt;- c(\n  # Alkalinity in eq/m3?\n  ALK_up   = 2.5, #!\n  # Solutes: concentrations in mol m-3\n  DIC_up   = 1,\n  CH4_up   = 0,\n  H2PO4_up = 0.00235,\n  NO3_up   =  0.0015, #!\n  NH4_up   = 0.022, #!\n  SO4_up   = 28, #!\n  O2_up    = 0.213, #!\n  N2_up    = 0,\n  Mn2_up   = 0.002, #!\n  Fe2_up   = 0, #!\n  H2S_up   = 0,\n  Ca2_up   = 1.17,\n  # Solids: flux in mol m-2 yr-1\n  OM_up      = 0.001 * 365, #0.013\n  OM_beta_up = 0.012 * 365,\n  MnO2_up    = 0.4,\n  FeOH3_up   = 0.75,\n  FeOH3_P_up = 0,\n  FeCO3_up   = 0,\n  S0_up      = 0, #!\n  FeS_up     = 0,\n  Viv_up     = 0,\n  CaCO3_up   = 0,\n  Apatite_up = 0,\n  MnCO3_up   = 0\n)\n\n\n\nReaction Parameters\n\ndry_density_sediment &lt;- 2700 # kg/m³\n\nreaction_parameter &lt;- c(\n    # OM degradation\n  ## reaction constants\n  k_alpha = 1e-3 * 365, # yr-1; 0.005 * 365\n  k_beta  = 6e-5 * 365, # yr-1\n  ## composition of OM\n  OM_a    = 1,\n  OM_b    = 12.04545 / 106,\n  OM_c    = 1 / 106,\n  ## limitation / inhibition constants (mol m-3)\n  K_O2    = 0.02,\n  K_NO3   = 0.002,\n  K_MnO2  = 0.016 * dry_density_sediment,#0.004 * dry_density_sediment,\n  K_FeOH3 = 0.1 * dry_density_sediment,#0.065 * dry_density_sediment,\n  K_SO4   = 1.6,\n  K_H3PO4 = 10^-5,\n  ## ratio of Fe to P in Fe(OH)_3(H3PO4)_lambda\n  lambda  = 0.6,\n\n  # Siderite Precipitation / Dissolution\n  k_precip_siderite = 1215,   # mol m-3_sf yr-1\n  k_diss_siderite   = 2.5e-1, # yr-1\n  Ksp_siderite      = 10^(-8.4) * 1000^2, # mol2 m-6\n\n  # FeOH3 / FeOH3~H3PO4-Reduction coupled to Sulphide Oxidation\n  k_Fe_red_S_ox = 8, # m3 mol-1 yr-1\n\n  # FeOH3 / FeOH3~H3PO4-Formation\n  k_FeOH3_formation = 1.4e2, # m3 mol-1 yr-1 &lt;&lt;&lt; 1.4e5 in  WVP\n\n  # H2S Oxidation\n  k_H2S_oxidation = 1.6e2, # m3_pw mol-1 yr-1\n\n  # SO4 Reduction Coupled to AOM\n  k_SO4_reduction = 10, # m3_pw mol-1 yr-1\n\n  # FeS Precipitation / Dissolution\n  k_precip_FeS = 100 * 2.5e-3, # mol m-3_sf yr-1\n  k_diss_FeS   = 100 * 1e-3, # yr-1\n  Ksp_FeS      = 10^(-3.915) * 1000, # mol m-3\n\n  # Vivianite Precipitation / Dissolution\n  k_precip_Viv = 1.1e-2, # mol m-3_sf yr-1\n  k_diss_Viv   = 5.3e-3, # yr-1\n  Ksp_Viv      = 10^(-36) * 1000^5, # mol3 m-9\n\n  # CaCO3 Precipitation / Dissolution\n  k_precip_CaCO3 = 1.1e-1,  # mol m-3_sf yr-1\n  k_diss_CaCO3   = 1.25e-1, # mol m-3_sf yr-1\n  Ksp_CaCO3      = 10^(-8.48) * 1000^2, # mol2 m-6\n\n  # Apatite Precipitation / Dissolution\n  k_precip_Apatite = 1.4e-6, # mol m-3 yr-1\n  k_diss_Apatite   = 3.7e-2, # yr-1\n  Ksp_Apatite      = 6e-20,  # mol3 m-9; 6e-20\n\n  # Oxidation of Fe2 by MnO2\n  k_I11 = 3e3,\n\n  # Ammonium Oxidation\n  k_I12 = 5e3,\n\n  # Sulphide Oxidation by MnO2\n  k_I14 = 20,\n\n  # FeS Oxidation by O2\n  k_I16 = 3.2e2,\n\n  # CH4 Oxidation by O2\n  k_I17 = 1e7,\n\n  # MnCO3 Precipitation / Dissolution\n  k_precip_MnCO3 = 270,\n  k_diss_MnCO3 = 0.8,\n  Ksp_MnCO3 = 10^(-8.5) * 1000^2\n)\n\n\n\nCollect Inputs\n\nratios_pH7 &lt;- speciation_ratios(pH = 7, tableau, tableau_species, logK)\n\nparameter &lt;- c(\n  N_grid = N_grid,\n  conversion_factors,\n  boundary_conditions,\n  reaction_parameter,\n  ratios_pH7,\n  logK = logK,\n  tableau = tableau,\n  tableau_species = tableau_species\n)\n\nN_species &lt;- length(model_species)\n\n\n\nModel Function\n\n\nCode\nmodel &lt;- function (t, state, parms, diff_coeffs, adv_vel, solve_equilibrium, precipitation){\n  \n  with (as.list(parms),{\n    \n    # assign state variables\n    i &lt;- 1\n    # state variables for solutes are total amounts,\n    # but implicitly concentrations (total_amount/m³_pw)\n    ALK     &lt;- state[((i-1) * N_grid + 1) : (i * N_grid)]; i &lt;- i + 1 # -TOT_H\n    DIC     &lt;- state[((i-1) * N_grid + 1) : (i * N_grid)]; i &lt;- i + 1 # TOT_H2CO3\n    TOT_P   &lt;- state[((i-1) * N_grid + 1) : (i * N_grid)]; i &lt;- i + 1\n    TOT_N5  &lt;- state[((i-1) * N_grid + 1) : (i * N_grid)]; i &lt;- i + 1\n    TOT_N3  &lt;- state[((i-1) * N_grid + 1) : (i * N_grid)]; i &lt;- i + 1\n    TOT_S6  &lt;- state[((i-1) * N_grid + 1) : (i * N_grid)]; i &lt;- i + 1\n    TOT_S2  &lt;- state[((i-1) * N_grid + 1) : (i * N_grid)]; i &lt;- i + 1\n    CH4     &lt;- state[((i-1) * N_grid + 1) : (i * N_grid)]; i &lt;- i + 1\n    O2      &lt;- state[((i-1) * N_grid + 1) : (i * N_grid)]; i &lt;- i + 1\n    N2      &lt;- state[((i-1) * N_grid + 1) : (i * N_grid)]; i &lt;- i + 1\n    Mn2     &lt;- state[((i-1) * N_grid + 1) : (i * N_grid)]; i &lt;- i + 1\n    Fe2     &lt;- state[((i-1) * N_grid + 1) : (i * N_grid)]; i &lt;- i + 1\n    Ca2     &lt;- state[((i-1) * N_grid + 1) : (i * N_grid)]; i &lt;- i + 1\n    # state variables for solids are tableau-species concentrations (mol/m3_svf)\n    MnO2    &lt;- state[((i-1) * N_grid + 1) : (i * N_grid)]; i &lt;- i + 1\n    OM      &lt;- state[((i-1) * N_grid + 1) : (i * N_grid)]; i &lt;- i + 1\n    OM_beta &lt;- state[((i-1) * N_grid + 1) : (i * N_grid)]; i &lt;- i + 1\n    FeOH3   &lt;- state[((i-1) * N_grid + 1) : (i * N_grid)]; i &lt;- i + 1\n    FeOH3_P &lt;- state[((i-1) * N_grid + 1) : (i * N_grid)]; i &lt;- i + 1\n    FeCO3   &lt;- state[((i-1) * N_grid + 1) : (i * N_grid)]; i &lt;- i + 1\n    S0      &lt;- state[((i-1) * N_grid + 1) : (i * N_grid)]; i &lt;- i + 1\n    FeS     &lt;- state[((i-1) * N_grid + 1) : (i * N_grid)]; i &lt;- i + 1\n    Viv     &lt;- state[((i-1) * N_grid + 1) : (i * N_grid)]; i &lt;- i + 1\n    CaCO3   &lt;- state[((i-1) * N_grid + 1) : (i * N_grid)]; i &lt;- i + 1\n    Apatite &lt;- state[((i-1) * N_grid + 1) : (i * N_grid)]; i &lt;- i + 1\n    MnCO3   &lt;- state[((i-1) * N_grid + 1) : (i * N_grid)]; i &lt;- i + 1\n    \n    # transport terms\n    tran.ALK     &lt;- tran.1D(C = ALK, C.up = ALK_up, D = diff_coeffs$ALK, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n    \n    tran.DIC     &lt;- tran.1D(C = DIC, C.up = DIC_up, D = diff_coeffs$DIC, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n    \n    tran.TOT_P   &lt;- tran.1D(C = TOT_P, C.up = H2PO4_up, D = diff_coeffs$H2PO4, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n    \n    tran.TOT_N5  &lt;- tran.1D(C = TOT_N5, C.up = NO3_up, D = diff_coeffs$NO3, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n    \n    tran.TOT_N3  &lt;- tran.1D(C = TOT_N3, C.up = NH4_up, D = diff_coeffs$NH4, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n    \n    tran.TOT_S6  &lt;- tran.1D(C = TOT_S6, C.up = SO4_up, D = diff_coeffs$SO4, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n    \n    tran.TOT_S2  &lt;- tran.1D(C = TOT_S2, C.up = H2S_up, D = diff_coeffs$H2S, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n    \n    tran.CH4     &lt;- tran.1D(C = CH4, C.up = CH4_up, D = diff_coeffs$CH4, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n\n    tran.O2      &lt;- tran.1D(C = O2, C.up = O2_up, D = diff_coeffs$O2, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n    \n    tran.N2      &lt;- tran.1D(C = N2, C.up = N2_up, D = diff_coeffs$N2, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n    \n    tran.Mn2     &lt;- tran.1D(C = Mn2, C.up = Mn2_up, D = diff_coeffs$Mn2, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n    \n    tran.Fe2     &lt;- tran.1D(C = Fe2, C.up = Fe2_up, D = diff_coeffs$Fe2, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n\n    tran.Ca2     &lt;- tran.1D(C = Ca2, C.up = Ca2_up, D = diff_coeffs$Ca2, \n                            v = adv_vel$u, VF = grid.por, dx = grid)\n    \n    tran.MnO2    &lt;- tran.1D(C = MnO2, flux.up = MnO2_up, D = diff_coeffs$solid, \n                            v = adv_vel$v, VF = grid.svf, dx = grid)\n    \n    tran.OM      &lt;- tran.1D(C = OM, flux.up = OM_up, D = diff_coeffs$solid, \n                            v = adv_vel$v, VF = grid.svf, dx = grid)\n\n    tran.OM_beta &lt;- tran.1D(C = OM_beta, flux.up = OM_beta_up, D = diff_coeffs$solid, \n                            v = adv_vel$v, VF = grid.svf, dx = grid)\n    \n    tran.FeOH3   &lt;- tran.1D(C = FeOH3, flux.up = FeOH3_up, D = diff_coeffs$solid, \n                            v = adv_vel$v, VF = grid.svf, dx = grid)\n    \n    tran.FeOH3_P &lt;- tran.1D(C = FeOH3_P, flux.up = FeOH3_P_up, D = diff_coeffs$solid, \n                            v = adv_vel$v, VF = grid.svf, dx = grid)\n    \n    tran.FeCO3   &lt;- tran.1D(C = FeCO3, flux.up = FeCO3_up, D = diff_coeffs$solid, \n                            v = adv_vel$v, VF = grid.svf, dx = grid)\n\n    tran.S0      &lt;- tran.1D(C = S0, flux.up = S0_up, D = diff_coeffs$solid, \n                            v = adv_vel$v, VF = grid.svf, dx = grid)\n\n    tran.FeS     &lt;- tran.1D(C = FeS, flux.up = FeS_up, D = diff_coeffs$solid, \n                            v = adv_vel$v, VF = grid.svf, dx = grid)\n    \n    tran.Viv     &lt;- tran.1D(C = Viv, flux.up = Viv_up, D = diff_coeffs$solid, \n                            v = adv_vel$v, VF = grid.svf, dx = grid)\n\n    tran.CaCO3   &lt;- tran.1D(C = CaCO3, flux.up = CaCO3_up, D = diff_coeffs$solid, \n                            v = adv_vel$v, VF = grid.svf, dx = grid)\n\n    tran.Apatite &lt;- tran.1D(C = Apatite, flux.up = Apatite_up, D = diff_coeffs$solid, \n                            v = adv_vel$v, VF = grid.svf, dx = grid)\n\n    tran.MnCO3   &lt;- tran.1D(C = MnCO3, flux.up = MnCO3_up, D = diff_coeffs$solid, \n                            v = adv_vel$v, VF = grid.svf, dx = grid)\n    \n    # calculate solute equilibrium species (solve the tableau)\n    if (solve_equilibrium) {\n      # 1) grep the solute total components; here we need TOT_H = - ALK\n      solute_totals &lt;- c(-ALK, DIC, TOT_P, TOT_N5, TOT_N3, TOT_S6, TOT_S2)\n      # 2) solve tableau\n      solute_equilibrium  &lt;- solve_tableau(solute_totals, tableau, logK, N_grid, tableau_species)\n      # 3) assign results\n      H     &lt;- solute_equilibrium$species_conc[,1]\n      pH    &lt;- -log10(H * 10^-3)\n      OH    &lt;- solute_equilibrium$species_conc[,2]\n      H2CO3 &lt;- solute_equilibrium$species_conc[,3]\n      HCO3  &lt;- solute_equilibrium$species_conc[,4]\n      CO3   &lt;- solute_equilibrium$species_conc[,5]\n      H3PO4 &lt;- solute_equilibrium$species_conc[,6]\n      H2PO4 &lt;- solute_equilibrium$species_conc[,7]\n      HPO4  &lt;- solute_equilibrium$species_conc[,8]\n      PO4   &lt;- solute_equilibrium$species_conc[,9]\n      HNO3  &lt;- solute_equilibrium$species_conc[,10]\n      NO3   &lt;- solute_equilibrium$species_conc[,11]\n      NH4   &lt;- solute_equilibrium$species_conc[,12]\n      NH3   &lt;- solute_equilibrium$species_conc[,13]\n      H2SO4 &lt;- solute_equilibrium$species_conc[,14]\n      HSO4  &lt;- solute_equilibrium$species_conc[,15]\n      SO4   &lt;- solute_equilibrium$species_conc[,16]\n      H2S   &lt;- solute_equilibrium$species_conc[,17]\n      HS    &lt;- solute_equilibrium$species_conc[,18]\n      S2    &lt;- solute_equilibrium$species_conc[,19]\n    } else {\n      solute_equilibrium &lt;- NA\n    }\n    \n    # FeOH3 fractions\n    FeOH3_tot &lt;- FeOH3 + FeOH3_P\n    chi &lt;- rep(1, length(FeOH3))\n    ind_valid &lt;- FeOH3_tot &gt; 0\n    chi[ind_valid] &lt;- FeOH3[ind_valid] / FeOH3_tot[ind_valid]\n    \n    # limitation & inhibition terms\n    L_O2    &lt;- O2   / (K_O2 + O2)\n    I_O2    &lt;- K_O2 / (K_O2 + O2)\n    \n    L_NO3   &lt;- TOT_N5 / (K_NO3 + TOT_N5)\n    I_NO3   &lt;- K_NO3 / (K_NO3 + TOT_N5)\n    \n    L_MnO2  &lt;- MnO2   / (K_MnO2 + MnO2)\n    I_MnO2  &lt;- K_MnO2 / (K_MnO2 + MnO2)\n    \n    L_FeOH3 &lt;- FeOH3_tot / (K_FeOH3 + FeOH3_tot)\n    I_FeOH3 &lt;- K_FeOH3 / (K_FeOH3 + FeOH3_tot)\n    \n    L_SO4   &lt;- TOT_S6 / (K_SO4 + TOT_S6)\n    I_SO4   &lt;- K_SO4 / (K_SO4 + TOT_S6)\n    \n    L_H3PO4 &lt;- TOT_P   / (K_H3PO4 + TOT_P)\n    I_H3PO4 &lt;- K_H3PO4 / (K_H3PO4 + TOT_P)\n    \n    # Reaction Rates\n    ## OM Degradation\n    R1 &lt;- k_alpha * OM * L_O2\n    R2 &lt;- k_alpha * OM * L_NO3                            * I_O2\n    R3 &lt;- k_alpha * OM * L_MnO2                   * I_NO3 * I_O2\n    R4 &lt;- k_alpha * OM * L_FeOH3         * I_MnO2 * I_NO3 * I_O2\n    R5 &lt;- k_alpha * OM * L_SO4 * I_FeOH3 * I_MnO2 * I_NO3 * I_O2\n    R6 &lt;- k_alpha * OM * I_SO4 * I_FeOH3 * I_MnO2 * I_NO3 * I_O2\n\n    R1b &lt;- k_beta * OM_beta * L_O2\n    R2b &lt;- k_beta * OM_beta * L_NO3                            * I_O2\n    R3b &lt;- k_beta * OM_beta * L_MnO2                   * I_NO3 * I_O2\n    R4b &lt;- k_beta * OM_beta * L_FeOH3         * I_MnO2 * I_NO3 * I_O2\n    R5b &lt;- k_beta * OM_beta * L_SO4 * I_FeOH3 * I_MnO2 * I_NO3 * I_O2\n    R6b &lt;- k_beta * OM_beta * I_SO4 * I_FeOH3 * I_MnO2 * I_NO3 * I_O2\n\n    ## Siderite: R7 = precipitation, R8 = dissolution\n    if (precipitation & solve_equilibrium) {\n      omega_siderite &lt;- (Fe2 * CO3) / Ksp_siderite\n    } else if (precipitation) {\n      omega_siderite &lt;- (Fe2 * (DIC * f_CO3)) / Ksp_siderite\n    } else {\n      omega_siderite &lt;- rep(1, N_grid)\n    }\n    R7 &lt;- ifelse(omega_siderite &gt; 1, k_precip_siderite * (omega_siderite - 1), 0)\n    R8 &lt;- ifelse(omega_siderite &lt; 1, k_diss_siderite * FeCO3 * (1 - omega_siderite), 0)\n\n    ## FeOH3 / FeOH3~H3PO4-Reduction coupled to Sulphide Oxidation\n    R9 &lt;- k_Fe_red_S_ox * FeOH3_tot * TOT_S2\n\n    ## FeOH3 / FeOH3~H3PO4-Formation\n    R10 &lt;- k_FeOH3_formation * O2 * Fe2\n\n    ## H2S Oxidation\n    R11 &lt;- k_H2S_oxidation * O2 * TOT_S2\n\n    ## SO4-Reduction Coupeld to AOM\n    if (solve_equilibrium) {\n      R12 &lt;- k_SO4_reduction * CH4 * SO4\n    } else {\n      R12 &lt;- k_SO4_reduction * CH4 * (TOT_S6 * 1)\n    }\n\n    ## FeS: R13 = precipitation, R14 = dissolution\n    if (precipitation & solve_equilibrium) {\n      omega_FeS &lt;- (Fe2 * HS / H) / Ksp_FeS\n    } else if (precipitation) {\n      omega_FeS &lt;- (Fe2 * (TOT_S2 * f_HS) / fixed_H) / Ksp_FeS\n    } else {\n      omega_FeS &lt;- rep(1, N_grid)\n    }\n    R13 &lt;- ifelse(omega_FeS &gt; 1, k_precip_FeS * (omega_FeS - 1)^2, 0)\n    R14 &lt;- ifelse(omega_FeS &lt; 1, k_diss_FeS * FeS * (1 - omega_FeS)^2, 0)\n\n    ## Vivianite: R15 = precipitation, R16 = dissolution\n    if (precipitation & solve_equilibrium) {\n      omega_Viv &lt;- (Fe2 * PO4^(2/3)) / Ksp_Viv^(1/3)\n    } else if (precipitation) {\n      omega_Viv &lt;- (Fe2 * (TOT_P * f_PO4)^(2/3)) / Ksp_Viv^(1/3)\n    } else {\n      omega_Viv &lt;- rep(1, N_grid)\n    }\n    R15 &lt;- ifelse(omega_Viv &gt; 1, k_precip_Viv * (omega_Viv - 1)^2, 0)\n    R16 &lt;- ifelse(omega_Viv &lt; 1, k_diss_Viv * Viv * (1 - omega_Viv)^2, 0)\n\n    ## CaCO3: R17 = precipitation, R18 = dissolution\n    if (precipitation & solve_equilibrium) {\n      omega_CaCO3 &lt;- (Ca2 * CO3) / Ksp_CaCO3\n    } else if (precipitation) {\n      omega_CaCO3 &lt;- (Ca2 * (DIC * f_CO3)) / Ksp_CaCO3\n    } else {\n      omega_CaCO3 &lt;- rep(1, N_grid)\n    }\n    R17 &lt;- ifelse(omega_CaCO3 &gt; 1, k_precip_CaCO3 * (omega_CaCO3 - 1)^2, 0)\n    R18 &lt;- ifelse(omega_CaCO3 &lt; 1, k_diss_CaCO3 * CaCO3 * (1 - omega_CaCO3)^2, 0)\n\n    ## Apatite: R19 = precipitation, R20 = dissolution\n    if (precipitation & solve_equilibrium) {\n      omega_Apatite &lt;- (Ca2 * HPO4^(2/3)) / (Ksp_Apatite^(1/3) / H^(2/3))\n    } else if (precipitation) {\n      omega_Apatite &lt;- (Ca2 * (TOT_P * f_HPO4)^(2/3)) / (Ksp_Apatite^(1/3) / fixed_H^(2/3))\n    } else {\n      omega_Apatite &lt;- rep(1, N_grid)\n    }\n    R19 &lt;- ifelse(omega_Apatite &gt; 1, k_precip_Apatite * (omega_Apatite - 1)^2, 0)\n    R20 &lt;- ifelse(omega_Apatite &lt; 1, k_diss_Apatite * Apatite * (1 - omega_Apatite)^2, 0)\n\n    ## Fe Oxidation by MnO2\n    R21 &lt;- k_I11 * MnO2 * Fe2\n    #R21 &lt;- 0\n\n    ## Ammonium Oxidation\n    if (solve_equilibrium) {\n      R22 &lt;- k_I12 * NH4 * O2\n    } else {\n      R22 &lt;- k_I12 * TOT_N3 * f_NH4 * O2\n    }\n    #R22 &lt;- 0\n\n    ## Sulphide Oxidation by MnO2\n    R23 &lt;- k_I14 * TOT_S2 * MnO2\n    #R23 &lt;- 0\n\n    ## FeS Oxidation by O2\n    R24 &lt;- k_I16 * FeS * O2\n    #R24 &lt;- 0\n\n    ## CH4 Oxidation by O2\n    R25 &lt;- k_I17 * CH4 * O2\n    #R25 &lt;- 0\n\n    ## MnCO3: R26 = precipitation, R27 = dissolution\n    if (precipitation & solve_equilibrium) {\n      omega_MnCO3 &lt;- (Mn2 * CO3) / Ksp_MnCO3\n    } else if (precipitation) {\n      omega_MnCO3 &lt;- (Mn2 * (DIC * f_CO3)) / Ksp_MnCO3\n    } else {\n      omega_MnCO3 &lt;- rep(1, N_grid)\n    }\n    R26 &lt;- ifelse(omega_MnCO3 &gt; 1, k_precip_MnCO3 * (omega_MnCO3 - 1)^2, 0)\n    R27 &lt;- ifelse(omega_MnCO3 &lt; 1, k_diss_MnCO3 * MnCO3 * (1 - omega_MnCO3)^2, 0)\n\n    \n    # change of species concentration due to reactions\n    ## solutes step1: change of slow-reaction-species (srs), the ones for which\n    ## the reactions are formulated, according to reaction stoichiometry\n    R.srs_O2    &lt;- (- s2p * R1 - s2p * R1b # OM Degradation\n                    - 1 * R10\n                    - 2 * R11\n                    - 2 * R22\n                    - 2 * R24\n                    - R25)\n    R.srs_CO2   &lt;- (s2p * (R1 + R2 + R3 + R4 + R5 + 1/2 * R6)\n                    + s2p * (R1b + R2b + R3b + R4b + R5b + 1/2 * R6b)\n                    - s2p * R7 + s2p * R8  # Siderite Precipitation / Dissolution\n                    + 1 * R12\n                    - s2p * R17 + s2p * R18\n                    + R25\n                    - s2p * R26 + s2p * R27)\n    R.srs_NH3   &lt;- (OM_b * s2p * (R1 + R2 + R3 + R4 + R5 + R6)\n                    + OM_b * s2p * (R1b + R2b + R3b + R4b + R5b + R6b)\n                    - R22)\n    R.srs_H3PO4 &lt;- (s2p * ( OM_c * (R1 + R2 + R3 + R5 + R6) +\n                      (OM_c + (1 - chi) * 4 * lambda) * R4 )\n                    + s2p * ( OM_c * (R1b + R2b + R3b + R5b + R6b) +\n                      (OM_c + (1 - chi) * 4 * lambda) * R4b )\n                    + 2 * (1 - chi) * lambda * s2p * R9\n                    - 4 * lambda * L_H3PO4 * R10\n                    - 2 * s2p * R15 + 2 * s2p * R16\n                    - 2 * s2p * R19 + 2 * s2p * R20)\n    R.srs_HNO3  &lt;- (- 4/5 * s2p * R2 - 4/5 * s2p * R2b\n                     + R22)\n    R.srs_N2    &lt;- 2/5 * s2p * R2 + 2/5 * s2p * R2b\n    R.srs_FeOH2 &lt;- (4 * s2p * R4 + 4 * s2p * R4b # OM degradation\n                    - s2p * R7 + s2p * R8        # Siderite Precipitation / Dissolution\n                    + 2 * s2p * R9\n                    - 4 * R10\n                    - s2p * R13 + s2p * R14\n                    - 3 * s2p * R15 + 3 * s2p * R16\n                    - 2 * R21\n                    + R24)\n    R.srs_MnOH2 &lt;- (2 * s2p * R3 + 2 * s2p * R3b\n                    + R21\n                    + R23\n                    - s2p * R26 + s2p * R27)\n    R.srs_H2SO4 &lt;- (- 1/2 * s2p * R5 - 1/2 * s2p * R5b\n                    + 1 * R11\n                    - 1 * R12\n                    + R24)\n    R.srs_H2S   &lt;- (1/2 * s2p * R5 + 1/2 * s2p * R5b\n                    - 1 * s2p * R9\n                    - 1 * R11\n                    + 1 * R12\n                    - s2p * R13 + s2p * R14\n                    - R23)\n    R.srs_CH4   &lt;- (1/2 * s2p * R6 + 1/2 * s2p * R6b\n                    - 1 * R12\n                    - R25)\n    R.srs_CaOH2 &lt;- (- s2p * R17 + s2p * R18\n                    - 3 * s2p * R19 + 3 * s2p * R20)\n    \n    ## solutes step2: change of tableau-components = model species\n    ## translation of change of slow-reaction-species to change of \n    ## tableau components using the translation table\n    ## here the component-total \"H\" is already converted to alkalinity (*-1)\n    R.ALK   &lt;- -1 * (- R.srs_NH3 + R.srs_H3PO4 + R.srs_HNO3 - 2 * R.srs_FeOH2\n                     - 2 * R.srs_MnOH2 + 2 * R.srs_H2SO4 - 2 * R.srs_CaOH2)\n    R.DIC    &lt;- R.srs_CO2\n    R.CH4    &lt;- R.srs_CH4\n    R.TOT_P  &lt;- R.srs_H3PO4\n    R.TOT_N5 &lt;- R.srs_HNO3\n    R.TOT_N3 &lt;- R.srs_NH3\n    R.TOT_S6 &lt;- R.srs_H2SO4\n    R.TOT_S2 &lt;- R.srs_H2S\n    R.O2     &lt;- R.srs_O2\n    R.N2     &lt;- R.srs_N2\n    R.Mn2    &lt;- R.srs_MnOH2\n    R.Fe2    &lt;- R.srs_FeOH2\n    R.Ca2    &lt;- R.srs_CaOH2\n    \n    ## solids\n    R.OM &lt;- - R1 - R2 - R3 - R4 - R5 - R6\n    R.OM_beta &lt;- - R1b - R2b - R3b - R4b - R5b - R6b\n    R.MnO2 &lt;- (- 2 * R3 - 2 * R3b\n              - p2s * R21\n              - p2s * R23)\n    R.FeOH3 &lt;- (- 4 * chi * R4 - 4 * chi * R4b\n                - 2 * chi * R9\n                + 4 * (1 - L_H3PO4) * p2s * R10\n                + 2 * p2s * R21)\n    R.FeOH3_P &lt;- (- 4 * (1 - chi) * R4 - 4 * (1 - chi) * R4b\n                  - 2 * (1 - chi) * R9\n                  + 4 * L_H3PO4 * p2s * R10)\n    R.FeCO3 &lt;- R7 - R8\n    R.S0 &lt;- R9 + p2s * R23\n    R.FeS &lt;- R13 - R14 - p2s * R24\n    R.Viv &lt;- R15 - R16\n    R.CaCO3 &lt;- R17 - R18\n    R.Apatite &lt;- R19 - R20\n    R.MnCO3 &lt;- R26 - R27\n    \n    # total change in concentration of model species\n    dCdt.ALK     &lt;- R.ALK + tran.ALK$dC\n    dCdt.DIC     &lt;- R.DIC + tran.DIC$dC\n    dCdt.CH4     &lt;- R.CH4 + tran.CH4$dC\n    dCdt.TOT_P   &lt;- R.TOT_P + tran.TOT_P$dC\n    dCdt.TOT_N5  &lt;- R.TOT_N5 + tran.TOT_N5$dC\n    dCdt.TOT_N3  &lt;- R.TOT_N3 + tran.TOT_N3$dC\n    dCdt.N2      &lt;- R.N2  + tran.N2$dC\n    dCdt.TOT_S6  &lt;- R.TOT_S6 + tran.TOT_S6$dC\n    dCdt.TOT_S2  &lt;- R.TOT_S2 + tran.TOT_S2$dC\n    dCdt.O2      &lt;- R.O2 + tran.O2$dC\n    dCdt.Mn2     &lt;- R.Mn2 + tran.Mn2$dC\n    dCdt.Fe2     &lt;- R.Fe2 + tran.Fe2$dC\n    dCdt.Ca2     &lt;- R.Ca2 + tran.Ca2$dC\n    dCdt.OM      &lt;- R.OM + tran.OM$dC\n    dCdt.OM_beta &lt;- R.OM_beta + tran.OM_beta$dC\n    dCdt.MnO2    &lt;- R.MnO2 + tran.MnO2$dC\n    dCdt.FeOH3   &lt;- R.FeOH3 + tran.FeOH3$dC\n    dCdt.FeOH3_P &lt;- R.FeOH3_P + tran.FeOH3_P$dC\n    dCdt.FeCO3   &lt;- R.FeCO3 + tran.FeCO3$dC\n    dCdt.S0      &lt;- R.S0 + tran.S0$dC\n    dCdt.FeS     &lt;- R.FeS + tran.FeS$dC\n    dCdt.Viv     &lt;- R.Viv + tran.Viv$dC\n    dCdt.CaCO3   &lt;- R.CaCO3 + tran.CaCO3$dC\n    dCdt.Apatite &lt;- R.Apatite + tran.Apatite$dC\n    dCdt.MnCO3   &lt;- R.MnCO3 + tran.MnCO3$dC\n    \n    # characteristic time scales\n    # if dCdt.X = 0 -&gt; timescale will be Inf\n    time_scales &lt;- c(\n      ALK = ALK / dCdt.ALK,\n      DIC = DIC / dCdt.DIC,\n      CH4 = CH4 / dCdt.CH4,\n      TOT_P = TOT_P / dCdt.TOT_P,\n      TOT_N5 = TOT_N5 / dCdt.TOT_N5,\n      TOT_N3 = TOT_N3 / dCdt.TOT_N3,\n      N2 = N2 / dCdt.N2,\n      TOT_S6 = TOT_S6 / dCdt.TOT_S6,\n      TOT_S2 = TOT_S2 / dCdt.TOT_S2,\n      O2 = O2 / dCdt.O2,\n      Mn2 = Mn2 / dCdt.Mn2,\n      Fe2 = Fe2 / dCdt.Fe2,\n      Ca2 = Ca2 / dCdt.Ca2,\n      OM = OM / dCdt.OM,\n      OM_beta = OM_beta / dCdt.OM_beta,\n      MnO2 = MnO2 / dCdt.MnO2,\n      FeOH3 = FeOH3 / dCdt.FeOH3,\n      FeOH3_P = FeOH3_P / dCdt.FeOH3_P,\n      FeCO3 = FeCO3 / dCdt.FeCO3,\n      S0 = S0 / dCdt.S0,\n      FeS = FeS / dCdt.FeS,\n      Viv = Viv / dCdt.Viv,\n      CaCO3 = CaCO3 / dCdt.CaCO3,\n      Apatite = Apatite / dCdt.Apatite,\n      MnCO3 = MnCO3 / dCdt.MnCO3\n    )\n    # but we need to take the absolute value to find the correct minimum\n    time_scales &lt;- abs(time_scales)\n    # set NaN values to a number (???)\n    time_scales[is.na(time_scales)] &lt;- 100\n    # set 0 to a small number\n    # time_scales[time_scales == 0] &lt;- 1e-10\n\n    return(\n      list(\n        c(\n          dCdt.ALK = dCdt.ALK,\n          dCdt.DIC = dCdt.DIC,\n          dCdt.TOT_P = dCdt.TOT_P,\n          dCdt.TOT_N5 = dCdt.TOT_N5,\n          dCdt.TOT_N3 = dCdt.TOT_N3,\n          dCdt.TOT_S6 = dCdt.TOT_S6,\n          dCdt.TOT_S2 = dCdt.TOT_S2,\n          dCdt.CH4 = dCdt.CH4,\n          dCdt.O2 = dCdt.O2,\n          dCdt.N2 = dCdt.N2,\n          dCdt.Mn2 = dCdt.Mn2,\n          dCdt.Fe2 = dCdt.Fe2,\n          dCdt.Ca2 = dCdt.Ca2,\n          dCdt.MnO2 = dCdt.MnO2,\n          dCdt.OM = dCdt.OM,\n          dCdt.OM_beta = dCdt.OM_beta,\n          dCdt.FeOH3 = dCdt.FeOH3,\n          dCdt.FeOH3_P = dCdt.FeOH3_P,\n          dCdt.FeCO3 = dCdt.FeCO3,\n          dCdt.S0 = dCdt.S0,\n          dCdt.FeS = dCdt.FeS,\n          dCdt.Viv = dCdt.Viv,\n          dCdt.CaCO3 = dCdt.CaCO3,\n          dCdt.Apatite = dCdt.Apatite,\n          dCdt.MnCO3 = dCdt.MnCO3\n        ),\n        transport = list(\n          tran.ALK = tran.ALK,\n          tran.DIC = tran.DIC,\n          tran.TOT_P = tran.TOT_P,\n          tran.TOT_N5 = tran.TOT_N5,\n          tran.TOT_N3 = tran.TOT_N3,\n          tran.TOT_S6 = tran.TOT_S6,\n          tran.TOT_S2 = tran.TOT_S2,\n          tran.CH4 = tran.CH4,\n          tran.O2 = tran.O2,\n          tran.N2 = tran.N2,\n          tran.Mn2 = tran.Mn2,\n          tran.Fe2 = tran.Fe2,\n          tran.Ca2 = tran.Ca2,\n          tran.MnO2 = tran.MnO2,\n          tran.OM = tran.OM,\n          tran.OM_beta = tran.OM_beta,\n          tran.FeOH3 = tran.FeOH3,\n          tran.FeOH3_P = tran.FeOH3_P,\n          tran.FeCO3 = tran.FeCO3,\n          tran.S0 = tran.S0,\n          tran.FeS = tran.FeS,\n          tran.Viv = tran.Viv,\n          tran.CaCO3 = tran.CaCO3,\n          tran.Apatite = tran.Apatite,\n          tran.MnCO3 = tran.MnCO3\n        ),\n        sumR = list(\n          R.ALK     = R.ALK * grid.por$mid,\n          R.DIC     = R.DIC * grid.por$mid,\n          R.TOT_P   = R.TOT_P * grid.por$mid,\n          R.TOT_N5  = R.TOT_N5 * grid.por$mid,\n          R.TOT_N3  = R.TOT_N3 * grid.por$mid,\n          R.TOT_S6  = R.TOT_S6 * grid.por$mid,\n          R.TOT_S2  = R.TOT_S2 * grid.por$mid,\n          R.CH4     = R.CH4 * grid.por$mid,\n          R.O2      = R.O2 * grid.por$mid,\n          R.N2      = R.N2 * grid.por$mid,\n          R.Mn2     = R.Mn2 * grid.por$mid,\n          R.Fe2     = R.Fe2 * grid.por$mid,\n          R.Ca2     = R.Ca2 * grid.por$mid,\n          R.MnO2    = R.MnO2 * grid.svf$mid,\n          R.OM      = R.OM * grid.svf$mid,\n          R.OM_beta = R.OM_beta * grid.svf$mid,\n          R.FeOH3   = R.FeOH3 * grid.svf$mid,\n          R.FeOH3_P = R.FeOH3_P * grid.svf$mid,\n          R.FeCO3   = R.FeCO3 * grid.svf$mid,\n          R.S0      = R.S0 * grid.svf$mid,\n          R.FeS     = R.FeS * grid.svf$mid,\n          R.Viv     = R.Viv * grid.svf$mid,\n          R.CaCO3   = R.CaCO3 * grid.svf$mid,\n          R.Apatite = R.Apatite * grid.svf$mid,\n          R.MnCO3   = R.MnCO3 * grid.svf$mid\n        ),\n        rates = list(\n          R1  = R1  * grid.svf$mid,\n          R2  = R2  * grid.svf$mid,\n          R3  = R3  * grid.svf$mid,\n          R4  = R4  * grid.svf$mid,\n          R5  = R5  * grid.svf$mid,\n          R6  = R6  * grid.svf$mid,\n          R1b  = R1b  * grid.svf$mid,\n          R2b  = R2b  * grid.svf$mid,\n          R3b  = R3b  * grid.svf$mid,\n          R4b  = R4b  * grid.svf$mid,\n          R5b  = R5b  * grid.svf$mid,\n          R6b  = R6b  * grid.svf$mid,\n          R7  = R7  * grid.svf$mid,\n          R8  = R8  * grid.svf$mid,\n          R9  = R9  * grid.svf$mid,\n          R10 = R10 * grid.svf$mid,\n          R11 = R11 * grid.por$mid,\n          R12 = R12 * grid.por$mid,\n          R13 = R13 * grid.svf$mid,\n          R14 = R14 * grid.svf$mid,\n          R15 = R15 * grid.svf$mid,\n          R16 = R16 * grid.svf$mid,\n          R17 = R17 * grid.svf$mid,\n          R18 = R18 * grid.svf$mid,\n          R19 = R19 * grid.svf$mid,\n          R20 = R20 * grid.svf$mid,\n          R21 = R21 * grid.svf$mid,\n          R22 = R22 * grid.por$mid, \n          R23 = R23 * grid.svf$mid,\n          R24 = R24 * grid.svf$mid,\n          R25 = R25 * grid.por$mid,\n          R26 = R26 * grid.svf$mid,\n          R27 = R27 * grid.svf$mid\n        ),\n        omega = list(\n          siderite = omega_siderite,\n          FeS = omega_FeS,\n          Viv = omega_Viv,\n          CaCO3 = omega_CaCO3,\n          Apatite = omega_Apatite,\n          MnCO3 = omega_MnCO3\n        ),\n        solute_equilibrium = solute_equilibrium,\n        time_scales = time_scales\n      )\n    )\n })\n}"
  },
  {
    "objectID": "index.html#solve-model",
    "href": "index.html#solve-model",
    "title": "Fe Treatment Model",
    "section": "Solve Model",
    "text": "Solve Model\n\n1) Steady State\nSteady State is found in a three step procedure:\n\nSolve steady state without precipitation reactions and without equilibrium solver.\nSolve steady state without equilibrium solver. All reactions are controlled by component-totals. If necessary, pH dependent speciation is estimated for pH = 7.\nSolve steady state with equilibrium solver. All reaction now are controlled by the actual concentrations.\n\n\ninitial &lt;- rep(1e-4, N_grid * N_species)\n\nif (run_std & run_std0) {\n  std0 &lt;- steady.1D(\n    y = initial,\n    func = model,\n    parms = parameter, \n    dimens = N_grid,\n    nspec = N_species,\n    names = model_species,\n    positive = TRUE,\n    method = \"stode\",\n    diff_coeffs = diffusion_coefficients,\n    adv_vel = advective_velocities,\n    solve_equilibrium = FALSE,\n    precipitation = FALSE\n  )\n\n  save_and_upload_results(std0, \"std0\", \"std\")\n\n} else {\n  std0 &lt;- readRDS(\"last_results/std0.rds\")\n}\n\n\nif (run_std & run_std1) {\n  std1 &lt;- steady.1D(\n    y = as.vector(std0$y),\n    func = model,\n    parms = parameter, \n    dimens = N_grid,\n    nspec = N_species,\n    names = model_species,\n    positive = TRUE,\n    method = \"stode\",\n    diff_coeffs = diffusion_coefficients,\n    adv_vel = advective_velocities,\n    solve_equilibrium = FALSE,\n    precipitation = TRUE\n  )\n\n  # add speciation afterwards\n  # the first 7 model-species are tableau components\n  # In the model we have alkalinity (column 1) - but here we need TOT_H = -ALK\n  component_total  &lt;- c(-1*std1$y[,1], std1$y[,2:7])\n  std1[[\"solute_equilibrium\"]] &lt;- solve_tableau(component_total, tableau, logK, N_grid, tableau_species)\n\n  save_and_upload_results(std1, \"std1\", \"std\")\n\n} else {\n  std1 &lt;- readRDS(\"last_results/std1.rds\")\n}\n\n\nif (run_std & run_std2) {\n  std2 &lt;- steady.1D(\n    y = as.vector(std1$y),\n    func = model,\n    parms = parameter,\n    dimens = N_grid,\n    nspec = N_species,\n    names = model_species,\n    positive = TRUE,\n    method = \"stode\", # stode gives back result, even if steady state is not reached\n                      # stodes does not return intermediate result\n    maxiter = 100,\n    diff_coeffs = diffusion_coefficients,\n    adv_vel = advective_velocities,\n    solve_equilibrium = TRUE,\n    precipitation = TRUE\n  )\n\n  save_and_upload_results(std2, \"std2\", \"std\")\n\n} else {\n  std2 &lt;- readRDS(\"last_results/std2.rds\")\n}\n\nWarning in stode(y[ii], times, func = bmod, parms = parms, bandup = nspec * :\nerror during factorisation of matrix (dgbfa); singular matrix\n\n\ndiagonal element is zero\n[1] 5000\n\n\nWarning in stode(y[ii], times, func = bmod, parms = parms, bandup = nspec * :\nsteady-state not reached\n\n\n\nProfiles: Component-Totals\n\nstd1: gray\nstd2: black\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProfiles: Speciation\n\nstd1std2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProfile: pH\n\n\n\n\n\n\n\nProfiles: Saturation\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProfiles: Reaction Rates\n\nOM Degradation\n\n\nstd1\n\n\n\n\n\n\n\nstd2\n\n\n\n\n\n\n\n\n\n\n\n\nstd1\n\n\n\n\n\n\n\nstd2\n\n\n\n\n\n\n\n\n\n\n\n\nH2S Oxidation\n\n\nstd1\n\n\n\n\n\n\n\nstd2\n\n\n\n\n\n\n\n\n\n\n\n\nSO4-Reduction Coupled to AOM\n\n\nstd1\n\n\n\n\n\n\n\nstd2\n\n\n\n\n\n\n\n\n\n\n\n\nSiderite Precipitation\n\n\nstd1\n\n\n\n\n\n\n\nstd2\n\n\n\n\n\n\n\n\n\n\n\n\nFeOH3 / FeOH3~H3PO4-reduction coupled to sulphide oxidation\n\n\nstd1\n\n\n\n\n\n\n\nstd2\n\n\n\n\n\n\n\n\n\n\n\n\nFeOH3 / FeOH3~H3PO4-formation\n\n\nstd1\n\n\n\n\n\n\n\nstd2\n\n\n\n\n\n\n\n\n\n\n\n\nFeS Precipitation / Dissolution\n\n\nstd1\n\n\n\n\n\n\n\nstd2\n\n\n\n\n\n\n\n\n\n\n\n\nVivianite Precipitation / Dissolution\n\n\nstd1\n\n\n\n\n\n\n\nstd2\n\n\n\n\n\n\n\n\n\n\n\n\nCaCO3 Precipitation / Dissolution\n\n\nstd1\n\n\n\n\n\n\n\nstd2\n\n\n\n\n\n\n\n\n\n\n\n\nApatite Precipitation / Dissolution\n\n\nstd1\n\n\n\n\n\n\n\nstd2\n\n\n\n\n\n\n\n\n\n\n\n\n2) Dynamic Scenario\nThe dynamic scenario is initialized with the results of std2. For now the only dynamic parameters is the flux of \\(\\ce{Fe(OH)3}\\) at the top.\nIn February of the first year 100g (~1.8 mol) are added. The total added mass is calculated as\n\nadded mass [mol/m²] = flux [mol/(m²*yr)] * timespan [yr]\n\nTherefore the specified flux in February is\n\nflux [mol/(m²*yr)] = 1.8 [mol/m²] / (1/12) [yr] = 21.6 [mol/(m²*yr)]\n\n\ntimesteps &lt;- seq(from = 0, to = 2, by = 1/12)\n\nif (run_trans) {\n  system.time(trans &lt;- ode.1D(\n    y = as.vector(std2$y), \n    time = timesteps, \n    func = model, \n    parms = parameter,\n    dimens = N_grid,\n    nspec = N_species,\n    names = model_species,\n    #method = \"lsoda\", \n    #verbose = TRUE, \n    diff_coeffs = diffusion_coefficients,\n    adv_vel = advective_velocities,\n    solve_equilibrium = TRUE,\n    precipitation = TRUE\n  ))\n\n  trans &lt;- split_trans_results(trans, grid, tableau_species)\n  save_and_upload_results(trans, \"trans\", \"trans\")\n\n} else {\n  trans &lt;- readRDS(\"last_results/trans.rds\")\n}"
  },
  {
    "objectID": "index.html#mass-balances",
    "href": "index.html#mass-balances",
    "title": "Fe Treatment Model",
    "section": "Mass Balances",
    "text": "Mass Balances\n\nSpecies-based Mass Balances\nThe change in concentration of a species \\(i\\), integrated over depth and in relation to the area \\(A\\) is\n\\[\\frac{dC_{A,i}}{dt} \\; \\left( \\frac{mol}{m^2 \\cdot a} \\right) = J(a)_i - J(b)_i + \\int_{a}^b \\Psi \\sum R_i\\]\nwith\n\n\\(J(a)_i\\): flux of species \\(i\\) across upper boundary\n\\(J(b)_i\\): flux of species \\(i\\) across lower boundary\n\\(\\Psi\\): volume fraction.\n\n\n\nCode\nspecies_mass_balance &lt;- function(species_vector, std, grid) {\n  \n  species_mass_balance_inner &lt;- function(species, std, grid) {\n  \n    tran.species &lt;- paste0(\"tran.\", species)\n    flux_up   &lt;- std$transport[[tran.species]]$flux.up\n    flux_down &lt;- std$transport[[tran.species]]$flux.down\n    netto_flux &lt;- flux_up - flux_down\n    \n    R.species &lt;- paste0(\"R.\", species)\n    sumR_integrated &lt;- sum(std$sumR[[R.species]] * grid$dx)\n    \n    bilanz &lt;- netto_flux + sumR_integrated\n    \n    return(data.frame(\n      species = species,\n      flux_up = flux_up,\n      flux_down = flux_down,\n      netto_flux = netto_flux,\n      sumR_integrated = sumR_integrated,\n      bilanz = bilanz\n    ))\n  }\n  \n  species_based_mass_balance &lt;- data.frame(\n  \"Species\" = NULL,\n  \"Flux up\" = NULL,\n  \"Flux down\" = NULL,\n  \"Netto Flux\" = NULL,\n  \"Integral Sum R\" = NULL,\n  \"Bilanz\" = NULL\n  )\n  \n  for (species in species_vector) {\n    species_based_mass_balance &lt;- rbind(\n      species_based_mass_balance,\n      species_mass_balance_inner(species, std, grid)\n    )\n  }\n  \n  return(species_based_mass_balance)\n}\n\n\n\n\n\nstd1 (mol m-2 yr-1)\n\n\n\n\n\n\n\n\n\n\nspecies\nflux_up\nflux_down\nnetto_flux\nsumR_integrated\nbilanz\n\n\n\n\nALK\n-2.377e+00\n2.019e-02\n-2.397e+00\n2.397e+00\n-2.007e-13\n\n\nDIC\n-2.641e+00\n1.812e-02\n-2.659e+00\n2.659e+00\n-4.885e-15\n\n\nTOT_P\n1.016e-02\n1.518e-05\n1.015e-02\n-1.015e-02\n-1.579e-16\n\n\nTOT_N5\n-3.675e-02\n0.000e+00\n-3.675e-02\n3.675e-02\n6.245e-17\n\n\nTOT_N3\n-2.222e-01\n1.128e-03\n-2.233e-01\n2.233e-01\n-1.110e-16\n\n\nTOT_S6\n1.027e-01\n3.846e-02\n6.424e-02\n-6.424e-02\n-4.372e-14\n\n\nTOT_S2\n-3.129e-03\n8.287e-06\n-3.137e-03\n3.137e-03\n-9.842e-14\n\n\nCH4\n-1.083e-06\n6.378e-06\n-7.460e-06\n7.460e-06\n-2.609e-19\n\n\nO2\n2.246e+00\n0.000e+00\n2.246e+00\n-2.246e+00\n4.441e-16\n\n\nN2\n-2.103e-02\n1.006e-05\n-2.104e-02\n2.104e-02\n-2.776e-17\n\n\nMn2\n-3.999e-01\n1.392e-04\n-4.000e-01\n4.000e-01\n0.000e+00\n\n\nFe2\n-6.365e-01\n1.308e-04\n-6.366e-01\n6.366e-01\n-9.770e-14\n\n\nCa2\n2.425e-03\n1.906e-03\n5.185e-04\n-5.185e-04\n2.423e-15\n\n\nMnO2\n4.000e-01\n0.000e+00\n4.000e-01\n-4.000e-01\n5.551e-17\n\n\nOM\n3.650e-01\n1.449e-02\n3.505e-01\n-3.505e-01\n0.000e+00\n\n\nOM_beta\n4.380e+00\n2.071e+00\n2.309e+00\n-2.309e+00\n0.000e+00\n\n\nFeOH3\n7.500e-01\n6.145e-03\n7.439e-01\n-7.439e-01\n-1.110e-15\n\n\nFeOH3_P\n0.000e+00\n1.010e-04\n-1.010e-04\n1.010e-04\n1.062e-15\n\n\nFeCO3\n0.000e+00\n0.000e+00\n0.000e+00\n0.000e+00\n0.000e+00\n\n\nS0\n0.000e+00\n6.284e-03\n-6.284e-03\n6.284e-03\n-5.204e-18\n\n\nFeS\n0.000e+00\n5.482e-02\n-5.482e-02\n5.482e-02\n9.846e-14\n\n\nViv\n0.000e+00\n1.745e-02\n-1.745e-02\n1.745e-02\n-2.359e-16\n\n\nCaCO3\n0.000e+00\n1.048e-04\n-1.048e-04\n1.048e-04\n0.000e+00\n\n\nApatite\n0.000e+00\n1.379e-04\n-1.379e-04\n1.379e-04\n-1.897e-18\n\n\nMnCO3\n0.000e+00\n0.000e+00\n0.000e+00\n0.000e+00\n0.000e+00\n\n\n\n\n\n\n\nElement-based Mass Balances\nThe total amount of an chemical element \\(e\\) is not influenced by chemical reactions. Therefore, the over the depth integrated and summed up reaction rates of of species \\(i\\) that contain a chemical element is 0.\n\\[\\sum \\left[ \\frac{e}{i} \\cdot \\int_{a}^b \\Psi \\sum R_i \\right]_e = 0\\]\nFrom this follows, that under stationary conditions the flux in and out of the sediment domain cancel out.\n\\[\\frac{dC_{A,e}}{dt} \\; \\left( \\frac{mol}{m^2 \\cdot a} \\right) = J(a)_e - J(b)_e = 0\\]\n\n\nCode\nelement_mass_balance &lt;- function(elemental_composition, std, grid) {\n  \n  species_sumR_integrated &lt;- function(species, std, grid) {\n    \n    R.species &lt;- paste0(\"R.\", species)\n    sumR_integrated &lt;- sum(std$sumR[[R.species]] * grid$dx)\n    \n    return(sumR_integrated)\n  }\n\n  species_boundary_fluxes &lt;- function(species, std, grid) {\n  \n    tran.species &lt;- paste0(\"tran.\", species)\n    flux_up   &lt;- std$transport[[tran.species]]$flux.up\n    flux_down &lt;- std$transport[[tran.species]]$flux.down\n    \n    return(list(\n      flux_up = flux_up,\n      flux_down = flux_down\n    ))\n  }\n\n  elements &lt;- names(elemental_composition)\n  \n  overview &lt;- data.frame(\n    \"Element\" = NULL,\n    \"Netto Flux\" = NULL,\n    \"Integral Sum R\" = NULL\n  )\n\n  detailed &lt;- list()\n  \n  for (element in elements) {\n\n    composition &lt;- elemental_composition[[element]]\n\n    detailed_part &lt;- data.frame(\n      \"Species\" = NULL,\n      \"Flux up\" = NULL,\n      \"Flux down\" = NULL,\n      \"Intergal Sum R\" = NULL\n    )\n\n    # for every species in which an element is present ...\n    for (i in seq_len(nrow(composition))) {\n      species &lt;- composition$species[i]\n      stoic   &lt;- composition$stoic[i]\n\n      sumR &lt;- species_sumR_integrated(species, std, grid) * stoic\n\n      boundary_fluxes &lt;- species_boundary_fluxes(species, std, grid)\n      flux_up &lt;- boundary_fluxes$flux_up * stoic\n      flux_down &lt;- boundary_fluxes$flux_down * stoic\n\n      detailed_part &lt;- rbind(\n        detailed_part,\n        data.frame(\n          \"Species\" = species,\n          \"Flux up\" = flux_up,\n          \"Flux down\" = flux_down,\n          \"Integral Sum R\" = sumR\n        )\n      )\n    }\n\n    detailed[[element]] &lt;- detailed_part\n\n    net_flux &lt;- sum(detailed_part[[\"Flux.up\"]]) - sum(detailed_part[[\"Flux.down\"]])\n    net_rate &lt;- sum(detailed_part[[\"Integral.Sum.R\"]])\n\n    overview &lt;- rbind(\n      overview,\n      data.frame(\n        \"Element\" = element,\n        \"Netto Flux\" = net_flux,\n        \"Integral Sum R\" = net_rate\n      )\n    )\n  }\n  \n  return(list(\n    overview = overview,\n    detailed = detailed\n  ))\n}\n\n\n\nElemental Composition of Model-Species\n\n\n\n\nC\n\n\nspecies\nstoic\n\n\n\n\nDIC\n1\n\n\nCH4\n1\n\n\nOM\n1\n\n\nFeCO3\n1\n\n\nCaCO3\n1\n\n\nOM_beta\n1\n\n\n\n\n\n\nN\n\n\nspecies\nstoic\n\n\n\n\nTOT_N5\n1.00000\n\n\nTOT_N3\n1.00000\n\n\nN2\n2.00000\n\n\nOM\n0.11364\n\n\nOM_beta\n0.11364\n\n\n\n\n\n\nP\n\n\nspecies\nstoic\n\n\n\n\nTOT_P\n1.00000\n\n\nOM\n0.00943\n\n\nFeOH3_P\n0.60000\n\n\nViv\n2.00000\n\n\nApatite\n2.00000\n\n\nOM_beta\n0.00943\n\n\n\n\n\n\nS\n\n\nspecies\nstoic\n\n\n\n\nTOT_S6\n1\n\n\nTOT_S2\n1\n\n\nS0\n1\n\n\nFeS\n1\n\n\n\n\n\n\n\n\nFe\n\n\nspecies\nstoic\n\n\n\n\nFe2\n1\n\n\nFeOH3\n1\n\n\nFeOH3_P\n1\n\n\nFeCO3\n1\n\n\nFeS\n1\n\n\nViv\n3\n\n\n\n\n\n\nMn\n\n\nspecies\nstoic\n\n\n\n\nMn2\n1\n\n\nMnO2\n1\n\n\n\n\n\n\nCa\n\n\nspecies\nstoic\n\n\n\n\nCa2\n1\n\n\nCaCO3\n1\n\n\nApatite\n3\n\n\n\n\n\n\n\n\nOverview Mass Balances\n\n\n\n\nstd1 (mol m-2 yr-1)\n\n\nElement\nNetto.Flux\nIntegral.Sum.R\n\n\n\n\nC\n-4.9e-15\n3.5e-18\n\n\nN\n-1.4e-16\n-1.4e-17\n\n\nP\n0.0e+00\n2.9e-18\n\n\nS\n-4.4e-14\n5.6e-17\n\n\nFe\n-4.2e-17\n7.5e-17\n\n\nMn\n5.0e-17\n0.0e+00\n\n\nCa\n2.4e-15\n0.0e+00\n\n\n\n\n\n\nstd2 (mol m-2 yr-1)\n\n\nElement\nNetto.Flux\nIntegral.Sum.R\n\n\n\n\nC\n1.1e+01\n-5.5e+09\n\n\nN\n-5.9e-03\n2.0e-17\n\n\nP\n-2.2e-07\n-4.6e-16\n\n\nS\n-9.7e-02\n0.0e+00\n\n\nFe\n1.9e-07\n6.3e+00\n\n\nMn\n1.8e-01\n-5.5e+09\n\n\nCa\n2.6e-08\n4.3e-16\n\n\n\n\n\n\n\n\nDetailed Mass Balances\n\nstd1\n\n\n\n\nstd1: C (mol m-2 yr-1)\n\n\nSpecies\nFlux.up\nFlux.down\nIntegral.Sum.R\n\n\n\n\nDIC\n-2.64103\n0.01812\n2.65915\n\n\nCH4\n0.00000\n0.00001\n0.00001\n\n\nOM\n0.36500\n0.01449\n-0.35051\n\n\nFeCO3\n0.00000\n0.00000\n0.00000\n\n\nCaCO3\n0.00000\n0.00010\n0.00010\n\n\nOM_beta\n4.38000\n2.07125\n-2.30875\n\n\n\n\n\n\nstd1: N (mol m-2 yr-1)\n\n\nSpecies\nFlux.up\nFlux.down\nIntegral.Sum.R\n\n\n\n\nTOT_N5\n-0.03675\n0.00000\n0.03675\n\n\nTOT_N3\n-0.22222\n0.00113\n0.22335\n\n\nN2\n-0.04207\n0.00002\n0.04209\n\n\nOM\n0.04148\n0.00165\n-0.03983\n\n\nOM_beta\n0.49773\n0.23537\n-0.26236\n\n\n\n\n\n\nstd1: P (mol m-2 yr-1)\n\n\nSpecies\nFlux.up\nFlux.down\nIntegral.Sum.R\n\n\n\n\nTOT_P\n0.01016\n0.00002\n-0.01015\n\n\nOM\n0.00344\n0.00014\n-0.00331\n\n\nFeOH3_P\n0.00000\n0.00006\n0.00006\n\n\nViv\n0.00000\n0.03490\n0.03490\n\n\nApatite\n0.00000\n0.00028\n0.00028\n\n\nOM_beta\n0.04132\n0.01954\n-0.02178\n\n\n\n\n\n\n\n\nstd1: S (mol m-2 yr-1)\n\n\nSpecies\nFlux.up\nFlux.down\nIntegral.Sum.R\n\n\n\n\nTOT_S6\n0.10270\n0.03846\n-0.06424\n\n\nTOT_S2\n-0.00313\n0.00001\n0.00314\n\n\nS0\n0.00000\n0.00628\n0.00628\n\n\nFeS\n0.00000\n0.05482\n0.05482\n\n\n\n\n\n\nstd1: Fe (mol m-2 yr-1)\n\n\nSpecies\nFlux.up\nFlux.down\nIntegral.Sum.R\n\n\n\n\nFe2\n-0.63646\n0.00013\n0.63659\n\n\nFeOH3\n0.75000\n0.00614\n-0.74386\n\n\nFeOH3_P\n0.00000\n0.00010\n0.00010\n\n\nFeCO3\n0.00000\n0.00000\n0.00000\n\n\nFeS\n0.00000\n0.05482\n0.05482\n\n\nViv\n0.00000\n0.05235\n0.05235\n\n\n\n\n\n\nstd1: Mn (mol m-2 yr-1)\n\n\nSpecies\nFlux.up\nFlux.down\nIntegral.Sum.R\n\n\n\n\nMn2\n-0.39986\n0.00014\n0.4\n\n\nMnO2\n0.40000\n0.00000\n-0.4\n\n\n\n\n\n\n\n\nstd1: Ca (mol m-2 yr-1)\n\n\nSpecies\nFlux.up\nFlux.down\nIntegral.Sum.R\n\n\n\n\nCa2\n0.00242\n0.00191\n-0.00052\n\n\nCaCO3\n0.00000\n0.00010\n0.00010\n\n\nApatite\n0.00000\n0.00041\n0.00041\n\n\n\n\n\n\n\n\nstd2\n\n\n\n\nstd2: C (mol m-2 yr-1)\n\n\nSpecies\nFlux.up\nFlux.down\nIntegral.Sum.R\n\n\n\n\nDIC\n10.20581\n0.03052\n-5.490724e+09\n\n\nCH4\n0.00000\n0.00001\n5.500000e-04\n\n\nOM\n0.36500\n0.01449\n-3.505100e-01\n\n\nFeCO3\n0.00000\n0.37019\n-1.745910e+00\n\n\nCaCO3\n0.00000\n1.72630\n-8.241480e+00\n\n\nOM_beta\n4.38000\n2.07125\n-2.308750e+00\n\n\n\n\n\n\nstd2: N (mol m-2 yr-1)\n\n\nSpecies\nFlux.up\nFlux.down\nIntegral.Sum.R\n\n\n\n\nTOT_N5\n0.01137\n0.00000\n0.02922\n\n\nTOT_N3\n-0.31827\n0.00115\n0.27037\n\n\nN2\n0.00000\n0.00000\n0.00260\n\n\nOM\n0.04148\n0.00165\n-0.03983\n\n\nOM_beta\n0.49773\n0.23537\n-0.26236\n\n\n\n\n\n\nstd2: P (mol m-2 yr-1)\n\n\nSpecies\nFlux.up\nFlux.down\nIntegral.Sum.R\n\n\n\n\nTOT_P\n0.06244\n0.00020\n-4.13453\n\n\nOM\n0.00344\n0.00014\n-0.00331\n\n\nFeOH3_P\n0.00000\n0.00000\n-0.00133\n\n\nViv\n0.00000\n0.07866\n4.17383\n\n\nApatite\n0.00000\n0.00866\n-0.01288\n\n\nOM_beta\n0.04132\n0.01954\n-0.02178\n\n\n\n\n\n\n\n\nstd2: S (mol m-2 yr-1)\n\n\nSpecies\nFlux.up\nFlux.down\nIntegral.Sum.R\n\n\n\n\nTOT_S6\n0.02123\n0.03870\n2.100000e-04\n\n\nTOT_S2\n-0.00063\n0.00000\n-1.955334e+180\n\n\nS0\n0.00000\n0.00000\n2.413500e-01\n\n\nFeS\n0.00000\n0.07933\n1.955334e+180\n\n\n\n\n\n\nstd2: Fe (mol m-2 yr-1)\n\n\nSpecies\nFlux.up\nFlux.down\nIntegral.Sum.R\n\n\n\n\nFe2\n-0.16758\n0.00000\n-1.955334e+180\n\n\nFeOH3\n0.75000\n0.01491\n1.037520e+00\n\n\nFeOH3_P\n0.00000\n0.00001\n-2.210000e-03\n\n\nFeCO3\n0.00000\n0.37019\n-1.745910e+00\n\n\nFeS\n0.00000\n0.07933\n1.955334e+180\n\n\nViv\n0.00000\n0.11799\n6.260740e+00\n\n\n\n\n\n\nstd2: Mn (mol m-2 yr-1)\n\n\nSpecies\nFlux.up\nFlux.down\nIntegral.Sum.R\n\n\n\n\nMn2\n-0.20313\n0.01683\n-5.490724e+09\n\n\nMnO2\n0.40000\n0.00001\n-1.599860e+00\n\n\n\n\n\n\n\n\nstd2: Ca (mol m-2 yr-1)\n\n\nSpecies\nFlux.up\nFlux.down\nIntegral.Sum.R\n\n\n\n\nCa2\n1.73929\n0.00000\n8.26081\n\n\nCaCO3\n0.00000\n1.72630\n-8.24148\n\n\nApatite\n0.00000\n0.01299\n-0.01932\n\n\n\n\n\n\n\n\n\n\nDepth Integrated Reaction Rates\n\n\nCode\ndepth_integrated_reactionrates &lt;- function(std, grid) {\n  \n  integrated_reactionrate &lt;- function(rate, std, grid) {\n    \n    rate_integrated &lt;- sum(std$rates[[rate]] * grid$dx)\n    \n    return(rate_integrated)\n  }\n\n  rates &lt;- names(std$rates)\n  \n  result &lt;- data.frame(\n    \"Name\" = NULL,\n    \"Rate\" = NULL\n  )\n  \n  for (rate in rates) {\n  \n    result &lt;- rbind(\n      result,\n      data.frame(\n        \"Name\" = rate,\n        \"Rate\" = integrated_reactionrate(rate, std, grid)\n      )\n    )\n  }\n  \n  return(result)\n}\n\n\n\n\n\n\nstd1: depth integrated reaction rates (mol m-2 yr-1)\n\n\nName\nRate\n\n\n\n\nR1\n0.02412\n\n\nR2\n0.00918\n\n\nR3\n0.00002\n\n\nR4\n0.05461\n\n\nR5\n0.24677\n\n\nR6\n0.01582\n\n\nR1b\n0.11104\n\n\nR2b\n0.04343\n\n\nR3b\n0.00007\n\n\nR4b\n0.33482\n\n\nR5b\n1.70890\n\n\nR6b\n0.11050\n\n\nR7\n0.00000\n\n\nR8\n0.00000\n\n\nR9\n0.00628\n\n\nR10\n0.00149\n\n\nR11\n0.00001\n\n\nR12\n0.05627\n\n\nR13\n1.02477\n\n\nR14\n0.00010\n\n\nR15\n0.01746\n\n\nR16\n0.00001\n\n\nR17\n0.00016\n\n\nR18\n0.00005\n\n\nR19\n0.00014\n\n\nR20\n0.00000\n\n\nR21\n0.08896\n\n\nR22\n0.07884\n\n\nR23\n0.00000\n\n\nR24\n0.21579\n\n\nR25\n0.00688\n\n\nR26\n0.00000\n\n\nR27\n0.00000\n\n\n\n\n\n\nstd2: depth integrated reaction rates (mol m-2 yr-1)\n\n\nName\nRate\n\n\n\n\nR1\n2.364000e-02\n\n\nR2\n5.900000e-04\n\n\nR3\n1.023000e-02\n\n\nR4\n4.796000e-02\n\n\nR5\n2.520500e-01\n\n\nR6\n1.605000e-02\n\n\nR1b\n1.087800e-01\n\n\nR2b\n2.660000e-03\n\n\nR3b\n5.559000e-02\n\n\nR4b\n3.070900e-01\n\n\nR5b\n1.723900e+00\n\n\nR6b\n1.107200e-01\n\n\nR7\n2.245140e+00\n\n\nR8\n3.991050e+00\n\n\nR9\n1.839700e-01\n\n\nR10\n1.000000e-04\n\n\nR11\n0.000000e+00\n\n\nR12\n5.532000e-02\n\n\nR13\n1.955334e+180\n\n\nR14\n1.573000e-01\n\n\nR15\n2.092570e+00\n\n\nR16\n5.660000e-03\n\n\nR17\n5.824700e-01\n\n\nR18\n8.823950e+00\n\n\nR19\n0.000000e+00\n\n\nR20\n6.440000e-03\n\n\nR21\n3.139000e-01\n\n\nR22\n3.182000e-02\n\n\nR23\n1.277000e-02\n\n\nR24\n2.321700e-01\n\n\nR25\n7.510000e-03\n\n\nR26\n5.490725e+09\n\n\nR27\n4.481338e+02"
  },
  {
    "objectID": "interactive_std.html",
    "href": "interactive_std.html",
    "title": "Explore steady-state",
    "section": "",
    "text": "There is a set of functions to easily check values. They all have similar arguments.\nConcentrations\n\nreturns concentrations (mol m-3_phase)\nworks for lump sums and speciation results\ndepth specification optional\n\n\n# Definition\nstd.conc &lt;- function(std, species, depth = minmaxdepth())\n\n# Usage\nstd.conc(std1, \"Fe2\")\nstd.conc(std2, \"PO4\", depth = c(0.05, 0.5))\n\nTransport\n\nreturns change of concentration due to transport (mol m-3_phase yr-1)\ndepth specification optional\n\n\n# Definition\nstd.transport &lt;- function(std, species, depth = minmaxdepth())\n\n# Usage\nstd.transport(std1, \"Fe2\")\nstd.transport(std2, \"PO4\", depth = c(0.05, 0.5))\n\nFluxes\n\nreturn fluxes at the top / bottom boundary (mol m-2)\n\n\n# Definition\nstd.flux_up   &lt;- function(std, species)\nstd.flux_down &lt;- function(std, species)\n\n# Usage\nstd.flux_up(std1, \"Fe2\")\nstd.flux_down(std1, \"FeOH3\")\n\nChange of concentration due to reactions\n\nreturns change of concentration due to reactions (mol m-3 yr-1)\ndepth specification optional\n\n\n# Definition\nstd.sumR &lt;- function(std, species, depth = minmaxdepth())\n\n# Usage\nstd.sumR(std1, \"Fe2\")\nstd.sumR(std2, \"FeOH3\", depth = c(0.05, 0.5))\n\nReaction Rates\n\nreturns reaction rates (mol m-3 yr-1)\ndepth specification optional\n\n\n# Definition\nstd.rate &lt;- function(std, rate, depth = minmaxdepth())\n\n# Usage\nstd.rate(std1, \"R1\")\nstd.rate(std2, \"R1\", depth = c(0.05, 0.5))\n\nOmega\n\nreturns omega (saturation states) (-)\ndepth specification optional\n\n\n# Definition\nstd.omega &lt;- function(std, species, depth = minmaxdepth())\n\n# Usage\nstd.omega(std = std1, species = \"Viv\")\nstd.omega(std = std1, species = \"FeS\", depth = c(0.02, 0.03))\n\n\n\n\n\nthe functions from the previous section can be used to create a quick plot.\ndifferent profiles can be plotted together\nto name entries in the legend, give an profile a argument-name\ndo not specify a deth for the single elements!!! the depth of interest to be plotted can be specified seperately\nthe legend position can be specified via keywords (“bottomright”, “bottom”, “bottomleft”, “left”, “topleft”, “top”, “topright”, “right” and “center”)\n\n\n# Definition\nstd.plot &lt;- function(..., depth = minmaxdepth(), legendpos = \"bottomright\")\n\n# Usage\nstd.plot(\n  Fe2_std1 = std.conc(std1, \"Fe2\"),\n  Fe2_std2 = std.conc(std2, \"Fe2\"),\n  depth = c(0.00, 0.01)\n)\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "interactive_std.html#explore-model-results-interactively",
    "href": "interactive_std.html#explore-model-results-interactively",
    "title": "Explore steady-state",
    "section": "",
    "text": "There is a set of functions to easily check values. They all have similar arguments.\nConcentrations\n\nreturns concentrations (mol m-3_phase)\nworks for lump sums and speciation results\ndepth specification optional\n\n\n# Definition\nstd.conc &lt;- function(std, species, depth = minmaxdepth())\n\n# Usage\nstd.conc(std1, \"Fe2\")\nstd.conc(std2, \"PO4\", depth = c(0.05, 0.5))\n\nTransport\n\nreturns change of concentration due to transport (mol m-3_phase yr-1)\ndepth specification optional\n\n\n# Definition\nstd.transport &lt;- function(std, species, depth = minmaxdepth())\n\n# Usage\nstd.transport(std1, \"Fe2\")\nstd.transport(std2, \"PO4\", depth = c(0.05, 0.5))\n\nFluxes\n\nreturn fluxes at the top / bottom boundary (mol m-2)\n\n\n# Definition\nstd.flux_up   &lt;- function(std, species)\nstd.flux_down &lt;- function(std, species)\n\n# Usage\nstd.flux_up(std1, \"Fe2\")\nstd.flux_down(std1, \"FeOH3\")\n\nChange of concentration due to reactions\n\nreturns change of concentration due to reactions (mol m-3 yr-1)\ndepth specification optional\n\n\n# Definition\nstd.sumR &lt;- function(std, species, depth = minmaxdepth())\n\n# Usage\nstd.sumR(std1, \"Fe2\")\nstd.sumR(std2, \"FeOH3\", depth = c(0.05, 0.5))\n\nReaction Rates\n\nreturns reaction rates (mol m-3 yr-1)\ndepth specification optional\n\n\n# Definition\nstd.rate &lt;- function(std, rate, depth = minmaxdepth())\n\n# Usage\nstd.rate(std1, \"R1\")\nstd.rate(std2, \"R1\", depth = c(0.05, 0.5))\n\nOmega\n\nreturns omega (saturation states) (-)\ndepth specification optional\n\n\n# Definition\nstd.omega &lt;- function(std, species, depth = minmaxdepth())\n\n# Usage\nstd.omega(std = std1, species = \"Viv\")\nstd.omega(std = std1, species = \"FeS\", depth = c(0.02, 0.03))\n\n\n\n\n\nthe functions from the previous section can be used to create a quick plot.\ndifferent profiles can be plotted together\nto name entries in the legend, give an profile a argument-name\ndo not specify a deth for the single elements!!! the depth of interest to be plotted can be specified seperately\nthe legend position can be specified via keywords (“bottomright”, “bottom”, “bottomleft”, “left”, “topleft”, “top”, “topright”, “right” and “center”)\n\n\n# Definition\nstd.plot &lt;- function(..., depth = minmaxdepth(), legendpos = \"bottomright\")\n\n# Usage\nstd.plot(\n  Fe2_std1 = std.conc(std1, \"Fe2\"),\n  Fe2_std2 = std.conc(std2, \"Fe2\"),\n  depth = c(0.00, 0.01)\n)\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "interactive_transient.html#species-concentrations",
    "href": "interactive_transient.html#species-concentrations",
    "title": "Explore Results of dynamic Run",
    "section": "",
    "text": "species_transposed = transpose(species)\n\nimport {offsetInterval} from \"@mootari/offset-slider\"\n\nviewof species_selection = Inputs.checkbox(species_names, {label: \"Species:\"})\n\nviewof time_selection = offsetInterval(times, {\n  label: \"Time (yr):\",\n  value: [ d3.min(times), d3.min(times) ]\n})\n\nviewof depth_selection = offsetInterval(depths, {\n  label: \"Depth:\",\n  value: [ d3.min(depths), d3.max(depths) ]\n})\n\nviewof colormode = Inputs.radio([\"time\", \"name\"], {label: \"Color:\"})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfiltered = species_transposed.filter(function(entry) {\n  return time_selection[0]  &lt;= entry.time && time_selection[1]   &gt;= entry.time &&\n         depth_selection[0] &lt;= entry.depth && depth_selection[1] &gt;= entry.depth &&\n         species_selection.includes(entry.name);\n})\n\n\n\nPlot.plot({\n  width:  800,\n  height: 600,\n  y: {domain: [d3.max(depths), d3.min(depths)]},  \n  color: {legend: true},\n  marks: [\n    Plot.frame(),\n    Plot.lineY(filtered, {x: \"value\", y: \"depth\", stroke: colormode, curve: \"basis\", strokeWidth: 5})\n  ]}\n)"
  },
  {
    "objectID": "CompVanCap.html",
    "href": "CompVanCap.html",
    "title": "Comparision to Wang & Van Capellen (1996)",
    "section": "",
    "text": "We are comparing to profile S4"
  },
  {
    "objectID": "CompVanCap.html#ph-alkalinity",
    "href": "CompVanCap.html#ph-alkalinity",
    "title": "Comparision to Wang & Van Capellen (1996)",
    "section": "",
    "text": "We are comparing to profile S4"
  },
  {
    "objectID": "CompVanCap.html#o2-fe2-mn2",
    "href": "CompVanCap.html#o2-fe2-mn2",
    "title": "Comparision to Wang & Van Capellen (1996)",
    "section": "O2, Fe2+, Mn2+",
    "text": "O2, Fe2+, Mn2+"
  },
  {
    "objectID": "CompVanCap.html#no3-nh4",
    "href": "CompVanCap.html#no3-nh4",
    "title": "Comparision to Wang & Van Capellen (1996)",
    "section": "NO3 & NH4",
    "text": "NO3 & NH4"
  },
  {
    "objectID": "CompVanCap.html#mno2-feoh3",
    "href": "CompVanCap.html#mno2-feoh3",
    "title": "Comparision to Wang & Van Capellen (1996)",
    "section": "MnO2 & FeOH3",
    "text": "MnO2 & FeOH3"
  },
  {
    "objectID": "CompVanCap.html#feco3-mnco3-fes",
    "href": "CompVanCap.html#feco3-mnco3-fes",
    "title": "Comparision to Wang & Van Capellen (1996)",
    "section": "FeCO3, MnCO3, FeS",
    "text": "FeCO3, MnCO3, FeS"
  }
]